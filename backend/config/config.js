const { Sequelize, DataTypes } = require('sequelize');
const path = require('path');

// D√©termine si l'application est en production (packag√©e) ou en d√©veloppement
const databasePath = process.env.NODE_ENV === 'production'
  ? path.join(process.resourcesPath, 'database.sqlite')  // En production, le fichier est plac√© dans process.resourcesPath
  : path.join(__dirname, 'database.sqlite');              // En d√©veloppement, le fichier est dans le m√™me dossier

console.log("üìÇ Chemin SQLite :", databasePath);

// Cr√©ation de l'instance Sequelize pour SQLite
const sequelize = new Sequelize({
  dialect: 'sqlite',
  storage: databasePath,
  logging: console.log  // Affiche les requ√™tes SQL (optionnel)
});

// V√©rification de la connexion
sequelize.authenticate()
  .then(() => console.log('‚úÖ Connexion r√©ussie √† la base de donn√©es avec Sequelize'))
  .catch((err) => console.error('‚ùå Erreur de connexion √† SQLite avec Sequelize :', err));

// Synchronisation de la base de donn√©es (cr√©ation des tables si elles n'existent pas)
sequelize.sync()
  .then(() => console.log('‚úÖ Les tables ont √©t√© cr√©√©es ou existent d√©j√†.'))
  .catch((error) => console.error('‚ùå Erreur lors de la synchronisation des tables :', error));

module.exports = sequelize;
