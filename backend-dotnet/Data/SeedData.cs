/*
 * ================================================================================================
 * DONN√âES INITIALES - R√âF√âRENTIELS PROPRI√âT√â INTELLECTUELLE
 * ================================================================================================
 * 
 * OBJECTIF :
 * Initialise les donn√©es de r√©f√©rence essentielles pour le fonctionnement du syst√®me
 * de gestion de propri√©t√© intellectuelle avec conformit√© standards internationaux.
 * 
 * DONN√âES INITIALIS√âES :
 * ======================
 * 
 * üåç PAYS ET JURIDICTIONS :
 *    - 30 pays principaux avec codes ISO 2/3 lettres
 *    - Organisations sp√©cialis√©es : EPO (Office Europ√©en Brevets)
 *    - WIPO (Organisation Mondiale Propri√©t√© Intellectuelle)
 *    - Couverture g√©ographique optimale pour clients internationaux
 * 
 * üìä STATUTS BREVETS COMPLETS :
 *    - Statuts de base (via OnModelCreating) : Examen, D√©livr√©, Rejet√©, etc.
 *    - Statuts avanc√©s : Publication, Opposition, Recours, Maintenu, R√©voqu√©
 *    - Conformit√© lifecycle EPO et standards internationaux
 * 
 * üîß FONCTIONNALIT√âS :
 *    - V√©rification existence avant insertion (√©vite doublons)
 *    - Initialisation conditionnelle (seulement si DB vide)
 *    - Gestion erreurs avec logging console
 *    - Cr√©ation base donn√©es automatique si inexistante
 * 
 * CONFORMIT√â STANDARDS :
 * =====================
 * ‚úÖ ISO 3166 : Codes pays alpha-2 et alpha-3
 * ‚úÖ EPO Guidelines : Statuts brevets europ√©ens
 * ‚úÖ WIPO Standards : Proc√©dures internationales
 * ‚úÖ Performance : Insertion par lots optimis√©e
 * 
 * ARCHITECTURE D√âPLOIEMENT :
 * ==========================
 * - Appel√© au d√©marrage application (Program.cs)
 * - Idempotent : peut √™tre ex√©cut√© plusieurs fois
 * - Logging d√©taill√© pour monitoring d√©ploiement
 * - Gestion gracieuse erreurs sans interruption
 * 
 * ================================================================================================
 */

using Microsoft.EntityFrameworkCore;
using StartingBloch.Backend.Models;

namespace StartingBloch.Backend.Data;

/// <summary>
/// Service d'initialisation des donn√©es de r√©f√©rence pour le syst√®me propri√©t√© intellectuelle.
/// Configure pays, statuts brevets et autres r√©f√©rentiels selon standards internationaux.
/// Ex√©cution idempotente au d√©marrage application avec gestion erreurs robuste.
/// </summary>
public static class SeedData
{
    /// <summary>
    /// Point d'entr√©e principal pour initialisation compl√®te des donn√©es de r√©f√©rence.
    /// Cr√©e la base si n√©cessaire et peuple les r√©f√©rentiels essentiels.
    /// </summary>
    /// <param name="context">Contexte base de donn√©es pour op√©rations</param>
    /// <returns>Task pour ex√©cution asynchrone</returns>
    public static async Task InitializeAsync(StartingBlochDbContext context)
    {
        try
        {
            // Cr√©ation base donn√©es si inexistante (dev/test)
            await context.Database.EnsureCreatedAsync();

            // V√©rification donn√©es existantes (√©vite re-initialisation)
            if (await context.Users.AnyAsync())
            {
                return; // Donn√©es d√©j√† initialis√©es - arr√™t gracieux
            }

            // Initialisation r√©f√©rentiels par ordre d√©pendances
            await SeedPaysAsync(context);
            await SeedStatutsAsync(context);

            Console.WriteLine("‚úÖ Donn√©es initiales cr√©√©es avec succ√®s");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Erreur lors de l'initialisation des donn√©es: {ex.Message}");
        }
    }

    /// <summary>
    /// Initialise le r√©f√©rentiel pays avec codes ISO standards et organisations sp√©cialis√©es.
    /// Couvre les juridictions principales pour propri√©t√© intellectuelle internationale.
    /// </summary>
    /// <param name="context">Contexte base de donn√©es</param>
    /// <returns>Task pour insertion asynchrone</returns>
    private static async Task SeedPaysAsync(StartingBlochDbContext context)
    {
        if (await context.Pays.AnyAsync()) return;

        var pays = new List<Pays>
        {
            // Pays europ√©ens principaux
            new() { NomFrFr = "France", CodeIso = "FR", CodeIso3 = "FRA" },
            new() { NomFrFr = "Allemagne", CodeIso = "DE", CodeIso3 = "DEU" },
            new() { NomFrFr = "Royaume-Uni", CodeIso = "GB", CodeIso3 = "GBR" },
            new() { NomFrFr = "Espagne", CodeIso = "ES", CodeIso3 = "ESP" },
            new() { NomFrFr = "Italie", CodeIso = "IT", CodeIso3 = "ITA" },
            new() { NomFrFr = "Pays-Bas", CodeIso = "NL", CodeIso3 = "NLD" },
            new() { NomFrFr = "Belgique", CodeIso = "BE", CodeIso3 = "BEL" },
            new() { NomFrFr = "Suisse", CodeIso = "CH", CodeIso3 = "CHE" },
            new() { NomFrFr = "Autriche", CodeIso = "AT", CodeIso3 = "AUT" },
            new() { NomFrFr = "Portugal", CodeIso = "PT", CodeIso3 = "PRT" },
            
            // Pays nordiques
            new() { NomFrFr = "Norv√®ge", CodeIso = "NO", CodeIso3 = "NOR" },
            new() { NomFrFr = "Su√®de", CodeIso = "SE", CodeIso3 = "SWE" },
            new() { NomFrFr = "Danemark", CodeIso = "DK", CodeIso3 = "DNK" },
            new() { NomFrFr = "Finlande", CodeIso = "FI", CodeIso3 = "FIN" },
            
            // Grandes puissances √©conomiques
            new() { NomFrFr = "√âtats-Unis", CodeIso = "US", CodeIso3 = "USA" },
            new() { NomFrFr = "Canada", CodeIso = "CA", CodeIso3 = "CAN" },
            new() { NomFrFr = "Japon", CodeIso = "JP", CodeIso3 = "JPN" },
            new() { NomFrFr = "Chine", CodeIso = "CN", CodeIso3 = "CHN" },
            new() { NomFrFr = "Cor√©e du Sud", CodeIso = "KR", CodeIso3 = "KOR" },
            new() { NomFrFr = "Australie", CodeIso = "AU", CodeIso3 = "AUS" },
            new() { NomFrFr = "Nouvelle-Z√©lande", CodeIso = "NZ", CodeIso3 = "NZL" },
            
            // March√©s √©mergents strat√©giques
            new() { NomFrFr = "Br√©sil", CodeIso = "BR", CodeIso3 = "BRA" },
            new() { NomFrFr = "Mexique", CodeIso = "MX", CodeIso3 = "MEX" },
            new() { NomFrFr = "Inde", CodeIso = "IN", CodeIso3 = "IND" },
            new() { NomFrFr = "Russie", CodeIso = "RU", CodeIso3 = "RUS" },
            new() { NomFrFr = "Isra√´l", CodeIso = "IL", CodeIso3 = "ISR" },
            new() { NomFrFr = "Singapour", CodeIso = "SG", CodeIso3 = "SGP" },
            new() { NomFrFr = "Afrique du Sud", CodeIso = "ZA", CodeIso3 = "ZAF" },
            
            // Organisations sp√©cialis√©es propri√©t√© intellectuelle
            new() { NomFrFr = "Organisation Europ√©enne des Brevets", CodeIso = "EP", CodeIso3 = "EPO" },
            new() { NomFrFr = "Organisation Mondiale de la Propri√©t√© Intellectuelle", CodeIso = "WO", CodeIso3 = "WIP" }
        };

        await context.Pays.AddRangeAsync(pays);
        await context.SaveChangesAsync();
    }

    /// <summary>
    /// Compl√®te les statuts brevets avec proc√©dures avanc√©es EPO et workflows sp√©cialis√©s.
    /// √âtend les statuts de base d√©finis dans OnModelCreating avec statuts post-d√©livrance.
    /// </summary>
    /// <param name="context">Contexte base de donn√©es</param>
    /// <returns>Task pour insertion conditionnelle</returns>
    private static async Task SeedStatutsAsync(StartingBlochDbContext context)
    {
        // Statuts avanc√©s post-d√©livrance et proc√©dures contentieuses
        var additionalStatuts = new List<Statuts>
        {
            new() { Id = 6, Description = "Publication" },      // Publication demande (18 mois)
            new() { Id = 7, Description = "Opposition" },       // Proc√©dure opposition EPO
            new() { Id = 8, Description = "Recours" },          // Proc√©dure recours
            new() { Id = 9, Description = "Maintenu" },         // Brevet maintenu post-opposition
            new() { Id = 10, Description = "R√©voqu√©" }          // R√©vocation post-contentieux
        };

        // Insertion conditionnelle (√©vite doublons si partiellement initialis√©)
        foreach (var statut in additionalStatuts)
        {
            if (!await context.Statuts.AnyAsync(s => s.Id == statut.Id))
            {
                await context.Statuts.AddAsync(statut);
            }
        }

        await context.SaveChangesAsync();
    }
}
