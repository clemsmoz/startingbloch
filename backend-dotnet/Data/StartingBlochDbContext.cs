/*
 * ================================================================================================
 * CONTEXTE PRINCIPAL BASE DONN√âES - ARCHITECTURE PROPRI√âT√â INTELLECTUELLE AVANC√âE
 * ================================================================================================
 * 
 * OBJECTIF :
 * Contexte Entity Framework Core principal avec architecture compl√®te pour gestion
 * propri√©t√© intellectuelle incluant syst√®me r√¥les granulaires et relations client-cabinet.
 * 
 * √âVOLUTION ARCHITECTURE :
 * =======================
 * 
 * üèóÔ∏è VERSION √âTENDUE vs AppDbContext :
 *    - Syst√®me r√¥les granulaires (Role, UserRole)
 *    - Relations client-cabinet (ClientCabinet)
 *    - Gestion timestamps automatique
 *    - Index uniques renforc√©s
 *    - Contraintes m√©tier √©tendues
 * 
 * üë• SYST√àME R√îLES AVANC√â :
 *    - Role : D√©finition r√¥les m√©tier (admin, user, client)
 *    - UserRole : Attribution r√¥les par client (granularit√© fine)
 *    - User.ClientId : Liaison utilisateurs externes clients
 *    - Permissions contextuelles par portefeuille client
 * 
 * üè¢ RELATIONS CABINET-CLIENT :
 *    - ClientCabinet : Mandats repr√©sentation PI
 *    - Gestion portefeuilles clients par cabinet
 *    - Tra√ßabilit√© relations commerciales
 *    - Optimisation acc√®s donn√©es selon mandats
 * 
 * OPTIMISATIONS PERFORMANCE :
 * ===========================
 * üöÄ INDEX STRAT√âGIQUES RENFORC√âS :
 *    - Index uniques relations M2M (√©vite doublons)
 *    - Index composites r√¥les utilisateurs
 *    - Index recherches fr√©quentes optimis√©es
 *    - Index liaison client-cabinet rapide
 * 
 * üîß CONTRAINTES M√âTIER :
 *    - Cascade delete intelligente
 *    - SetNull pour pr√©servation donn√©es
 *    - Valeurs par d√©faut s√©curis√©es
 *    - Unicit√© garantie relations critiques
 * 
 * FONCTIONNALIT√âS AVANC√âES :
 * ==========================
 * ‚è∞ GESTION TIMESTAMPS AUTOMATIQUE :
 *    - CreatedAt/UpdatedAt sur entit√©s principales
 *    - Override SaveChanges pour automation
 *    - Tra√ßabilit√© modifications selon RGPD
 * 
 * üéØ DONN√âES R√âF√âRENCE INT√âGR√âES :
 *    - R√¥les syst√®me pr√©-configur√©s
 *    - Descriptions m√©tier explicites
 *    - S√©paration employ√©s/clients claire
 * 
 * CONFORMIT√â ET S√âCURIT√â :
 * ========================
 * ‚úÖ Granularit√© r√¥les selon principes least privilege
 * ‚úÖ Tra√ßabilit√© compl√®te modifications (audit RGPD)
 * ‚úÖ Relations m√©tier propri√©t√© intellectuelle
 * ‚úÖ Performance optimis√©e requ√™tes complexes
 * ‚úÖ Int√©grit√© r√©f√©rentielle stricte
 * 
 * ================================================================================================
 */

using Microsoft.EntityFrameworkCore;
using StartingBloch.Backend.Models;

namespace StartingBloch.Backend.Data;

/// <summary>
/// Contexte Entity Framework Core principal avec architecture avanc√©e propri√©t√© intellectuelle.
/// Inclut syst√®me r√¥les granulaires, relations client-cabinet et gestion timestamps automatique.
/// Version √©tendue d'AppDbContext pour besoins m√©tier complexes et multi-tenancy.
/// </summary>
public class StartingBlochDbContext : DbContext
{
    /// <summary>
    /// Initialise le contexte avec configuration Entity Framework avanc√©e.
    /// </summary>
    /// <param name="options">Options configuration base donn√©es avec provider</param>
    public StartingBlochDbContext(DbContextOptions<StartingBlochDbContext> options) : base(options)
    {
    }

    // ================================================================================================
    // ENTIT√âS PRINCIPALES AVEC EXTENSIONS M√âTIER
    // ================================================================================================

    /// <summary>Utilisateurs avec liaison client optionnelle</summary>
    public DbSet<User> Users { get; set; }
    
    /// <summary>Clients avec gestion portefeuilles √©tendus</summary>
    public DbSet<Client> Clients { get; set; }
    
    /// <summary>Brevets - C≈ìur syst√®me propri√©t√© intellectuelle</summary>
    public DbSet<Brevet> Brevets { get; set; }
    
    /// <summary>Pays avec codes ISO standards</summary>
    public DbSet<Pays> Pays { get; set; }
    
    /// <summary>Statuts lifecycle brevets EPO</summary>
    public DbSet<Statuts> Statuts { get; set; }
    
    /// <summary>Cabinets mandataires avec relations clients</summary>
    public DbSet<Cabinet> Cabinets { get; set; }
    
    /// <summary>Contacts professionnels chiffr√©s</summary>
    public DbSet<Contact> Contacts { get; set; }
    
    /// <summary>Inventeurs avec droits moraux</summary>
    public DbSet<Inventeur> Inventeurs { get; set; }
    
    /// <summary>D√©posants entit√©s juridiques</summary>
    public DbSet<Deposant> Deposants { get; set; }
    
    /// <summary>Titulaires droits exploitation</summary>
    public DbSet<Titulaire> Titulaires { get; set; }
    
    /// <summary>Logs audit trail RGPD</summary>
    public DbSet<Log> Logs { get; set; }
    
    /// <summary>Informations d√©p√¥t officielles</summary>
    public DbSet<InformationDepot> InformationsDepot { get; set; }

    // ================================================================================================
    // SYST√àME R√îLES GRANULAIRES AVANC√â
    // ================================================================================================

    /// <summary>D√©finitions r√¥les m√©tier (admin, user, client)</summary>
    public DbSet<Role> Roles { get; set; }
    
    /// <summary>Attribution r√¥les par utilisateur et client (granularit√© fine)</summary>
    public DbSet<UserRole> UserRoles { get; set; }

    // ================================================================================================
    // TABLES LIAISON MANY-TO-MANY √âTENDUES
    // ================================================================================================

    /// <summary>Liaison Brevets ‚Üî Clients propri√©t√©</summary>
    public DbSet<BrevetClient> BrevetClients { get; set; }
    
    /// <summary>Liaison Brevets ‚Üî Inventeurs cr√©ateurs</summary>
    public DbSet<BrevetInventeur> BrevetInventeurs { get; set; }
    
    /// <summary>Liaison Brevets ‚Üî D√©posants juridiques</summary>
    public DbSet<BrevetDeposant> BrevetDeposants { get; set; }
    
    /// <summary>Liaison Brevets ‚Üî Titulaires exploitation</summary>
    public DbSet<BrevetTitulaire> BrevetTitulaires { get; set; }
    
    /// <summary>Liaison Brevets ‚Üî Cabinets repr√©sentation</summary>
    public DbSet<BrevetCabinet> BrevetCabinets { get; set; }
    
    /// <summary>Liaison Inventeurs ‚Üî Pays r√©sidence</summary>
    public DbSet<InventeurPays> InventeurPays { get; set; }
    
    /// <summary>Liaison D√©posants ‚Üî Pays √©tablissement</summary>
    public DbSet<DeposantPays> DeposantPays { get; set; }
    
    /// <summary>Liaison Titulaires ‚Üî Pays si√®ge</summary>
    public DbSet<TitulairePays> TitulairePays { get; set; }
    
    /// <summary>Liaison Clients ‚Üî Cabinets mandats repr√©sentation</summary>
    public DbSet<ClientCabinet> ClientCabinets { get; set; }

    /// <summary>R√©f√©rentiel num√©ros t√©l√©phoniques internationaux par pays</summary>
    public DbSet<NumeroPays> NumeroPays { get; set; }

    /// <summary>
    /// Configure mod√®le avanc√© avec r√¥les granulaires, relations √©tendues et optimisations.
    /// Applique contraintes m√©tier propri√©t√© intellectuelle et bonnes pratiques performance.
    /// </summary>
    /// <param name="modelBuilder">Builder Entity Framework configuration</param>
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        ConfigureIndexes(modelBuilder);
        ConfigureRelations(modelBuilder);
        ConfigureDefaultValues(modelBuilder);
        ConfigureSeedData(modelBuilder);
    }

    /// <summary>
    /// Configure les index optimis√©s pour requ√™tes fr√©quentes et contraintes unicit√©.
    /// </summary>
    /// <param name="modelBuilder">Builder pour configuration index</param>
    private static void ConfigureIndexes(ModelBuilder modelBuilder)
    {
        // Index recherches entit√©s principales
        modelBuilder.Entity<Client>()
            .HasIndex(c => c.NomClient)
            .HasDatabaseName("IX_Clients_NomClient");

        modelBuilder.Entity<Brevet>()
            .HasIndex(b => b.ReferenceFamille)
            .HasDatabaseName("IX_Brevets_ReferenceFamille");

        // Index authentification uniques
        modelBuilder.Entity<User>()
            .HasIndex(u => u.Email)
            .IsUnique()
            .HasDatabaseName("IX_Users_Email");

        modelBuilder.Entity<User>()
            .HasIndex(u => u.Username)
            .IsUnique()
            .HasDatabaseName("IX_Users_Username");

        modelBuilder.Entity<User>()
            .HasIndex(u => u.ClientId)
            .HasDatabaseName("IX_Users_ClientId");

        // Index relations Many-to-Many uniques
        modelBuilder.Entity<BrevetClient>()
            .HasIndex(bc => new { bc.IdBrevet, bc.IdClient })
            .IsUnique()
            .HasDatabaseName("IX_BrevetClients_Unique");

        modelBuilder.Entity<BrevetInventeur>()
            .HasIndex(bi => new { bi.IdBrevet, bi.IdInventeur })
            .IsUnique()
            .HasDatabaseName("IX_BrevetInventeurs_Unique");

        modelBuilder.Entity<BrevetDeposant>()
            .HasIndex(bd => new { bd.IdBrevet, bd.IdDeposant })
            .IsUnique()
            .HasDatabaseName("IX_BrevetDeposants_Unique");

        modelBuilder.Entity<BrevetTitulaire>()
            .HasIndex(bt => new { bt.IdBrevet, bt.IdTitulaire })
            .IsUnique()
            .HasDatabaseName("IX_BrevetTitulaires_Unique");

        // Index syst√®me r√¥les granulaires
        modelBuilder.Entity<UserRole>()
            .HasIndex(ur => new { ur.UserId, ur.RoleId, ur.ClientId })
            .IsUnique()
            .HasDatabaseName("IX_UserRoles_Unique");

        modelBuilder.Entity<ClientCabinet>()
            .HasIndex(cc => new { cc.ClientId, cc.CabinetId })
            .IsUnique()
            .HasDatabaseName("IX_ClientCabinets_Unique");

        modelBuilder.Entity<Role>()
            .HasIndex(r => r.Name)
            .IsUnique()
            .HasDatabaseName("IX_Roles_Name");
    }

    /// <summary>
    /// Configure les relations entre entit√©s avec contraintes cascade appropri√©es.
    /// </summary>
    /// <param name="modelBuilder">Builder pour configuration relations</param>
    private static void ConfigureRelations(ModelBuilder modelBuilder)
    {
        // Relations brevets avec cascade
        modelBuilder.Entity<InformationDepot>()
            .HasOne(i => i.Brevet)
            .WithMany(b => b.InformationsDepot)
            .HasForeignKey(i => i.IdBrevet)
            .OnDelete(DeleteBehavior.Cascade);

        // Relations contacts avec pr√©servation donn√©es
        modelBuilder.Entity<Contact>()
            .HasOne(c => c.Cabinet)
            .WithMany(cab => cab.Contacts)
            .HasForeignKey(c => c.IdCabinet)
            .OnDelete(DeleteBehavior.SetNull);

        modelBuilder.Entity<Contact>()
            .HasOne(c => c.Client)
            .WithMany(cl => cl.Contacts)
            .HasForeignKey(c => c.IdClient)
            .OnDelete(DeleteBehavior.SetNull);

        // Relations syst√®me r√¥les utilisateurs
        modelBuilder.Entity<User>()
            .HasOne(u => u.Client)
            .WithMany(c => c.Users)
            .HasForeignKey(u => u.ClientId)
            .OnDelete(DeleteBehavior.SetNull);

        modelBuilder.Entity<UserRole>()
            .HasOne(ur => ur.User)
            .WithMany(u => u.UserRoles)
            .HasForeignKey(ur => ur.UserId)
            .OnDelete(DeleteBehavior.Cascade);

        modelBuilder.Entity<UserRole>()
            .HasOne(ur => ur.Role)
            .WithMany(r => r.UserRoles)
            .HasForeignKey(ur => ur.RoleId)
            .OnDelete(DeleteBehavior.Cascade);

        modelBuilder.Entity<UserRole>()
            .HasOne(ur => ur.Client)
            .WithMany()
            .HasForeignKey(ur => ur.ClientId)
            .OnDelete(DeleteBehavior.Cascade);

        // Relations client-cabinet mandats
        modelBuilder.Entity<ClientCabinet>()
            .HasOne(cc => cc.Client)
            .WithMany(c => c.ClientCabinets)
            .HasForeignKey(cc => cc.ClientId)
            .OnDelete(DeleteBehavior.Cascade);

        modelBuilder.Entity<ClientCabinet>()
            .HasOne(cc => cc.Cabinet)
            .WithMany(cab => cab.ClientCabinets)
            .HasForeignKey(cc => cc.CabinetId)
            .OnDelete(DeleteBehavior.Cascade);
    }

    /// <summary>
    /// Configure les valeurs par d√©faut s√©curis√©es pour les entit√©s.
    /// </summary>
    /// <param name="modelBuilder">Builder pour configuration valeurs</param>
    private static void ConfigureDefaultValues(ModelBuilder modelBuilder)
    {
        // Valeurs par d√©faut utilisateurs s√©curis√©es
        modelBuilder.Entity<User>()
            .Property(u => u.Role)
            .HasDefaultValue("user");

        modelBuilder.Entity<User>()
            .Property(u => u.CanWrite)
            .HasDefaultValue(false);

        modelBuilder.Entity<User>()
            .Property(u => u.IsActive)
            .HasDefaultValue(true);

        // Valeurs par d√©faut informations d√©p√¥t
        modelBuilder.Entity<InformationDepot>()
            .Property(i => i.Licence)
            .HasDefaultValue(false);
    }

    /// <summary>
    /// Configure les donn√©es de r√©f√©rence pour syst√®me r√¥les.
    /// </summary>
    /// <param name="modelBuilder">Builder pour configuration seed data</param>
    private static void ConfigureSeedData(ModelBuilder modelBuilder)
    {
        // R√¥les syst√®me avec descriptions m√©tier explicites
        modelBuilder.Entity<Role>().HasData(
            new Role { Id = 1, Name = "admin", Description = "Employ√© StartingBloch - Administrateur avec acc√®s complet et gestion des utilisateurs" },
            new Role { Id = 2, Name = "user", Description = "Employ√© StartingBloch - Utilisateur standard avec droits configurables" },
            new Role { Id = 3, Name = "client", Description = "Client StartingBloch - Acc√®s restreint √† ses propres brevets uniquement" }
        );
    }

    /// <summary>
    /// Override SaveChanges avec gestion automatique timestamps.
    /// Met √† jour CreatedAt/UpdatedAt pour audit trail RGPD.
    /// </summary>
    /// <returns>Nombre d'entit√©s sauvegard√©es</returns>
    public override int SaveChanges()
    {
        UpdateTimestamps();
        return base.SaveChanges();
    }

    /// <summary>
    /// Override SaveChangesAsync avec gestion automatique timestamps.
    /// Version asynchrone pour performance optimale.
    /// </summary>
    /// <param name="cancellationToken">Token annulation op√©ration</param>
    /// <returns>Nombre d'entit√©s sauvegard√©es</returns>
    public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
    {
        UpdateTimestamps();
        return base.SaveChangesAsync(cancellationToken);
    }

    /// <summary>
    /// Met √† jour automatiquement les timestamps sur entit√©s modifi√©es.
    /// Assure tra√ßabilit√© modifications selon exigences RGPD.
    /// </summary>
    private void UpdateTimestamps()
    {
        var entries = ChangeTracker.Entries()
            .Where(e => e.State == EntityState.Added || e.State == EntityState.Modified);

        foreach (var entry in entries)
        {
            // Mise √† jour timestamps Client (extensible autres entit√©s)
            if (entry.Entity is Client client)
            {
                if (entry.State == EntityState.Added)
                    client.CreatedAt = DateTime.UtcNow;
                client.UpdatedAt = DateTime.UtcNow;
            }
            // TODO: Impl√©menter interface ITimestamped pour optimisation
        }
    }
}
