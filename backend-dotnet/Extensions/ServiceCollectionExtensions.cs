/*
 * ================================================================================================
 * EXTENSION DE CONFIGURATION DES SERVICES - ARCHITECTURE 8 COUCHES S√âCURIS√âE
 * ================================================================================================
 * 
 * DESCRIPTION G√âN√âRALE :
 * Ce fichier centralise l'enregistrement de tous les services pour l'architecture de gestion
 * de propri√©t√© intellectuelle avec protection 8 couches et conformit√© r√©glementaire compl√®te.
 * 
 * ARCHITECTURE DES SERVICES - SP√âCIALIS√âE PROPRI√âT√â INTELLECTUELLE :
 * ==================================================================
 * 
 * üóÑÔ∏è COUCHE 1 - BASE DE DONN√âES TRANSACTIONNELLE :
 * - SQLite avec Entity Framework Core pour persistance s√©curis√©e
 * - Gestion transactionnelle des brevets, inventions, droits IP
 * - Relations complexes : Brevets‚ÜîInventeurs‚ÜîClients‚ÜîCabinets
 * - Audit trails pour tra√ßabilit√© l√©gale (exigence contentieux IP)
 * 
 * üîê COUCHE 2 - S√âCURIT√â PRIMAIRE RENFORC√âE :
 * - JWT avec validation stricte multi-crit√®res (issuer, audience, lifetime, signature)
 * - Chiffrement AES secrets industriels et donn√©es confidentielles
 * - Rate Limiting anti-DDoS par IP avec compteurs m√©moire cache
 * - CORS restrictif domaines autoris√©s uniquement (protection XSS)
 * 
 * üè¢ COUCHE 3 - SERVICES M√âTIER SP√âCIALIS√âS IP :
 * - BrevetService : Lifecycle complet brevets (d√©p√¥t‚Üíd√©livrance‚Üímaintenance)
 * - ClientService : Portfolio clients avec droits propri√©t√© et confidentialit√©
 * - InventeurService : Gestion inventeurs, droits moraux, r√©mun√©rations
 * - ContactService : Relations professionnelles PI avec chiffrement donn√©es
 * - CabinetService : Mandataires propri√©t√© industrielle et repr√©sentation
 * - Services R√©f√©rentiels : Pays (WIPO), statuts brevets, num√©rotation internationale
 * 
 * ‚úÖ COUCHE 4 - VALIDATION ANTI-INJECTION :
 * - FluentValidation protection SQL injection et XSS avanc√©es
 * - Validation m√©tier sp√©cifique PI (formats num√©ros brevets, dates priorit√©)
 * - Contr√¥les int√©grit√© donn√©es sensibles (secrets industriels, inventions)
 * - Sanitisation entr√©es utilisateur avec patterns m√©tier IP
 * 
 * üë§ COUCHE 5 - AUTORISATION GRANULAIRE :
 * - Politiques Admin/User pour acc√®s diff√©renci√© par r√¥le
 * - Contr√¥le granulaire op√©rations sensibles (modification brevets, acc√®s secrets)
 * - Protection donn√©es confidentielles clients et inventions strat√©giques
 * - S√©paration droits consultation/modification selon profils utilisateur
 * 
 * üìä COUCHE 6 - AUDIT ET CONFORMIT√â L√âGALE :
 * - Logging complet actions utilisateurs avec Serilog multi-sink
 * - Tra√ßabilit√© obligatoire modifications brevets (conformit√© l√©gale IP)
 * - Audit trails horodat√©s pour contentieux et litiges propri√©t√©
 * - Journalisation s√©curis√©e avec rotation et archivage long terme
 * 
 * ‚ö° COUCHE 7 - CACHE PERFORMANCE OPTIMIS√â :
 * - MemoryCache pour optimisation requ√™tes fr√©quentes brevets
 * - Cache intelligent compteurs rate limiting par IP client
 * - Am√©lioration temps r√©ponse recherches complexes portfolio
 * - Gestion expiration cache selon criticit√© donn√©es
 * 
 * ‚öôÔ∏è COUCHE 8 - CONFIGURATION S√âCURIS√âE CENTRALIS√âE :
 * - Liaison s√©curis√©e configuration appsettings avec validation
 * - Param√®tres JWT cryptographiquement s√©curis√©s (cl√©s, algorithmes)
 * - Configuration CORS et endpoints autoris√©s avec whitelist
 * - Variables environnement chiffr√©es pour secrets production
 * 
 * CONFORMIT√â R√âGLEMENTAIRE ET STANDARDS :
 * ======================================
 * 
 * üá™üá∫ RGPD (R√®glement G√©n√©ral Protection Donn√©es) :
 * - Chiffrement donn√©es personnelles inventeurs et contacts
 * - Droit √† l'oubli avec suppression s√©curis√©e
 * - Consentement explicite traitement donn√©es sensibles
 * - Audit trails pour d√©monstration conformit√©
 * 
 * üåç STANDARDS PROPRI√âT√â INTELLECTUELLE INTERNATIONAUX :
 * - Compatibilit√© WIPO (World Intellectual Property Organization)
 * - Normes EPO (European Patent Office) pour brevets europ√©ens
 * - Int√©gration USPTO pour brevets am√©ricains
 * - Support PCT (Patent Cooperation Treaty) international
 * 
 * üè≠ S√âCURIT√â INDUSTRIELLE ET SECRETS :
 * - Protection renforc√©e secrets industriels et innovations
 * - Chiffrement bout-en-bout documents confidentiels
 * - Contr√¥le acc√®s granulaire selon niveau confidentialit√©
 * - Tra√ßabilit√© consultations documents sensibles
 * 
 * ‚öñÔ∏è AUDIT L√âGAL ET CONTENTIEUX :
 * - Tra√ßabilit√© compl√®te pour support contentieux IP
 * - Horodatage s√©curis√© toutes actions critiques
 * - Conservation logs selon exigences l√©gales nationales
 * - Int√©grit√© donn√©es pour validit√© juridique
 * 
 * CYCLES DE VIE SERVICES (PATTERNS DI) :
 * =====================================
 * - SCOPED : Services m√©tier (1 instance/requ√™te HTTP, coh√©rence transactionnelle)
 * - SINGLETON : Configuration, cache, rate limiting (partage global optimis√©)
 * - TRANSIENT : Validators (nouvelle instance/injection, isolation validation)
 * 
 * RESPONSABILIT√âS FONCTIONNELLES :
 * ===============================
 * - Configuration Entity Framework avec connexions s√©curis√©es
 * - Services m√©tier sp√©cialis√©s gestion propri√©t√© intellectuelle
 * - Services s√©curit√© (JWT, chiffrement, audit, protection)
 * - Middleware protection (Rate limiting anti-DDoS, CORS restrictif)
 * - Validation donn√©es et logging s√©curis√© multi-niveau
 * 
 * PATTERN ARCHITECTURAL :
 * ======================
 * Extension Method pour IServiceCollection ‚Üí √âvite Program.cs surcharg√©
 * S√©paration concerns ‚Üí Chaque section service = responsabilit√© unique
 * Configuration centralis√©e ‚Üí Point unique enregistrement d√©pendances
 * Lisibilit√© maintenabilit√© ‚Üí Documentation inline et structure claire
 * 
 * ================================================================================================
 */

using StartingBloch.Backend.Data;
using StartingBloch.Backend.Services;
using StartingBloch.Backend.Configuration;
using StartingBloch.Backend.Middleware;
using StartingBloch.Backend.Validators;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authorization;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using AspNetCoreRateLimit;
using FluentValidation;
using Serilog;

namespace StartingBloch.Backend.Extensions;

/// <summary>
/// Extension pour centraliser la configuration de tous les services de l'application
/// selon l'architecture 8 couches de s√©curit√© pour la gestion de propri√©t√© intellectuelle.
/// 
/// Cette classe statique organise l'injection de d√©pendances en sections logiques :
/// - Base de donn√©es avec Entity Framework Core et SQLite
/// - Services m√©tier sp√©cialis√©s en propri√©t√© intellectuelle
/// - Services de s√©curit√© (JWT, chiffrement, audit, protection)
/// - Middleware de protection (Rate limiting, CORS)
/// - Validation FluentValidation et logging Serilog
/// 
/// Conformit√© : RGPD, standards WIPO/EPO, s√©curit√© industrielle, audit l√©gal
/// </summary>
public static class ServiceCollectionExtensions
{
    /// <summary>
    /// Configure l'injection de d√©pendances pour l'architecture 8 couches de s√©curit√©.
    /// Enregistre tous les services selon leur cycle de vie optimal et configure
    /// la s√©curit√©, validation et logging pour la gestion de propri√©t√© intellectuelle.
    /// </summary>
    /// <param name="services">Collection de services √† configurer</param>
    /// <param name="configuration">Configuration application depuis appsettings</param>
    /// <returns>Collection configur√©e pour l'injection de d√©pendances</returns>
    /// <exception cref="InvalidOperationException">JWT Secret manquant</exception>
    public static IServiceCollection AddApplicationServices(this IServiceCollection services, IConfiguration configuration)
    {
        // ============================================================================================
        // BASE DE DONN√âES ET CONFIGURATION
        // ============================================================================================
        
        services.AddDbContext<StartingBlochDbContext>(options =>
            options.UseSqlite(configuration.GetConnectionString("DefaultConnection")));

        services.Configure<JwtSettings>(configuration.GetSection("Jwt"));
        services.Configure<SecuritySettings>(configuration.GetSection("Security"));

        // ============================================================================================
        // SWAGGER/OPENAPI DOCUMENTATION
        // ============================================================================================
        
        services.AddEndpointsApiExplorer();
        services.AddSwaggerGen();

        // ============================================================================================
        // SERVICES M√âTIER PROPRI√âT√â INTELLECTUELLE (Scoped)
        // ============================================================================================
        
        // Services principaux
        services.AddScoped<IClientService, ClientService>();
        services.AddScoped<IBrevetService, BrevetService>();
        services.AddScoped<IUserAdminService, UserAdminService>();
        services.AddScoped<ICabinetService, CabinetService>();
        services.AddScoped<IContactService, ContactService>();
        
        // Services r√©f√©rentiels
        services.AddScoped<IPaysService, PaysService>();
        services.AddScoped<IStatutsService, StatutsService>();
        services.AddScoped<ILogService, LogService>();
        
        // Services brevets
        services.AddScoped<IDeposantService, DeposantService>();
        services.AddScoped<IInventeurService, InventeurService>();
        services.AddScoped<ITitulaireService, TitulaireService>();
        services.AddScoped<INumeroPaysService, NumeroPaysService>();
        
        // ============================================================================================
        // SERVICES S√âCURIT√â (Scoped)
        // ============================================================================================
        
    // Acc√®s au contexte HTTP (pour r√©cup√©rer l'utilisateur courant dans le DbContext)
    services.AddHttpContextAccessor();

        services.AddScoped<IJwtService, JwtService>();
        services.AddScoped<IAuthService, AuthService>();
        services.AddScoped<IPasswordValidationService, PasswordValidationService>();
        services.AddScoped<IEncryptionService, EncryptionService>();
        services.AddScoped<IAuditService, AuditService>();
        // ============================================================================================
        // AUTHENTIFICATION JWT S√âCURIS√âE
        // ============================================================================================
        
        var jwtSecret = configuration["Jwt:Secret"];
        if (string.IsNullOrEmpty(jwtSecret))
            throw new InvalidOperationException("JWT Secret is not configured");

        var key = Encoding.ASCII.GetBytes(jwtSecret);
        services.AddAuthentication(x =>
        {
            x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
            x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
        })
        .AddJwtBearer(x =>
        {
            x.RequireHttpsMetadata = false; // Permettre HTTP en d√©veloppement
            x.SaveToken = true;
            x.Events = new JwtBearerEvents
            {
                OnAuthenticationFailed = context =>
                {
                    var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<Program>>();
                    logger.LogWarning("‚ùå JWT Authentication failed: {Error}", context.Exception.Message);
                    return Task.CompletedTask;
                },
                OnTokenValidated = context =>
                {
                    var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<Program>>();
                    logger.LogInformation("‚úÖ JWT Token validated for user: {User}", context.Principal?.Identity?.Name);
                    return Task.CompletedTask;
                },
                OnMessageReceived = context =>
                {
                    var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<Program>>();
                    var token = context.Request.Headers["Authorization"].FirstOrDefault()?.Split(" ").Last();
                    logger.LogInformation("üîê JWT Token received - Length: {Length}", token?.Length ?? 0);
                    return Task.CompletedTask;
                }
            };
            x.TokenValidationParameters = new TokenValidationParameters
            {
                ValidateIssuerSigningKey = true,
                IssuerSigningKey = new SymmetricSecurityKey(key),
                ValidateIssuer = true,
                ValidIssuer = configuration["Jwt:Issuer"],
                ValidateAudience = true,
                ValidAudience = configuration["Jwt:Audience"],
                ValidateLifetime = true,
                ClockSkew = TimeSpan.Zero
            };
        });

        // ============================================================================================
        // PROTECTION ANTI-DDOS (Singleton)
        // ============================================================================================
        
        services.AddMemoryCache();
        services.Configure<IpRateLimitOptions>(configuration.GetSection("RateLimiting"));
        services.AddSingleton<IIpPolicyStore, MemoryCacheIpPolicyStore>();
        services.AddSingleton<IRateLimitCounterStore, MemoryCacheRateLimitCounterStore>();
        services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();
        services.AddSingleton<IProcessingStrategy, AsyncKeyLockProcessingStrategy>();

        // ============================================================================================
        // CORS S√âCURIS√â
        // ============================================================================================
        
        services.AddCors(options =>
        {
            options.AddPolicy("AllowReactApp", builder =>
            {
                var allowedOrigins = configuration.GetSection("Cors:AllowedOrigins").Get<string[]>() 
                    ?? new[] { "http://localhost:3000" };
                builder
                    .WithOrigins(allowedOrigins)
                    .AllowAnyMethod()
                    .AllowAnyHeader()
                    .AllowCredentials()
                    .SetPreflightMaxAge(TimeSpan.FromMinutes(5));
            });
        });

        // ============================================================================================
        // AUTORISATION ET VALIDATION
        // ============================================================================================
        
        services.AddAuthorization(options =>
        {
            options.AddPolicy("AdminOnly", policy => policy.RequireRole("Admin"));
            options.AddPolicy("UserOrAdmin", policy => policy.RequireRole("User", "Admin"));
            
            // Politique pour admin OU propri√©taire de ressource
            options.AddPolicy("AdminOrOwner", policy => policy.Requirements.Add(new AdminOrOwnerRequirement()));
            
            // Politique pour droits d'√©criture granulaires
            options.AddPolicy("WritePermission", policy => policy.Requirements.Add(new WritePermissionRequirement()));
        });

        // Enregistrement des gestionnaires d'autorisation personnalis√©s
        services.AddScoped<IAuthorizationHandler, AdminOrOwnerHandler>();
        services.AddScoped<IAuthorizationHandler, WritePermissionHandler>();

        services.AddValidatorsFromAssemblyContaining<LoginRequestValidator>();

        return services;
    }
}
