/*
 * =====================================    /// <summary>Email utilisateur pour communications et r√©cup√©ration.</summary>
    public string Email { get; set; } = string.Empty;
    
    /// <summary>Pr√©nom utilisateur pour identification personnelle.</summary>
    public string FirstName { get; set; } = string.Empty;
    
    /// <summary>Nom famille utilisateur pour identification personnelle.</summary>
    public string LastName { get; set; } = string.Empty;
    
    /// <summary>R√¥le principal utilisateur (admin/user/client).</summary>
    public string Role { get; set; } = string.Empty;
    
    /// <summary>Permission lecture donn√©es brevets accord√©e.</summary>
    public bool CanRead { get; set; }===================================================
 * DTOs UTILISATEURS - AUTHENTIFICATION ET AUTORISATION SYST√àME
 * ================================================================================================
 * 
 * OBJECTIF M√âTIER :
 * G√®re transfert donn√©es utilisateurs authentification StartingBloch.
 * Support connexion s√©curis√©e, gestion sessions et permissions granulaires.
 * 
 * MOD√àLES AUTHENTIFICATION :
 * =========================
 * üë§ USER COMPLET ‚Üí UserDto avec r√¥les et relations client
 * üîê LOGIN ‚Üí LoginDto credentials + r√©ponse JWT token  
 * ‚ûï CR√âATION ‚Üí CreateUserDto avec validations s√©curit√©
 * ‚úèÔ∏è MODIFICATION ‚Üí UpdateUserDto champs optionnels
 * üîë CHANGEMENT ‚Üí ChangePasswordDto s√©curit√© renforc√©e
 * 
 * ARCHITECTURE S√âCURIT√â :
 * ======================
 * ‚úÖ JWT Tokens avec expiration
 * ‚úÖ Mots de passe hash√©s BCrypt
 * ‚úÖ R√¥les granulaires (admin/user/client)
 * ‚úÖ Permissions contextuelles par client
 * ‚úÖ Audit trail connexions
 * 
 * ================================================================================================
 */

using System.ComponentModel.DataAnnotations;

namespace StartingBloch.Backend.DTOs;

/// <summary>
/// DTO utilisateur complet avec r√¥les et permissions pour gestion session.
/// Profil authentifi√© avec contexte m√©tier et autorisations granulaires.
/// </summary>
public class UserDto
{
    /// <summary>Identifiant unique utilisateur syst√®me.</summary>
    public int Id { get; set; }
    
    /// <summary>Nom utilisateur unique pour authentification.</summary>
    public string Username { get; set; } = string.Empty;
    
    /// <summary>Email utilisateur pour communications et r√©cup√©ration.</summary>
    public string Email { get; set; } = string.Empty;
    
    /// <summary>Pr√©nom utilisateur pour identification personnelle.</summary>
    public string FirstName { get; set; } = string.Empty;
    
    /// <summary>Nom famille utilisateur pour identification personnelle.</summary>
    public string LastName { get; set; } = string.Empty;
    
    /// <summary>R√¥le principal utilisateur (admin/user/client).</summary>
    public string Role { get; set; } = string.Empty;
    
    /// <summary>Permission lecture donn√©es brevets accord√©e.</summary>
    public bool CanRead { get; set; }
    
    /// <summary>Permission modification donn√©es brevets accord√©e.</summary>
    public bool CanWrite { get; set; }
    
    /// <summary>Statut activation compte utilisateur.</summary>
    public bool IsActive { get; set; }
    
    /// <summary>Statut blocage compte utilisateur pour s√©curit√©.</summary>
    public bool IsBlocked { get; set; }
    
    /// <summary>Mot de passe hash√© utilisateur (sensible - usage interne).</summary>
    public string Password { get; set; } = string.Empty;
    
    /// <summary>Derni√®re connexion UTC pour audit activit√©.</summary>
    public DateTime? LastLogin { get; set; }
    
    /// <summary>Date cr√©ation UTC compte pour audit trail.</summary>
    public DateTime CreatedAt { get; set; }
    
    /// <summary>Client associ√© si r√¥le contextuel (optionnel).</summary>
    public int? ClientId { get; set; }
    
    /// <summary>Entit√© client compl√®te (chargement optionnel).</summary>
    public ClientDto? Client { get; set; }
    
    /// <summary>Liste r√¥les granulaires utilisateur (syst√®me avanc√©).</summary>
    public List<UserRoleDto> UserRoles { get; set; } = new();
}

/// <summary>
/// DTO r√©ponse connexion avec token JWT et informations session.
/// Donn√©es s√©curis√©es post-authentification pour client.
/// </summary>
public class LoginResponseDto
{
    /// <summary>Token JWT sign√© pour autorisation API.</summary>
    public string Token { get; set; } = string.Empty;
    
    /// <summary>Profil utilisateur authentifi√© pour session.</summary>
    public UserDto User { get; set; } = new();
    
    /// <summary>Date expiration UTC token pour renouvellement.</summary>
    public DateTime ExpiresAt { get; set; }
}

/// <summary>
/// DTO cr√©ation nouvel utilisateur avec validations s√©curit√© strictes.
/// Enregistrement compte avec permissions conservatrices par d√©faut.
/// </summary>
public class CreateUserDto
{
    /// <summary>Nom utilisateur OBLIGATOIRE unique syst√®me.</summary>
    [Required(ErrorMessage = "Le nom d'utilisateur est obligatoire")]
    [StringLength(100, ErrorMessage = "Le nom d'utilisateur ne peut pas d√©passer 100 caract√®res")]
    public string Username { get; set; } = string.Empty;

    /// <summary>Email OBLIGATOIRE avec validation format strict.</summary>
    [Required(ErrorMessage = "L'email est obligatoire")]
    [EmailAddress(ErrorMessage = "L'email n'est pas valide")]
    [StringLength(100, ErrorMessage = "L'email ne peut pas d√©passer 100 caract√®res")]
    public string Email { get; set; } = string.Empty;
    
    /// <summary>Pr√©nom OBLIGATOIRE pour identification personnelle.</summary>
    [Required(ErrorMessage = "Le pr√©nom est obligatoire")]
    [StringLength(50, ErrorMessage = "Le pr√©nom ne peut pas d√©passer 50 caract√®res")]
    public string FirstName { get; set; } = string.Empty;
    
    /// <summary>Nom famille OBLIGATOIRE pour identification personnelle.</summary>
    [Required(ErrorMessage = "Le nom est obligatoire")]
    [StringLength(50, ErrorMessage = "Le nom ne peut pas d√©passer 50 caract√®res")]
    public string LastName { get; set; } = string.Empty;

    /// <summary>Mot de passe OBLIGATOIRE minimum 6 caract√®res s√©curit√©.</summary>
    [Required(ErrorMessage = "Le mot de passe est obligatoire")]
    [StringLength(100, MinimumLength = 6, ErrorMessage = "Le mot de passe doit faire entre 6 et 100 caract√®res")]
    public string Password { get; set; } = string.Empty;

    /// <summary>R√¥le par d√©faut "user" - principe moindre privil√®ge.</summary>
    [StringLength(50, ErrorMessage = "Le r√¥le ne peut pas d√©passer 50 caract√®res")]
    public string Role { get; set; } = "user";
    
    /// <summary>Permission lecture par d√©faut true - acc√®s consultation.</summary>
    public bool CanRead { get; set; } = true;

    /// <summary>Permission √©criture par d√©faut false - s√©curit√© maximale.</summary>
    public bool CanWrite { get; set; } = false;
    
    /// <summary>Statut activation par d√©faut true - compte imm√©diatement utilisable.</summary>
    public bool IsActive { get; set; } = true;
    
    /// <summary>Client associ√© optionnel pour r√¥les contextuels.</summary>
    public int? ClientId { get; set; }
}

/// <summary>
/// DTO modification utilisateur existant avec champs optionnels.
/// Permet √©volution profil et permissions sans impact global.
/// </summary>
public class UpdateUserDto
{
    /// <summary>Nom utilisateur modifiable avec validation longueur.</summary>
    [StringLength(100, ErrorMessage = "Le nom d'utilisateur ne peut pas d√©passer 100 caract√®res")]
    public string? Username { get; set; }

    /// <summary>Email modifiable avec validation format maintenue.</summary>
    [EmailAddress(ErrorMessage = "L'email n'est pas valide")]
    [StringLength(100, ErrorMessage = "L'email ne peut pas d√©passer 100 caract√®res")]
    public string? Email { get; set; }

    /// <summary>R√¥le modifiable pour √©volution responsabilit√©s.</summary>
    [StringLength(50, ErrorMessage = "Le r√¥le ne peut pas d√©passer 50 caract√®res")]
    public string? Role { get; set; }

    /// <summary>Permission √©criture modifiable gestion droits granulaire.</summary>
    public bool? CanWrite { get; set; }
    
    /// <summary>Statut activation modifiable pour gestion compte.</summary>
    public bool? IsActive { get; set; }
    
    /// <summary>Client associ√© modifiable pour r√©assignation contexte.</summary>
    public int? ClientId { get; set; }
}

/// <summary>
/// DTO changement mot de passe avec validation ancien pour s√©curit√©.
/// Proc√©dure s√©curis√©e modification credentials avec double v√©rification.
/// </summary>
public class ChangePasswordDto
{
    /// <summary>Ancien mot de passe OBLIGATOIRE pour authentification.</summary>
    [Required(ErrorMessage = "L'ancien mot de passe est obligatoire")]
    public string OldPassword { get; set; } = string.Empty;

    /// <summary>Nouveau mot de passe OBLIGATOIRE minimum 6 caract√®res.</summary>
    [Required(ErrorMessage = "Le nouveau mot de passe est obligatoire")]
    [StringLength(100, MinimumLength = 6, ErrorMessage = "Le nouveau mot de passe doit faire entre 6 et 100 caract√®res")]
    public string NewPassword { get; set; } = string.Empty;
}
