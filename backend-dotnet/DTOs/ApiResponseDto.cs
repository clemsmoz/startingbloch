/*
 * ================================================================================================
 * DTOs R√âPONSES API STANDARDIS√âES - COMMUNICATION CLIENT-SERVEUR
 * ================================================================================================
 * 
 * OBJECTIF M√âTIER :
 * Uniformise toutes les r√©ponses HTTP de l'API StartingBloch pour coh√©rence interface.
 * Facilite int√©gration client et gestion erreurs dans contexte propri√©t√© intellectuelle.
 * 
 * MOD√àLES COMMUNICATION :
 * ======================
 * 
 * üìã R√âPONSE STANDARD ‚Üí Success/Message/Data/Errors/Timestamp
 * üìÑ R√âPONSE PAGIN√âE ‚Üí H√©rite standard + pagination metadata
 * üìÅ IMPORT EXCEL ‚Üí Upload fichiers brevets clients
 * 
 * STANDARDS CONFORMIT√â :
 * =====================
 * ‚úÖ REST API Best Practices
 * ‚úÖ HTTP Status Codes coh√©rents
 * ‚úÖ Timestamps UTC audit trail RGPD
 * ‚úÖ Pagination optimis√©e grandes collections
 * ‚úÖ Gestion erreurs structur√©e
 * 
 * S√âCURIT√â INT√âGR√âE :
 * ==================
 * ‚úÖ Validation types g√©n√©riques
 * ‚úÖ Propri√©t√©s nullable contr√¥l√©es
 * ‚úÖ Timestamps immuables audit
 * ‚úÖ Upload fichiers valid√©s
 * 
 * ================================================================================================
 */

namespace StartingBloch.Backend.DTOs;

/// <summary>
/// R√©ponse API standardis√©e g√©n√©rique pour toutes les communications HTTP.
/// Garantit coh√©rence interface et facilite gestion erreurs c√¥t√© client.
/// Template uniforme success/erreur avec audit timestamp automatique.
/// </summary>
/// <typeparam name="T">Type de donn√©es m√©tier retourn√©es (Brevet, Client, etc.)</typeparam>
public class ApiResponse<T>
{
    /// <summary>
    /// Indique si l'op√©ration s'est d√©roul√©e avec succ√®s.
    /// D√©termine c√¥t√© client si traitement donn√©es ou affichage erreur.
    /// </summary>
    public bool Success { get; set; } = true;
    
    /// <summary>
    /// Message explicatif pour utilisateur final ou d√©veloppeur.
    /// Descriptions m√©tier claires pour contexte propri√©t√© intellectuelle.
    /// </summary>
    public string? Message { get; set; }
    
    /// <summary>
    /// Donn√©es m√©tier retourn√©es en cas de succ√®s.
    /// Peut √™tre entit√© unique, collection ou objet complexe.
    /// </summary>
    public T? Data { get; set; }
    
    /// <summary>
    /// D√©tails erreurs structur√©es en cas d'√©chec validation ou traitement.
    /// Facilite debugging et affichage messages utilisateur pertinents.
    /// </summary>
    public object? Errors { get; set; }
    
    /// <summary>
    /// Horodatage UTC pr√©cis de g√©n√©ration r√©ponse pour audit trail RGPD.
    /// Permet tra√ßabilit√© compl√®te interactions API.
    /// </summary>
    public DateTime Timestamp { get; set; } = DateTime.UtcNow;
}

/// <summary>
/// R√©ponse API pagin√©e pour collections importantes (brevets, clients, contacts).
/// Optimise performance en limitant transfert donn√©es et am√©liore UX.
/// H√©rite r√©ponse standard + m√©tadonn√©es pagination navigable.
/// </summary>
/// <typeparam name="T">Type collection pagin√©e (List&lt;BrevetDto&gt;, etc.)</typeparam>
public class PagedResponse<T> : ApiResponse<T>
{
    /// <summary>
    /// Num√©ro page actuelle (base 1 pour compatibilit√© UX).
    /// Permet navigation s√©quentielle dans collections importantes.
    /// </summary>
    public int Page { get; set; }
    
    /// <summary>
    /// Nombre √©l√©ments par page configur√© c√¥t√© serveur.
    /// Optimise balance performance/utilisabilit√© selon contexte.
    /// </summary>
    public int PageSize { get; set; }
    
    /// <summary>
    /// Nombre total √©l√©ments dans collection compl√®te.
    /// Essentiel calcul pages totales et affichage compteurs.
    /// </summary>
    public int TotalCount { get; set; }
    
    /// <summary>
    /// Nombre total pages calcul√© (TotalCount / PageSize).
    /// Facilite g√©n√©ration interface pagination c√¥t√© client.
    /// </summary>
    public int TotalPages { get; set; }
    
    /// <summary>
    /// Indique existence page suivante pour navigation.
    /// Optimise affichage boutons interface utilisateur.
    /// </summary>
    public bool HasNextPage { get; set; }
    
    /// <summary>
    /// Indique existence page pr√©c√©dente pour navigation.
    /// Optimise affichage boutons interface utilisateur.
    /// </summary>
    public bool HasPreviousPage { get; set; }
}

/// <summary>
/// DTO pour upload fichiers Excel contenant donn√©es brevets clients.
/// S√©curise import bulk avec validation pr√©alable format et permissions.
/// Associe fichier au client propri√©taire pour isolation donn√©es.
/// </summary>
public class ImportExcelDto
{
    /// <summary>
    /// Fichier Excel upload√© contenant donn√©es brevets √† importer.
    /// Validation format, taille et type MIME c√¥t√© contr√¥leur pour s√©curit√©.
    /// </summary>
    public IFormFile ExcelFile { get; set; } = null!;
    
    /// <summary>
    /// Identifiant client propri√©taire des brevets √† importer.
    /// Assure isolation donn√©es et permissions appropri√©es.
    /// </summary>
    public int ClientId { get; set; }
}
