/*
 * ================================================================================================
 * DTOs NUM√âROS PAYS - CODES IDENTIFIANTS JURIDICTIONS
 * ================================================================================================
 * 
 * OBJECTIF M√âTIER :
 * G√®re transfert donn√©es codes num√©riques pays pour identification juridictions.
 * Support syst√®mes num√©rotation internationaux propri√©t√© intellectuelle.
 * 
 * STANDARDS INTERNATIONAUX :
 * =========================
 * üåç ISO CODES ‚Üí Codes pays standardis√©s internationaux
 * üìã WIPO CODES ‚Üí Num√©rotation OMPI propri√©t√© intellectuelle  
 * üèõÔ∏è EPO CODES ‚Üí Codes Office Europ√©en Brevets
 * üî¢ CUSTOM ‚Üí Num√©rotation interne syst√®me StartingBloch
 * 
 * RELATIONS G√âOGRAPHIQUES :
 * ========================
 * ‚úÖ Association unique pays-num√©ro
 * ‚úÖ Codes multiples par pays possible
 * ‚úÖ Validation existence pays r√©f√©rence
 * ‚úÖ Audit trail cr√©ation codes
 * 
 * ================================================================================================
 */

using System.ComponentModel.DataAnnotations;

namespace StartingBloch.Backend.DTOs;

/// <summary>
/// DTO num√©ro pays complet avec informations g√©ographiques associ√©es.
/// Code identifiant juridiction avec contexte pays pour navigation.
/// Inclut d√©nomination pays pour affichage interface utilisateur.
/// </summary>
public class NumeroPaysDto
{
    /// <summary>Identifiant unique num√©ro pays syst√®me StartingBloch.</summary>
    public int Id { get; set; }
    
    /// <summary>Code num√©rique pays selon standard international utilis√©.</summary>
    public string Numero { get; set; } = string.Empty;
    
    /// <summary>Code alphab√©tique pays pour r√©f√©rence crois√©e.</summary>
    public string PaysCode { get; set; } = string.Empty;
    
    /// <summary>Identifiant pays r√©f√©rence pour relation g√©ographique.</summary>
    public int PaysId { get; set; }
    
    /// <summary>Nom pays complet pour affichage interface (optionnel).</summary>
    public string? PaysNom { get; set; }
    
    /// <summary>Date cr√©ation UTC code pour audit trail.</summary>
    public DateTime CreatedAt { get; set; }
}

/// <summary>
/// DTO cr√©ation nouveau num√©ro pays avec validations standards.
/// Association code num√©rique √† pays existant avec validation.
/// </summary>
public class CreateNumeroPaysDto
{
    /// <summary>Code num√©rique OBLIGATOIRE selon standard international.</summary>
    [Required(ErrorMessage = "Le num√©ro est requis")]
    [StringLength(50, ErrorMessage = "Le num√©ro ne peut pas d√©passer 50 caract√®res")]
    public string Numero { get; set; } = string.Empty;

    /// <summary>Pays r√©f√©rence OBLIGATOIRE pour association g√©ographique.</summary>
    [Required(ErrorMessage = "L'ID du pays est requis")]
    public int PaysId { get; set; }
}

/// <summary>
/// DTO modification num√©ro pays avec contraintes validation maintenues.
/// </summary>
public class UpdateNumeroPaysDto
{
    /// <summary>Code num√©rique OBLIGATOIRE maintenu en modification.</summary>
    [Required(ErrorMessage = "Le num√©ro est requis")]
    [StringLength(50, ErrorMessage = "Le num√©ro ne peut pas d√©passer 50 caract√®res")]
    public string Numero { get; set; } = string.Empty;

    /// <summary>Pays r√©f√©rence OBLIGATOIRE maintenu pour coh√©rence.</summary>
    [Required(ErrorMessage = "L'ID du pays est requis")]
    public int PaysId { get; set; }
}
