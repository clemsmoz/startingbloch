/*
 * ================================================================================================
 * DTOs BREVETS - TRANSFERT DONN√âES PROPRI√âT√â INTELLECTUELLE
 * ================================================================================================
 * 
 * OBJECTIF M√âTIER :
 * G√®re transfert s√©curis√© donn√©es brevets entre API et clients (frontend/mobile/tiers).
 * Centrale communication pour gestion compl√®te portefeuilles propri√©t√© intellectuelle.
 * 
 * MOD√àLES OP√âRATIONNELS :
 * ======================
 * 
 * üìã LECTURE COMPL√àTE ‚Üí BrevetDto avec toutes relations charg√©es
 * ‚ûï CR√âATION NOUVELLE ‚Üí CreateBrevetDto avec validations strictes
 * ‚úèÔ∏è MODIFICATION ‚Üí UpdateBrevetDto avec champs optionnels
 * üîó LIAISON CABINET ‚Üí CabinetLinkDto avec r√¥les sp√©cialis√©s
 * 
 * VALIDATIONS INT√âGR√âES :
 * ======================
 * ‚úÖ Contraintes longueur champs critiques
 * ‚úÖ Titre obligatoire (essence brevet)
 * ‚úÖ Relations Many-to-Many s√©curis√©es
 * ‚úÖ Timestamps audit automatiques
 * ‚úÖ Messages erreurs contextualis√©s
 * 
 * ARCHITECTURE RELATIONS :
 * =======================
 * ‚úÖ Clients propri√©taires (Many-to-Many)
 * ‚úÖ Inventeurs cr√©ateurs (Many-to-Many) 
 * ‚úÖ D√©posants l√©gaux (Many-to-Many)
 * ‚úÖ Titulaires droits (Many-to-Many)
 * ‚úÖ Cabinets mandataires (Many-to-Many + r√¥les)
 * ‚úÖ Informations d√©p√¥t (One-to-Many)
 * 
 * ================================================================================================
 */

using System.ComponentModel.DataAnnotations;

namespace StartingBloch.Backend.DTOs;

/// <summary>
/// DTO complet brevet avec toutes relations pour affichage/consultation.
/// Mod√®le central gestion propri√©t√© intellectuelle avec audit trail int√©gr√©.
/// Inclut tous acteurs et informations d√©p√¥t pour vision 360¬∞ du brevet.
/// </summary>
public class BrevetDto
{
    /// <summary>
    /// Identifiant unique du brevet dans syst√®me StartingBloch.
    /// Cl√© primaire pour toutes op√©rations CRUD et relations.
    /// </summary>
    public int Id { get; set; }
    
    /// <summary>
    /// R√©f√©rence famille de brevets pour regroupement logique international.
    /// Permet suivi coordonn√© d√©p√¥ts multiples pays/juridictions.
    /// </summary>
    public string? ReferenceFamille { get; set; }
    
    /// <summary>
    /// Titre descriptif du brevet (invention/innovation prot√©g√©e).
    /// √âl√©ment central identification et recherche dans portefeuilles.
    /// </summary>
    public string? Titre { get; set; }
    
    /// <summary>
    /// Commentaires libres pour contexte m√©tier ou notes strat√©giques.
    /// Facilite collaboration √©quipes et historique d√©cisions.
    /// </summary>
    public string? Commentaire { get; set; }
    
    /// <summary>
    /// Date cr√©ation UTC pour audit trail et tra√ßabilit√© RGPD.
    /// Timestamp immutable premi√®re saisie dans syst√®me.
    /// </summary>
    public DateTime? CreatedAt { get; set; }
    
    /// <summary>
    /// Date derni√®re modification UTC pour audit trail et tra√ßabilit√© RGPD.
    /// Timestamp mise √† jour automatique √† chaque modification.
    /// </summary>
    public DateTime? UpdatedAt { get; set; }

    /// <summary>
    /// Statut principal du brevet (extrait automatiquement des informations de d√©p√¥t).
    /// Statut le plus r√©cent ou prioritaire pour affichage dans les listes.
    /// </summary>
    public string? StatutBrevet { get; set; }

    // === RELATIONS ACTEURS PROPRI√âT√â INTELLECTUELLE ===
    
    /// <summary>
    /// Clients propri√©taires du brevet (relation Many-to-Many).
    /// D√©finit droits acc√®s et responsabilit√©s commerciales.
    /// </summary>
    public List<ClientDto> Clients { get; set; } = new();
    
    /// <summary>
    /// Inventeurs cr√©ateurs techniques (relation Many-to-Many).
    /// Reconnaissance paternit√© invention et droits moraux.
    /// </summary>
    public List<InventeurDto> Inventeurs { get; set; } = new();
    
    /// <summary>
    /// D√©posants l√©gaux responsables proc√©dures (relation Many-to-Many).
    /// Entit√©s habilit√©es effectuer formalit√©s administratives.
    /// </summary>
    public List<DeposantDto> Deposants { get; set; } = new();
    
    /// <summary>
    /// Titulaires droits exploitation (relation Many-to-Many).
    /// Propri√©taires l√©gaux droits patrimoniaux du brevet.
    /// </summary>
    public List<TitulaireDto> Titulaires { get; set; } = new();
    
    /// <summary>
    /// Cabinets mandataires sp√©cialis√©s (relation Many-to-Many + r√¥les).
    /// Professionnels propri√©t√© intellectuelle avec missions sp√©cifiques.
    /// </summary>
    public List<CabinetDto> Cabinets { get; set; } = new();
    
    /// <summary>
    /// Informations d√©p√¥t multiples juridictions (relation One-to-Many).
    /// D√©tails proc√©duraux par pays/office pour suivi complet.
    /// </summary>
    public List<InformationDepotDto> InformationsDepot { get; set; } = new();
}

/// <summary>
/// DTO liaison cabinet avec r√¥le sp√©cialis√© dans gestion brevet.
/// D√©finit mission pr√©cise et type intervention du cabinet mandataire.
/// </summary>
public class CabinetLinkDto
{
    /// <summary>
    /// Identifiant cabinet mandataire assign√© au brevet.
    /// R√©f√©rence entit√© Cabinet pour chargement complet donn√©es.
    /// </summary>
    public int CabinetId { get; set; }
    
    /// <summary>
    /// R√¥le sp√©cifique du cabinet (ex: "conseil", "mandataire", "correspondant").
    /// D√©finit nature mission et responsabilit√©s dans gestion brevet.
    /// </summary>
    public string? Role { get; set; }
    
    /// <summary>
    /// Type intervention cabinet (ex: "d√©p√¥t", "opposition", "renouvellement").
    /// Pr√©cise domaine expertise mobilis√© pour ce brevet.
    /// </summary>
    public string? Type { get; set; }
}

/// <summary>
/// DTO cr√©ation nouveau brevet avec validations strictes champs obligatoires.
/// Assure int√©grit√© donn√©es d√®s saisie initiale et relations coh√©rentes.
/// Toutes validations appliqu√©es c√¥t√© serveur pour s√©curit√© maximale.
/// </summary>
public class CreateBrevetDto
{
    /// <summary>
    /// R√©f√©rence famille brevets avec validation longueur pour coh√©rence base.
    /// Optionnel pour brevets isol√©s, requis pour familles internationales.
    /// </summary>
    [StringLength(255, ErrorMessage = "La r√©f√©rence famille ne peut pas d√©passer 255 caract√®res")]
    public string? ReferenceFamille { get; set; }

    /// <summary>
    /// Titre du brevet OBLIGATOIRE - essence identification invention.
    /// Validation stricte longueur pour compatibilit√© syst√®mes juridiques.
    /// </summary>
    [StringLength(500, ErrorMessage = "Le titre ne peut pas d√©passer 500 caract√®res")]
    public string Titre { get; set; } = string.Empty;

    /// <summary>
    /// Commentaires libres pour contexte strat√©gique ou notes collaboration.
    /// Champ optionnel sans limitation stricte longueur.
    /// </summary>
    public string? Commentaire { get; set; }

    // === RELATIONS PAR IDENTIFIANTS (CR√âATION OPTIMIS√âE) ===
    
    /// <summary>
    /// Liste identifiants clients propri√©taires √† associer.
    /// Validation existence c√¥t√© contr√¥leur avant persistance.
    /// </summary>
    public List<int> ClientIds { get; set; } = new();
    
    /// <summary>
    /// Liste identifiants inventeurs cr√©ateurs √† associer.
    /// Reconnaissance paternit√© technique de l'invention.
    /// </summary>
    public List<int> InventeurIds { get; set; } = new();
    
    /// <summary>
    /// Liste identifiants d√©posants l√©gaux √† associer.
    /// Entit√©s responsables formalit√©s administratives.
    /// </summary>
    public List<int> DeposantIds { get; set; } = new();
    
    /// <summary>
    /// Liste identifiants titulaires droits √† associer.
    /// Propri√©taires patrimoniaux exploitation commerciale.
    /// </summary>
    public List<int> TitulaireIds { get; set; } = new();
    
    /// <summary>
    /// Liste cabinets avec r√¥les sp√©cialis√©s √† associer.
    /// Mandataires professionnels avec missions d√©finies.
    /// </summary>
    public List<CabinetLinkDto> Cabinets { get; set; } = new();
    
    /// <summary>
    /// Liste informations d√©p√¥t initiales par juridiction.
    /// Cr√©ation simultan√©e brevet et premiers d√©p√¥ts.
    /// </summary>
    public List<CreateInformationDepotDto> InformationsDepot { get; set; } = new();

    /// <summary>
    /// Liaisons pays par inventeur (optionnel). Permet de d√©finir les pays associ√©s √† chaque inventeur.
    /// Si renseign√©, les relations InventeurPays seront compl√©t√©es sans cr√©er de doublons.
    /// </summary>
    public List<InventeurPaysLinkInputDto>? InventeursPays { get; set; }

    /// <summary>
    /// Liaisons pays par d√©posant (optionnel). Permet de d√©finir les pays associ√©s √† chaque d√©posant.
    /// </summary>
    public List<DeposantPaysLinkInputDto>? DeposantsPays { get; set; }

    /// <summary>
    /// Liaisons pays par titulaire (optionnel). Permet de d√©finir les pays associ√©s √† chaque titulaire.
    /// </summary>
    public List<TitulairePaysLinkInputDto>? TitulairesPays { get; set; }
}

/// <summary>
/// DTO d'entr√©e pour lier des pays √† un inventeur donn√©.
/// </summary>
public class InventeurPaysLinkInputDto
{
    /// <summary>Identifiant de l'inventeur concern√©.</summary>
    public int InventeurId { get; set; }

    /// <summary>Liste des identifiants de pays √† lier.</summary>
    public List<int> PaysIds { get; set; } = new();
}

/// <summary>
/// DTO d'entr√©e pour lier des pays √† un d√©posant donn√©.
/// </summary>
public class DeposantPaysLinkInputDto
{
    /// <summary>Identifiant du d√©posant concern√©.</summary>
    public int DeposantId { get; set; }

    /// <summary>Liste des identifiants de pays √† lier.</summary>
    public List<int> PaysIds { get; set; } = new();
}

/// <summary>
/// DTO d'entr√©e pour lier des pays √† un titulaire donn√©.
/// </summary>
public class TitulairePaysLinkInputDto
{
    /// <summary>Identifiant du titulaire concern√©.</summary>
    public int TitulaireId { get; set; }

    /// <summary>Liste des identifiants de pays √† lier.</summary>
    public List<int> PaysIds { get; set; } = new();
}

/// <summary>
/// DTO modification brevet existant avec champs optionnels pour flexibilit√©.
/// Permet mise √† jour partielle sans affecter donn√©es non modifi√©es.
/// Validations all√©g√©es pour √©dition progressive et corrections.
/// </summary>
public class UpdateBrevetDto
{
    /// <summary>
    /// R√©f√©rence famille brevets modifiable avec validation longueur.
    /// Null = pas de modification, valeur = remplacement complet.
    /// </summary>
    [StringLength(255, ErrorMessage = "La r√©f√©rence famille ne peut pas d√©passer 255 caract√®res")]
    public string? ReferenceFamille { get; set; }

    /// <summary>
    /// Titre brevet modifiable avec validation longueur all√©g√©e.
    /// Optionnel en modification pour √©dition progressive.
    /// </summary>
    [StringLength(500, ErrorMessage = "Le titre ne peut pas d√©passer 500 caract√®res")]
    public string? Titre { get; set; }

    /// <summary>
    /// Commentaires modifiables sans contrainte stricte.
    /// Facilite annotations et mises √† jour contextuelles.
    /// </summary>
    public string? Commentaire { get; set; }

    // === RELATIONS OPTIONNELLES (MISE √Ä JOUR S√âLECTIVE) ===
    
    /// <summary>
    /// Liste clients propri√©taires √† remplacer (optionnel).
    /// Null = conservation existant, Liste = remplacement complet.
    /// </summary>
    public List<int>? ClientIds { get; set; }
    
    /// <summary>
    /// Liste inventeurs √† remplacer (optionnel).
    /// Modification paternit√© technique si √©volution √©quipe.
    /// </summary>
    public List<int>? InventeurIds { get; set; }
    
    /// <summary>
    /// Liste d√©posants √† remplacer (optionnel).
    /// Changement entit√©s responsables formalit√©s.
    /// </summary>
    public List<int>? DeposantIds { get; set; }
    
    /// <summary>
    /// Liste titulaires √† remplacer (optionnel).
    /// √âvolution propri√©t√© patrimoniale du brevet.
    /// </summary>
    public List<int>? TitulaireIds { get; set; }
    
    /// <summary>
    /// Liste cabinets avec r√¥les √† remplacer (optionnel).
    /// Changement mandataires ou √©volution missions.
    /// </summary>
    public List<CabinetLinkDto>? Cabinets { get; set; }
    
    /// <summary>
    /// Liste informations d√©p√¥t √† remplacer (optionnel).
    /// Mise √† jour statuts juridictions ou nouveaux d√©p√¥ts.
    /// </summary>
    public List<CreateInformationDepotDto>? InformationsDepot { get; set; }

    /// <summary>
    /// Liaisons pays par inventeur lors d'une mise √† jour (optionnel).
    /// Null = ne rien faire, Liste = remplacer les pays pour chaque inventeur fourni.
    /// </summary>
    public List<InventeurPaysLinkInputDto>? InventeursPays { get; set; }

    /// <summary>
    /// Liaisons pays par d√©posant lors d'une mise √† jour (optionnel).
    /// </summary>
    public List<DeposantPaysLinkInputDto>? DeposantsPays { get; set; }

    /// <summary>
    /// Liaisons pays par titulaire lors d'une mise √† jour (optionnel).
    /// </summary>
    public List<TitulairePaysLinkInputDto>? TitulairesPays { get; set; }
}
