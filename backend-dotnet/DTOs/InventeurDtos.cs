/*
 * ================================================================================================
 * DTOs INVENTEURS - CR√âATEURS TECHNIQUES INNOVATIONS
 * ================================================================================================
 * 
 * OBJECTIF M√âTIER :
 * G√®re transfert donn√©es inventeurs cr√©ateurs techniques des innovations brevet√©es.
 * Reconnaissance paternit√© intellectuelle et droits moraux sur inventions.
 * 
 * DROITS CR√âATEURS :
 * =================
 * üë®‚Äçüî¨ INVENTEUR ‚Üí Personne physique cr√©atrice technique innovation
 * üåç MULTI-PAYS ‚Üí Nationalit√©s multiples selon mobilit√© internationale
 * üìß CONTACT ‚Üí Communication directe pour notifications et droits
 * ‚öñÔ∏è PATERNIT√â ‚Üí Droits moraux inali√©nables sur cr√©ation
 * 
 * VALIDATIONS CR√âATEURS :
 * ======================
 * ‚úÖ Nom obligatoire (identification cr√©ateur)
 * ‚úÖ Email valid√© (communications droits)
 * ‚úÖ Relations pays nationalit√©s
 * ‚úÖ Coh√©rence donn√©es personnelles
 * 
 * ================================================================================================
 */

using System.ComponentModel.DataAnnotations;

namespace StartingBloch.Backend.DTOs;

/// <summary>
/// DTO inventeur complet avec pays nationalit√©s pour reconnaissance cr√©ateur.
/// Personne physique cr√©atrice technique avec droits moraux sur invention.
/// Inclut relations g√©ographiques pour contexte international cr√©ation.
/// </summary>
public class InventeurDto
{
    /// <summary>Identifiant unique inventeur syst√®me StartingBloch.</summary>
    public int Id { get; set; }
    
    /// <summary>Nom inventeur OBLIGATOIRE - identification cr√©ateur technique.</summary>
    public string Nom { get; set; } = string.Empty;
    
    /// <summary>Pr√©nom inventeur optionnel pour personnalisation reconnaissance.</summary>
    public string? Prenom { get; set; }
    
    /// <summary>Email inventeur optionnel pour communications droits moraux.</summary>
    public string? Email { get; set; }
    
    /// <summary>Liste pays nationalit√©s inventeur pour contexte international.</summary>
    public List<PaysDto> Pays { get; set; } = new();
}

/// <summary>
/// DTO cr√©ation nouvel inventeur avec validations identification strictes.
/// Assure reconnaissance appropri√©e cr√©ateur et qualit√© donn√©es paternit√©.
/// </summary>
public class CreateInventeurDto
{
    /// <summary>Nom inventeur OBLIGATOIRE - cr√©ateur technique innovation.</summary>
    [Required(ErrorMessage = "Le nom est requis")]
    [StringLength(100, ErrorMessage = "Le nom ne peut pas d√©passer 100 caract√®res")]
    public string Nom { get; set; } = string.Empty;

    /// <summary>Pr√©nom inventeur optionnel pour identification compl√®te.</summary>
    [StringLength(100, ErrorMessage = "Le pr√©nom ne peut pas d√©passer 100 caract√®res")]
    public string? Prenom { get; set; }

    /// <summary>Email inventeur optionnel avec validation format.</summary>
    [EmailAddress(ErrorMessage = "Format d'email invalide")]
    [StringLength(255, ErrorMessage = "L'email ne peut pas d√©passer 255 caract√®res")]
    public string? Email { get; set; }
}

/// <summary>
/// DTO modification inventeur existant pr√©servant droits reconnaissance.
/// Maintient contraintes identification pour continuit√© paternit√©.
/// </summary>
public class UpdateInventeurDto
{
    /// <summary>Nom inventeur OBLIGATOIRE maintenu pour reconnaissance continue.</summary>
    [Required(ErrorMessage = "Le nom est requis")]
    [StringLength(100, ErrorMessage = "Le nom ne peut pas d√©passer 100 caract√®res")]
    public string Nom { get; set; } = string.Empty;

    /// <summary>Pr√©nom inventeur modifiable pour corrections identification.</summary>
    [StringLength(100, ErrorMessage = "Le pr√©nom ne peut pas d√©passer 100 caract√®res")]
    public string? Prenom { get; set; }

    /// <summary>Email inventeur modifiable avec validation format maintenue.</summary>
    [EmailAddress(ErrorMessage = "Format d'email invalide")]
    [StringLength(255, ErrorMessage = "L'email ne peut pas d√©passer 255 caract√®res")]
    public string? Email { get; set; }
}
