/*
 * ================================================================================================
 * INTERFACE SERVICE TOKEN - CONTRAT GESTION TOKENS JWT
 * ================================================================================================
 * 
 * OBJECTIF M√âTIER :
 * Interface contrat service tokens StartingBloch d√©finissant gestion JWT s√©curis√©s.
 * Sp√©cification m√©thodes g√©n√©ration, validation et r√©vocation tokens authentification.
 * 
 * FONCTIONNALIT√âS CONTRACTUELLES :
 * ================================
 * üîê G√âN√âRATION ‚Üí Cr√©ation tokens JWT avec claims utilisateur
 * ‚úÖ VALIDATION ‚Üí V√©rification validit√© et int√©grit√© tokens
 * ‚ùå R√âVOCATION ‚Üí Invalidation tokens compromis/expir√©s
 * üîÑ REFRESH ‚Üí Renouvellement tokens avant expiration
 * üìä INTROSPECTION ‚Üí Analyse contenu et m√©tadonn√©es tokens
 * 
 * CONFORMIT√â S√âCURIT√â :
 * ====================
 * ‚úÖ JWT RFC 7519 ‚Üí Standard tokens JSON Web
 * ‚úÖ OWASP ‚Üí S√©curit√© tokens selon recommandations
 * ‚úÖ OIDC ‚Üí OpenID Connect compliance
 * ‚úÖ OAuth 2.0 ‚Üí Authorization framework standard
 * 
 * ================================================================================================
 */

using StartingBloch.Backend.DTOs;
using System.Security.Claims;

namespace StartingBloch.Backend.Services;

/// <summary>
/// Interface service gestion tokens JWT avec s√©curit√© renforc√©e.
/// Contrat g√©n√©ration, validation et r√©vocation tokens authentification.
/// </summary>
public interface ITokenService
{
    /// <summary>
    /// G√©n√®re token JWT d'acc√®s pour utilisateur authentifi√©.
    /// Cr√©ation s√©curis√©e token avec claims utilisateur et m√©tadonn√©es.
    /// </summary>
    /// <param name="user">Utilisateur pour g√©n√©ration token avec claims</param>
    /// <returns>Token JWT sign√© avec dur√©e de vie configur√©e</returns>
    string GenerateAccessToken(UserDto user);
    
    /// <summary>
    /// G√©n√®re token de rafra√Æchissement pour renouvellement s√©curis√©.
    /// Cr√©ation token longue dur√©e pour renouvellement acc√®s.
    /// </summary>
    /// <returns>Token refresh pour renouvellement s√©curis√©</returns>
    string GenerateRefreshToken();
    
    /// <summary>
    /// Valide token JWT et extrait claims utilisateur.
    /// V√©rification signature, expiration et int√©grit√© token.
    /// </summary>
    /// <param name="token">Token JWT √† valider et analyser</param>
    /// <returns>Claims principal si valide, null sinon</returns>
    ClaimsPrincipal? ValidateToken(string token);
    
    /// <summary>
    /// R√©voque token JWT pour invalidation imm√©diate.
    /// Ajout token √† liste noire pour s√©curit√©.
    /// </summary>
    /// <param name="token">Token JWT √† r√©voquer d√©finitivement</param>
    /// <returns>T√¢che asynchrone r√©vocation token</returns>
    Task RevokeTokenAsync(string token);
    
    /// <summary>
    /// V√©rifie si token JWT est r√©voqu√© ou blacklist√©.
    /// Contr√¥le liste noire tokens invalid√©s.
    /// </summary>
    /// <param name="token">Token JWT √† v√©rifier statut</param>
    /// <returns>Statut bool√©en r√©vocation token</returns>
    Task<bool> IsTokenRevokedAsync(string token);
}
