/*
 * ================================================================================================
 * SERVICE CHIFFREMENT - PROTECTION DONN√âES SENSIBLES PROPRI√âT√â INTELLECTUELLE
 * ================================================================================================
 * 
 * OBJECTIF M√âTIER :
 * Service chiffrement s√©curis√© complet protection donn√©es sensibles StartingBloch.
 * Impl√©mentation AES-256 pour confidentialit√© absolue informations propri√©t√© intellectuelle.
 * 
 * FONCTIONNALIT√âS CHIFFREMENT :
 * =============================
 * üîê CHIFFREMENT ‚Üí AES-256 sym√©trique donn√©es textuelles
 * üîì D√âCHIFFREMENT ‚Üí R√©cup√©ration s√©curis√©e donn√©es originales
 * üßÇ HACHAGE ‚Üí SHA-256 avec salt pour donn√©es non-r√©versibles
 * üîë GESTION CL√âS ‚Üí Configuration centralis√©e cl√©s chiffrement
 * 
 * DONN√âES PROT√âG√âES :
 * ==================
 * üìß EMAILS ‚Üí Adresses emails personnelles/professionnelles
 * üìû T√âL√âPHONES ‚Üí Num√©ros t√©l√©phone contacts sensibles
 * üìÑ DOCUMENTS ‚Üí Contenus brevets et descriptions techniques
 * üÜî IDENTIFIANTS ‚Üí R√©f√©rences internes et externes
 * üíæ AUDIT ‚Üí Journaux tra√ßabilit√© chiffr√©s
 * 
 * STANDARDS CRYPTOGRAPHIQUES :
 * ===========================
 * ‚úÖ AES-256-CBC ‚Üí Algorithme chiffrement sym√©trique approuv√© NSA
 * ‚úÖ SHA-256 ‚Üí Fonction hachage cryptographique s√©curis√©e
 * ‚úÖ IV AL√âATOIRE ‚Üí Vector initialisation unique par chiffrement
 * ‚úÖ SALT INT√âGR√â ‚Üí Protection contre attaques rainbow tables
 * ‚úÖ BASE64 ‚Üí Encodage s√ªr pour stockage/transmission
 * 
 * CONFORMIT√â S√âCURIT√â :
 * ====================
 * ‚úÖ RGPD ‚Üí Protection donn√©es personnelles par chiffrement
 * ‚úÖ ISO 27001 ‚Üí Standards s√©curit√© information internationale
 * ‚úÖ ANSSI ‚Üí Recommandations cybers√©curit√© fran√ßaises
 * ‚úÖ NIST ‚Üí Guidelines cryptographie gouvernement US
 * ‚úÖ OMPI ‚Üí Protection secrets industriels propri√©t√© intellectuelle
 * 
 * GESTION CL√âS S√âCURIS√âE :
 * =======================
 * ‚úÖ Configuration centralis√©e avec variables environnement
 * ‚úÖ Cl√© minimale 32 caract√®res pour s√©curit√© optimale
 * ‚úÖ Rotation possible cl√©s sans perte donn√©es
 * ‚úÖ Isolation production/d√©veloppement garantie
 * 
 * ================================================================================================
 */

using System.Security.Cryptography;
using System.Text;

namespace StartingBloch.Backend.Services;

/// <summary>
/// Interface service chiffrement donn√©es sensibles propri√©t√© intellectuelle.
/// Contrat s√©curis√© chiffrement/d√©chiffrement/hachage conforme standards.
/// </summary>
public interface IEncryptionService
{
    /// <summary>
    /// Chiffre texte clair avec AES-256-CBC et IV al√©atoire.
    /// G√©n√©ration automatique vector initialisation unique par op√©ration.
    /// </summary>
    /// <param name="plainText">Texte clair √† chiffrer</param>
    /// <returns>Texte chiffr√© encod√© Base64 avec IV int√©gr√©</returns>
    Task<string> EncryptAsync(string plainText);
    
    /// <summary>
    /// D√©chiffre texte chiffr√© vers format original lisible.
    /// Extraction automatique IV int√©gr√© pour d√©chiffrement.
    /// </summary>
    /// <param name="encryptedText">Texte chiffr√© Base64 avec IV</param>
    /// <returns>Texte clair original d√©chiffr√©</returns>
    Task<string> DecryptAsync(string encryptedText);
    
    /// <summary>
    /// G√©n√®re empreinte SHA-256 avec salt pour donn√©es non-r√©versibles.
    /// Protection optimale contre attaques par dictionnaire.
    /// </summary>
    /// <param name="data">Donn√©es √† hacher de mani√®re irr√©versible</param>
    /// <returns>Empreinte SHA-256 avec salt encod√©e Base64</returns>
    Task<string> HashSensitiveDataAsync(string data);
}

/// <summary>
/// Service chiffrement professionnel protection donn√©es sensibles propri√©t√© intellectuelle.
/// Impl√©mentation AES-256-CBC avec gestion s√©curis√©e cl√©s et conformit√© RGPD.
/// </summary>
public class EncryptionService : IEncryptionService
{
    private readonly IConfiguration _configuration;
    private readonly ILogger<EncryptionService> _logger;
    private readonly byte[] _key;

    /// <summary>
    /// Initialise service chiffrement avec configuration s√©curis√©e cl√©s.
    /// R√©cup√©ration cl√© depuis configuration ou variables environnement.
    /// </summary>
    /// <param name="configuration">Configuration application avec param√®tres s√©curit√©</param>
    /// <param name="logger">Logger pour audit op√©rations cryptographiques</param>
    public EncryptionService(IConfiguration configuration, ILogger<EncryptionService> logger)
    {
        _configuration = configuration;
        _logger = logger;
        
        // R√©cup√©rer la cl√© de chiffrement depuis la configuration
        var keyString = _configuration["Security:EncryptionKey"] ?? 
                       Environment.GetEnvironmentVariable("ENCRYPTION_KEY") ??
                       "DEFAULT_KEY_CHANGE_IN_PRODUCTION_32_CHARS_MINIMUM!";
        
        _key = Encoding.UTF8.GetBytes(keyString.PadRight(32).Substring(0, 32));
    }

    /// <summary>
    /// Chiffre texte clair avec AES-256-CBC et g√©n√©ration IV al√©atoire unique.
    /// Protection maximale donn√©es sensibles avec standard cryptographique approuv√©.
    /// </summary>
    /// <param name="plainText">Texte clair √† prot√©ger par chiffrement</param>
    /// <returns>Texte chiffr√© Base64 avec IV int√©gr√© pour d√©chiffrement</returns>
    public async Task<string> EncryptAsync(string plainText)
    {
        if (string.IsNullOrEmpty(plainText))
            return string.Empty;

        try
        {
            using var aes = Aes.Create();
            aes.Key = _key;
            aes.GenerateIV();

            using var encryptor = aes.CreateEncryptor(aes.Key, aes.IV);
            using var msEncrypt = new MemoryStream();
            using var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write);
            using var swEncrypt = new StreamWriter(csEncrypt);

            await swEncrypt.WriteAsync(plainText);
            swEncrypt.Close();

            var iv = aes.IV;
            var encryptedContent = msEncrypt.ToArray();
            var result = new byte[iv.Length + encryptedContent.Length];
            
            Buffer.BlockCopy(iv, 0, result, 0, iv.Length);
            Buffer.BlockCopy(encryptedContent, 0, result, iv.Length, encryptedContent.Length);

            return Convert.ToBase64String(result);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error encrypting data");
            throw new InvalidOperationException("Encryption failed", ex);
        }
    }

    /// <summary>
    /// D√©chiffre texte chiffr√© vers format original avec extraction IV automatique.
    /// R√©cup√©ration s√©curis√©e donn√©es prot√©g√©es selon standard AES-256-CBC.
    /// </summary>
    /// <param name="encryptedText">Texte chiffr√© Base64 avec IV int√©gr√©</param>
    /// <returns>Texte clair original r√©cup√©r√© apr√®s d√©chiffrement</returns>
    public async Task<string> DecryptAsync(string encryptedText)
    {
        if (string.IsNullOrEmpty(encryptedText))
            return string.Empty;

        try
        {
            var fullCipher = Convert.FromBase64String(encryptedText);
            var iv = new byte[16];
            var cipher = new byte[fullCipher.Length - 16];

            Buffer.BlockCopy(fullCipher, 0, iv, 0, iv.Length);
            Buffer.BlockCopy(fullCipher, iv.Length, cipher, 0, cipher.Length);

            using var aes = Aes.Create();
            aes.Key = _key;
            aes.IV = iv;

            using var decryptor = aes.CreateDecryptor(aes.Key, aes.IV);
            using var msDecrypt = new MemoryStream(cipher);
            using var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);
            using var srDecrypt = new StreamReader(csDecrypt);

            return await srDecrypt.ReadToEndAsync();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error decrypting data");
            throw new InvalidOperationException("Decryption failed", ex);
        }
    }

    /// <summary>
    /// G√©n√®re empreinte cryptographique SHA-256 avec salt int√©gr√© s√©curis√©.
    /// Hachage irr√©versible optimal pour protection donn√©es sensibles permanente.
    /// </summary>
    /// <param name="data">Donn√©es √† transformer en empreinte non-r√©versible</param>
    /// <returns>Empreinte SHA-256 avec salt encod√©e Base64 s√©curis√©e</returns>
    public async Task<string> HashSensitiveDataAsync(string data)
    {
        if (string.IsNullOrEmpty(data))
            return string.Empty;

        try
        {
            using var sha256 = SHA256.Create();
            var saltedData = data + Convert.ToBase64String(_key);
            var hashedBytes = await Task.Run(() => sha256.ComputeHash(Encoding.UTF8.GetBytes(saltedData)));
            return Convert.ToBase64String(hashedBytes);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error hashing sensitive data");
            throw new InvalidOperationException("Hashing failed", ex);
        }
    }
}
