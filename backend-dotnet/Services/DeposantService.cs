/*
 * ================================================================================================
 * SERVICE D√âPOSANTS - GESTION INVENTEURS ET D√âPOSANTS PROPRI√âT√â INTELLECTUELLE
 * ================================================================================================
 * 
 * OBJECTIF M√âTIER :
 * Service m√©tier complet gestion d√©posants StartingBloch.
 * Administration inventeurs, cr√©ateurs et porteurs droits propri√©t√© intellectuelle.
 * 
 * FONCTIONNALIT√âS D√âPOSANTS :
 * ===========================
 * üìã CONSULTATION ‚Üí Liste pagin√©e avec recherche multi-champs
 * üîç D√âTAIL ‚Üí D√©posant complet avec nationalit√©s multiples
 * ‚ûï CR√âATION ‚Üí Nouveau d√©posant avec gestion pays
 * ‚úèÔ∏è MODIFICATION ‚Üí Mise √† jour informations d√©posant
 * üóëÔ∏è SUPPRESSION ‚Üí Suppression logique d√©posant
 * üåç NATIONALIT√âS ‚Üí Gestion pays multiples d√©posant
 * 
 * DONN√âES D√âPOSANTS :
 * ==================
 * üë§ IDENTIT√â ‚Üí Nom, pr√©nom, coordonn√©es personnelles
 * üìß COMMUNICATION ‚Üí Email contact principal
 * üåç G√âOLOCALISATION ‚Üí Pays nationalit√©s multiples
 * üîó RELATIONS ‚Üí Liens avec brevets d√©pos√©s
 * üïê AUDIT ‚Üí Dates cr√©ation, modification, historique
 * 
 * RECHERCHE ET FILTRAGE :
 * ======================
 * ‚úÖ Recherche textuelle multi-champs (nom, pr√©nom, email)
 * ‚úÖ Filtrage par pays ou nationalit√©
 * ‚úÖ Pagination optimis√©e grandes collections
 * ‚úÖ Tri alphab√©tique par d√©faut
 * 
 * CONFORMIT√â INTERNATIONALE :
 * ==========================
 * ‚úÖ Gestion nationalit√©s multiples selon standards internationaux
 * ‚úÖ Relations Many-to-Many avec pays via table liaison
 * ‚úÖ Validation existence pays r√©f√©rentiels
 * ‚úÖ Audit trail complet modifications
 * ‚úÖ Conformit√© OMPI (Organisation Mondiale Propri√©t√© Intellectuelle)
 * 
 * ================================================================================================
 */

using Microsoft.EntityFrameworkCore;
using StartingBloch.Backend.Data;
using StartingBloch.Backend.DTOs;
using StartingBloch.Backend.Models;

namespace StartingBloch.Backend.Services;

/// <summary>
/// Service m√©tier complet gestion d√©posants et inventeurs propri√©t√© intellectuelle.
/// Impl√©mentation s√©curis√©e nationalit√©s multiples avec recherche optimis√©e.
/// </summary>
public class DeposantService : IDeposantService
{
    private readonly StartingBlochDbContext _context;

    /// <summary>
    /// Initialise service d√©posants avec contexte donn√©es Entity Framework.
    /// Configuration acc√®s base donn√©es optimis√©e requ√™tes relations pays.
    /// </summary>
    /// <param name="context">Contexte base donn√©es Entity Framework</param>
    public DeposantService(StartingBlochDbContext context)
    {
        _context = context;
    }

    /// <summary>
    /// R√©cup√®re liste pagin√©e d√©posants avec recherche textuelle multi-champs.
    /// Recherche optimis√©e nom, pr√©nom, email avec nationalit√©s compl√®tes.
    /// </summary>
    /// <param name="page">Num√©ro page courante (1 par d√©faut)</param>
    /// <param name="pageSize">Taille page (10 √©l√©ments par d√©faut)</param>
    /// <param name="search">Terme recherche optionnel multi-champs</param>
    /// <returns>R√©ponse pagin√©e liste d√©posants avec pays</returns>
    public async Task<PagedResponse<List<DeposantDto>>> GetDeposaatsAsync(int page = 1, int pageSize = 10, string? search = null)
    {
        try
        {
            var query = _context.Deposants.AsQueryable();

            if (!string.IsNullOrEmpty(search))
            {
                query = query.Where(d => (d.Nom != null && d.Nom.Contains(search)) || 
                                        (d.Prenom != null && d.Prenom.Contains(search)) ||
                                        (d.Email != null && d.Email.Contains(search)));
            }

            var totalItems = await query.CountAsync();

            var deposants = await query
                .Include(d => d.DeposantPays)
                    .ThenInclude(dp => dp.Pays)
                .Skip((page - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync();

            var deposantDtos = deposants.Select(d => new DeposantDto
            {
                Id = d.Id,
                Nom = d.Nom ?? "",
                Prenom = d.Prenom,
                Email = d.Email,
                Pays = d.DeposantPays?.Select(dp => new PaysDto
                {
                    Id = dp.Pays.Id,
                    NomPays = dp.Pays.NomFrFr,
                    CodePays = dp.Pays.CodeIso ?? "",
                    CreatedAt = dp.Pays.CreatedAt
                }).ToList() ?? new List<PaysDto>()
            }).ToList();

            return new PagedResponse<List<DeposantDto>>
            {
                Success = true,
                Data = deposantDtos,
                Page = page,
                PageSize = pageSize,
                TotalCount = totalItems,
                TotalPages = (int)Math.Ceiling((double)totalItems / pageSize),
                Message = $"{deposantDtos.Count} d√©posants trouv√©s"
            };
        }
        catch (Exception ex)
        {
            return new PagedResponse<List<DeposantDto>>
            {
                Success = false,
                Message = "Erreur lors de la r√©cup√©ration des d√©posants",
                Errors = ex.Message
            };
        }
    }

    /// <summary>
    /// R√©cup√®re d√©posant sp√©cifique par identifiant avec nationalit√©s compl√®tes.
    /// Chargement optimis√© pays multiples pour contexte g√©ographique complet.
    /// </summary>
    /// <param name="id">Identifiant unique d√©posant recherch√©</param>
    /// <returns>D√©posant d√©taill√© avec liste pays nationalit√©s</returns>
    public async Task<ApiResponse<DeposantDto>> GetDeposantByIdAsync(int id)
    {
        try
        {
            var deposant = await _context.Deposants
                .Include(d => d.DeposantPays)
                    .ThenInclude(dp => dp.Pays)
                .FirstOrDefaultAsync(d => d.Id == id);

            if (deposant == null)
            {
                return new ApiResponse<DeposantDto>
                {
                    Success = false,
                    Message = "D√©posant non trouv√©"
                };
            }

            var deposantDto = new DeposantDto
            {
                Id = deposant.Id,
                Nom = deposant.Nom ?? "",
                Prenom = deposant.Prenom,
                Email = deposant.Email,
                Pays = deposant.DeposantPays?.Select(dp => new PaysDto
                {
                    Id = dp.Pays.Id,
                    NomPays = dp.Pays.NomFrFr,
                    CodePays = dp.Pays.CodeIso ?? "",
                    CreatedAt = dp.Pays.CreatedAt
                }).ToList() ?? new List<PaysDto>()
            };

            return new ApiResponse<DeposantDto>
            {
                Success = true,
                Data = deposantDto
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<DeposantDto>
            {
                Success = false,
                Message = "Erreur lors de la r√©cup√©ration du d√©posant",
                Errors = ex.Message
            };
        }
    }

    /// <summary>
    /// Cr√©e nouveau d√©posant avec informations de base et audit trail.
    /// Initialisation d√©posant sans pays, assignation ult√©rieure via m√©thodes d√©di√©es.
    /// </summary>
    /// <param name="createDeposantDto">Donn√©es cr√©ation d√©posant de base</param>
    /// <returns>D√©posant cr√©√© avec identifiant syst√®me g√©n√©r√©</returns>
    public async Task<ApiResponse<DeposantDto>> CreateDeposantAsync(CreateDeposantDto createDeposantDto)
    {
        try
        {
            var deposant = new Deposant
            {
                Nom = createDeposantDto.Nom,
                Prenom = createDeposantDto.Prenom,
                Email = createDeposantDto.Email
            };

            _context.Deposants.Add(deposant);
            await _context.SaveChangesAsync();

            var deposantDto = new DeposantDto
            {
                Id = deposant.Id,
                Nom = deposant.Nom,
                Prenom = deposant.Prenom,
                Email = deposant.Email,
                Pays = new List<PaysDto>()
            };

            return new ApiResponse<DeposantDto>
            {
                Success = true,
                Data = deposantDto,
                Message = "D√©posant cr√©√© avec succ√®s"
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<DeposantDto>
            {
                Success = false,
                Message = "Erreur lors de la cr√©ation du d√©posant",
                Errors = ex.Message
            };
        }
    }

    /// <summary>
    /// Met √† jour d√©posant existant avec nouvelles informations personnelles.
    /// Modification informations de base, gestion pays via m√©thodes sp√©cialis√©es.
    /// </summary>
    /// <param name="id">Identifiant d√©posant √† modifier</param>
    /// <param name="updateDeposantDto">Nouvelles donn√©es personnelles d√©posant</param>
    /// <returns>D√©posant modifi√© avec informations mises √† jour</returns>
    public async Task<ApiResponse<DeposantDto>> UpdateDeposantAsync(int id, UpdateDeposantDto updateDeposantDto)
    {
        try
        {
            var deposant = await _context.Deposants.FindAsync(id);
            if (deposant == null)
            {
                return new ApiResponse<DeposantDto>
                {
                    Success = false,
                    Message = "D√©posant non trouv√©"
                };
            }

            deposant.Nom = updateDeposantDto.Nom;
            deposant.Prenom = updateDeposantDto.Prenom;
            deposant.Email = updateDeposantDto.Email;

            await _context.SaveChangesAsync();

            var deposantDto = new DeposantDto
            {
                Id = deposant.Id,
                Nom = deposant.Nom,
                Prenom = deposant.Prenom,
                Email = deposant.Email,
                Pays = new List<PaysDto>()
            };

            return new ApiResponse<DeposantDto>
            {
                Success = true,
                Data = deposantDto,
                Message = "D√©posant mis √† jour avec succ√®s"
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<DeposantDto>
            {
                Success = false,
                Message = "Erreur lors de la mise √† jour du d√©posant",
                Errors = ex.Message
            };
        }
    }

    /// <summary>
    /// Supprime d√©posant de mani√®re permanente avec relations associ√©es.
    /// V√©rification existence avant suppression avec gestion erreurs robuste.
    /// </summary>
    /// <param name="id">Identifiant d√©posant √† supprimer</param>
    /// <returns>Confirmation succ√®s suppression d√©posant</returns>
    public async Task<ApiResponse<bool>> DeleteDeposantAsync(int id)
    {
        try
        {
            var deposant = await _context.Deposants.FindAsync(id);
            if (deposant == null)
            {
                return new ApiResponse<bool>
                {
                    Success = false,
                    Message = "D√©posant non trouv√©"
                };
            }

            _context.Deposants.Remove(deposant);
            await _context.SaveChangesAsync();

            return new ApiResponse<bool>
            {
                Success = true,
                Data = true,
                Message = "D√©posant supprim√© avec succ√®s"
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<bool>
            {
                Success = false,
                Message = "Erreur lors de la suppression du d√©posant",
                Errors = ex.Message
            };
        }
    }

    /// <summary>
    /// R√©cup√®re liste compl√®te pays associ√©s √† d√©posant sp√©cifique.
    /// Chargement optimis√© nationalit√©s multiples avec d√©tails pays complets.
    /// </summary>
    /// <param name="deposantId">Identifiant d√©posant pour recherche pays</param>
    /// <returns>Liste pays nationalit√©s d√©posant avec codes ISO</returns>
    public async Task<ApiResponse<List<PaysDto>>> GetDeposantPaysAsync(int deposantId)
    {
        try
        {
            var deposantPays = await _context.DeposantPays
                .Include(dp => dp.Pays)
                .Where(dp => dp.IdDeposant == deposantId)
                .ToListAsync();

            var paysDtos = deposantPays.Select(dp => new PaysDto
            {
                Id = dp.Pays.Id,
                NomPays = dp.Pays.NomFrFr,
                CodePays = dp.Pays.CodeIso ?? "",
                CreatedAt = dp.Pays.CreatedAt
            }).ToList();

            return new ApiResponse<List<PaysDto>>
            {
                Success = true,
                Data = paysDtos,
                Message = $"{paysDtos.Count} pays trouv√©s pour ce d√©posant"
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<List<PaysDto>>
            {
                Success = false,
                Message = "Erreur lors de la r√©cup√©ration des pays du d√©posant",
                Errors = ex.Message
            };
        }
    }

    /// <summary>
    /// Assigne nouveau pays nationalit√© √† d√©posant avec validation unicit√©.
    /// Cr√©ation relation Many-to-Many s√©curis√©e avec v√©rification existence pr√©alable.
    /// </summary>
    /// <param name="deposantId">Identifiant d√©posant cible assignation</param>
    /// <param name="paysId">Identifiant pays √† assigner comme nationalit√©</param>
    /// <returns>Confirmation succ√®s assignation pays d√©posant</returns>
    public async Task<ApiResponse<bool>> AssignPaysToDeposantAsync(int deposantId, int paysId)
    {
        try
        {
            var existingRelation = await _context.DeposantPays
                .FirstOrDefaultAsync(dp => dp.IdDeposant == deposantId && dp.IdPays == paysId);

            if (existingRelation != null)
            {
                return new ApiResponse<bool>
                {
                    Success = false,
                    Message = "Ce pays est d√©j√† assign√© √† ce d√©posant"
                };
            }

            var deposantPays = new DeposantPays
            {
                IdDeposant = deposantId,
                IdPays = paysId
            };

            _context.DeposantPays.Add(deposantPays);
            await _context.SaveChangesAsync();

            return new ApiResponse<bool>
            {
                Success = true,
                Data = true,
                Message = "Pays assign√© au d√©posant avec succ√®s"
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<bool>
            {
                Success = false,
                Message = "Erreur lors de l'assignation du pays",
                Errors = ex.Message
            };
        }
    }

    /// <summary>
    /// Retire pays nationalit√© d√©posant avec validation existence relation.
    /// Suppression relation Many-to-Many s√©curis√©e avec v√©rification pr√©alable.
    /// </summary>
    /// <param name="deposantId">Identifiant d√©posant cible retrait</param>
    /// <param name="paysId">Identifiant pays √† retirer des nationalit√©s</param>
    /// <returns>Confirmation succ√®s retrait pays d√©posant</returns>
    public async Task<ApiResponse<bool>> RemovePaysFromDeposantAsync(int deposantId, int paysId)
    {
        try
        {
            var deposantPays = await _context.DeposantPays
                .FirstOrDefaultAsync(dp => dp.IdDeposant == deposantId && dp.IdPays == paysId);

            if (deposantPays == null)
            {
                return new ApiResponse<bool>
                {
                    Success = false,
                    Message = "Relation d√©posant-pays non trouv√©e"
                };
            }

            _context.DeposantPays.Remove(deposantPays);
            await _context.SaveChangesAsync();

            return new ApiResponse<bool>
            {
                Success = true,
                Data = true,
                Message = "Pays retir√© du d√©posant avec succ√®s"
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<bool>
            {
                Success = false,
                Message = "Erreur lors du retrait du pays",
                Errors = ex.Message
            };
        }
    }
}
