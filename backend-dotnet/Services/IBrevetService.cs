/*
 * ================================================================================================
 * INTERFACE SERVICE BREVETS - CONTRAT GESTION PROPRI√âT√â INTELLECTUELLE
 * ================================================================================================
 * 
 * OBJECTIF M√âTIER :
 * Interface contrat service brevets StartingBloch d√©finissant op√©rations CRUD compl√®tes.
 * Sp√©cification m√©thodes gestion portfolio propri√©t√© intellectuelle avec s√©curit√© utilisateur.
 * 
 * FONCTIONNALIT√âS CONTRACTUELLES :
 * ================================
 * üìã CONSULTATION ‚Üí R√©cup√©ration brevets avec pagination et filtrage utilisateur
 * üîç D√âTAIL ‚Üí Acc√®s brevet sp√©cifique avec v√©rification permissions
 * ‚ûï CR√âATION ‚Üí Nouveau brevet avec validation donn√©es compl√®tes
 * ‚úèÔ∏è MODIFICATION ‚Üí Mise √† jour brevet existant avec audit trail
 * üóëÔ∏è SUPPRESSION ‚Üí Suppression logique/physique selon politiques
 * üîç RECHERCHE ‚Üí Recherche textuelle avanc√©e multi-crit√®res
 * üìä IMPORT ‚Üí Import Excel brevets avec validation massive
 * 
 * S√âCURIT√â ET PERMISSIONS :
 * ========================
 * üîê ISOLATION ‚Üí Acc√®s brevets limit√© selon utilisateur connect√©
 * üõ°Ô∏è V√âRIFICATION ‚Üí Contr√¥le permissions avant toute op√©ration
 * üë• MULTI-TENANT ‚Üí Support utilisateurs multiples avec isolation donn√©es
 * üîí AUDIT ‚Üí Tra√ßabilit√© compl√®te acc√®s et modifications
 * 
 * RECHERCHE ET FILTRAGE :
 * ======================
 * ‚úÖ Pagination optimis√©e pour grandes collections
 * ‚úÖ Filtrage automatique selon droits utilisateur
 * ‚úÖ Recherche textuelle dans champs multiples
 * ‚úÖ Filtrage par client/cabinet sp√©cifique
 * ‚úÖ Import/Export Excel pour gestion massive
 * 
 * CONFORMIT√â ARCHITECTURALE :
 * ==========================
 * ‚úÖ Pattern Repository avec abstraction compl√®te
 * ‚úÖ Injection d√©pendances via interface
 * ‚úÖ S√©paration responsabilit√©s m√©tier/donn√©es
 * ‚úÖ Testabilit√© maximale via contrats
 * ‚úÖ √âvolutivit√© garantie par d√©couplage
 * 
 * ================================================================================================
 */

using StartingBloch.Backend.DTOs;
using StartingBloch.Backend.Models;

namespace StartingBloch.Backend.Services;

/// <summary>
/// Interface service m√©tier gestion brevets et propri√©t√© intellectuelle.
/// Contrat complet op√©rations CRUD avec s√©curit√© utilisateur et recherche avanc√©e.
/// </summary>
public interface IBrevetService
{
    /// <summary>
    /// R√©cup√®re liste pagin√©e brevets avec filtrage s√©curis√© par utilisateur.
    /// Isolation automatique donn√©es selon permissions utilisateur connect√©.
    /// </summary>
    /// <param name="page">Num√©ro page pour pagination (1 par d√©faut)</param>
    /// <param name="pageSize">Taille page pour limitation r√©sultats (10 par d√©faut)</param>
    /// <param name="currentUserId">Identifiant utilisateur pour filtrage s√©curis√©</param>
    /// <returns>R√©ponse pagin√©e brevets autoris√©s avec m√©tadonn√©es</returns>
    Task<PagedResponse<List<BrevetDto>>> GetBrevetsAsync(int page = 1, int pageSize = 10, int? currentUserId = null);
    
    /// <summary>
    /// R√©cup√®re brevet sp√©cifique avec v√©rification permissions utilisateur.
    /// Contr√¥le acc√®s automatique avant retour donn√©es sensibles.
    /// </summary>
    /// <param name="id">Identifiant unique brevet recherch√©</param>
    /// <param name="currentUserId">Identifiant utilisateur pour v√©rification droits</param>
    /// <returns>Brevet d√©taill√© si autoris√© ou erreur permissions</returns>
    Task<ApiResponse<BrevetDto>> GetBrevetByIdAsync(int id, int? currentUserId = null);
    
    /// <summary>
    /// Cr√©e nouveau brevet avec validation compl√®te donn√©es et relations.
    /// Assignation automatique propri√©taire et g√©n√©ration audit trail.
    /// </summary>
    /// <param name="createBrevetDto">Donn√©es cr√©ation brevet avec relations</param>
    /// <returns>Brevet cr√©√© avec identifiant syst√®me et m√©tadonn√©es</returns>
    Task<ApiResponse<BrevetDto>> CreateBrevetAsync(CreateBrevetDto createBrevetDto);
    
    /// <summary>
    /// Met √† jour brevet existant avec validation permissions et int√©grit√©.
    /// Pr√©servation historique modifications avec audit trail complet.
    /// </summary>
    /// <param name="id">Identifiant brevet √† modifier</param>
    /// <param name="updateBrevetDto">Nouvelles donn√©es brevet partielles</param>
    /// <returns>Brevet modifi√© avec informations mises √† jour</returns>
    Task<ApiResponse<BrevetDto>> UpdateBrevetAsync(int id, UpdateBrevetDto updateBrevetDto);
    
    /// <summary>
    /// Supprime brevet avec gestion relations d√©pendantes et audit.
    /// Suppression logique ou physique selon configuration syst√®me.
    /// </summary>
    /// <param name="id">Identifiant brevet √† supprimer</param>
    /// <returns>Confirmation succ√®s suppression avec audit trail</returns>
    Task<ApiResponse<bool>> DeleteBrevetAsync(int id);
    
    /// <summary>
    /// Recherche textuelle avanc√©e brevets avec filtrage utilisateur automatique.
    /// Recherche multi-champs optimis√©e avec pertinence r√©sultats.
    /// </summary>
    /// <param name="searchTerm">Terme recherche pour matching multi-champs</param>
    /// <param name="currentUserId">Identifiant utilisateur pour filtrage s√©curis√©</param>
    /// <returns>Liste brevets correspondants avec score pertinence</returns>
    Task<ApiResponse<List<BrevetDto>>> SearchBrevetsAsync(string searchTerm, int? currentUserId = null);
    
    /// <summary>
    /// R√©cup√®re portfolio complet brevets client sp√©cifique.
    /// Filtrage automatique brevets selon assignation client.
    /// </summary>
    /// <param name="clientId">Identifiant client pour filtrage portfolio</param>
    /// <returns>Liste compl√®te brevets client avec d√©tails</returns>
    Task<ApiResponse<List<BrevetDto>>> GetBrevetsByClientAsync(int clientId);
    
    /// <summary>
    /// Import massif brevets depuis fichier Excel avec validation compl√®te.
    /// Traitement batch optimis√© avec gestion erreurs d√©taill√©e.
    /// </summary>
    /// <param name="clientId">Identifiant client destinataire import</param>
    /// <param name="excelFile">Fichier Excel contenant donn√©es brevets</param>
    /// <returns>Rapport import avec succ√®s/erreurs d√©taill√©s</returns>
    Task<ApiResponse<bool>> ImportBrevetsFromExcelAsync(int clientId, IFormFile excelFile);
    
    /// <summary>
    /// V√©rifie permissions utilisateur acc√®s brevet sp√©cifique.
    /// Contr√¥le s√©curit√© pr√©alable avant toute op√©ration sensible.
    /// </summary>
    /// <param name="userId">Identifiant utilisateur pour v√©rification</param>
    /// <param name="brevetId">Identifiant brevet pour contr√¥le acc√®s</param>
    /// <returns>Autorisation bool√©enne acc√®s brevet demand√©</returns>
    Task<bool> UserCanAccessBrevetAsync(int userId, int brevetId);
}
