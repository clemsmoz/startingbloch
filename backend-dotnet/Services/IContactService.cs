/*
 * ================================================================================================
 * INTERFACE SERVICE CONTACTS - CONTRAT GESTION RELATIONS PROFESSIONNELLES PI
 * ================================================================================================
 * 
 * OBJECTIF M√âTIER :
 * Interface contrat service contacts StartingBloch d√©finissant gestion relations professionnelles.
 * Sp√©cification m√©thodes administration contacts cabinets-clients propri√©t√© intellectuelle.
 * 
 * FONCTIONNALIT√âS CONTRACTUELLES :
 * ================================
 * üìã CONSULTATION ‚Üí R√©cup√©ration contacts avec pagination et recherche
 * üîç D√âTAIL ‚Üí Acc√®s contact sp√©cifique avec relations compl√®tes
 * ‚ûï CR√âATION ‚Üí Nouveau contact avec assignation entit√©
 * ‚úèÔ∏è MODIFICATION ‚Üí Mise √† jour informations contact
 * üóëÔ∏è SUPPRESSION ‚Üí Suppression contact avec audit
 * üîó RELATIONS ‚Üí Gestion liens cabinets/clients/r√¥les
 * 
 * DONN√âES CONTACTS G√âR√âES :
 * ========================
 * üë§ IDENTIT√â ‚Üí Nom, pr√©nom, coordonn√©es compl√®tes
 * üìß COMMUNICATION ‚Üí Email, t√©l√©phone, moyens contact
 * üé≠ R√îLE ‚Üí Fonction professionnelle dans entit√©
 * üè¢ AFFECTATION ‚Üí Cabinet conseil ou client assign√©
 * üïê AUDIT ‚Üí Dates cr√©ation, modification, historique
 * 
 * RECHERCHE ET FILTRAGE :
 * ======================
 * ‚úÖ Recherche textuelle multi-champs (nom, pr√©nom, email, r√¥le)
 * ‚úÖ Filtrage par cabinet ou client sp√©cifique
 * ‚úÖ Pagination optimis√©e grandes collections
 * ‚úÖ Tri alphab√©tique par d√©faut
 * 
 * S√âCURIT√â ET PERMISSIONS :
 * ========================
 * ‚úÖ Validation existence entit√©s avant assignation
 * ‚úÖ Contr√¥le int√©grit√© r√©f√©rentielle
 * ‚úÖ Audit trail complet modifications
 * ‚úÖ Protection donn√©es personnelles RGPD
 * 
 * CONFORMIT√â ARCHITECTURALE :
 * ==========================
 * ‚úÖ Pattern Repository avec abstraction compl√®te
 * ‚úÖ Injection d√©pendances via interface
 * ‚úÖ S√©paration responsabilit√©s m√©tier/donn√©es
 * ‚úÖ Testabilit√© maximale via contrats
 * ‚úÖ √âvolutivit√© garantie par d√©couplage
 * 
 * ================================================================================================
 */

using StartingBloch.Backend.DTOs;

namespace StartingBloch.Backend.Services;

/// <summary>
/// Interface service m√©tier gestion contacts professionnels propri√©t√© intellectuelle.
/// Contrat complet op√©rations CRUD avec relations cabinets-clients s√©curis√©es.
/// </summary>
public interface IContactService
{
    /// <summary>
    /// R√©cup√®re liste pagin√©e contacts avec recherche textuelle multi-champs.
    /// Support recherche nom, pr√©nom, email, r√¥le avec relations compl√®tes.
    /// </summary>
    /// <param name="page">Num√©ro page pour pagination (1 par d√©faut)</param>
    /// <param name="pageSize">Taille page pour limitation r√©sultats (10 par d√©faut)</param>
    /// <param name="search">Terme recherche optionnel multi-champs</param>
    /// <returns>R√©ponse pagin√©e contacts avec relations cabinet/client</returns>
    Task<PagedResponse<List<ContactDto>>> GetContactsAsync(int page = 1, int pageSize = 10, string? search = null);
    
    /// <summary>
    /// R√©cup√®re contact sp√©cifique avec relations cabinet/client compl√®tes.
    /// Chargement optimis√© contact avec entit√©s associ√©es d√©taill√©es.
    /// </summary>
    /// <param name="id">Identifiant unique contact recherch√©</param>
    /// <returns>Contact d√©taill√© avec relations compl√®tes ou erreur</returns>
    Task<ApiResponse<ContactDto>> GetContactByIdAsync(int id);
    
    /// <summary>
    /// Cr√©e nouveau contact professionnel avec validation et assignation.
    /// Cr√©ation contact avec relations cabinet/client et audit trail.
    /// </summary>
    /// <param name="createContactDto">Donn√©es cr√©ation contact avec relations</param>
    /// <returns>Contact cr√©√© avec identifiant syst√®me et relations</returns>
    Task<ApiResponse<ContactDto>> CreateContactAsync(CreateContactDto createContactDto);
    
    /// <summary>
    /// Met √† jour contact existant avec nouvelles informations et relations.
    /// Modification contact avec pr√©servation historique et audit trail.
    /// </summary>
    /// <param name="id">Identifiant contact √† modifier</param>
    /// <param name="updateContactDto">Nouvelles donn√©es contact partielles</param>
    /// <returns>Contact modifi√© avec informations mises √† jour</returns>
    Task<ApiResponse<ContactDto>> UpdateContactAsync(int id, UpdateContactDto updateContactDto);
    
    /// <summary>
    /// Supprime contact professionnel avec gestion relations d√©pendantes.
    /// V√©rification contraintes avant suppression d√©finitive contact.
    /// </summary>
    /// <param name="id">Identifiant contact √† supprimer</param>
    /// <returns>Confirmation succ√®s suppression avec audit trail</returns>
    Task<ApiResponse<bool>> DeleteContactAsync(int id);

    /// <summary>
    /// R√©cup√®re la liste pagin√©e des contacts associ√©s √† un client sp√©cifique.
    /// </summary>
    /// <param name="clientId">Identifiant du client</param>
    /// <param name="page">Num√©ro de page</param>
    /// <param name="pageSize">Taille de la page</param>
    /// <returns>R√©ponse pagin√©e des contacts du client</returns>
    Task<PagedResponse<List<ContactDto>>> GetContactsByClientAsync(int clientId, int page = 1, int pageSize = 10);

    /// <summary>
    /// R√©cup√®re la liste pagin√©e des contacts associ√©s √† un cabinet sp√©cifique.
    /// </summary>
    /// <param name="cabinetId">Identifiant du cabinet</param>
    /// <param name="page">Num√©ro de page</param>
    /// <param name="pageSize">Taille de la page</param>
    /// <returns>R√©ponse pagin√©e des contacts du cabinet</returns>
    Task<PagedResponse<List<ContactDto>>> GetContactsByCabinetAsync(int cabinetId, int page = 1, int pageSize = 10);
}
