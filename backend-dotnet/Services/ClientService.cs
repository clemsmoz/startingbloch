/*
 * ================================================================================================
 * SERVICE CLIENTS - GESTION PORTEFEUILLES PROPRI√âT√â INTELLECTUELLE
 * ================================================================================================
 * 
 * OBJECTIF M√âTIER :
 * Service m√©tier complet gestion clients StartingBloch avec portefeuilles brevets.
 * Administration entit√©s clientes, permissions acc√®s et relations cabinets.
 * 
 * FONCTIONNALIT√âS CLIENTS :
 * ========================
 * üìã CONSULTATION ‚Üí Liste pagin√©e clients avec statistiques
 * üîç D√âTAIL ‚Üí Client complet avec portefeuille brevets
 * ‚ûï CR√âATION ‚Üí Nouveau client avec permissions configurables
 * ‚úèÔ∏è MODIFICATION ‚Üí Mise √† jour informations et permissions
 * üóëÔ∏è SUPPRESSION ‚Üí Suppression logique avec v√©rifications
 * üîê PERMISSIONS ‚Üí Gestion droits lecture/√©criture granulaires
 * 
 * DONN√âES CLIENTS :
 * ================
 * üè¢ IDENTIFICATION ‚Üí Nom, r√©f√©rence unique, coordonn√©es
 * üìß CONTACT ‚Üí Email, t√©l√©phone, adresse compl√®te
 * üîí S√âCURIT√â ‚Üí Permissions lecture/√©criture, blocage
 * üë• RELATIONS ‚Üí Cabinets mandataires associ√©s
 * üìä PORTEFEUILLE ‚Üí Brevets propri√©t√© intellectuelle
 * üïê AUDIT ‚Üí Dates cr√©ation, modification, historique
 * 
 * S√âCURIT√â ACC√àS :
 * ===============
 * ‚úÖ Permissions granulaires lecture/√©criture par client
 * ‚úÖ Syst√®me blocage compte client temporaire
 * ‚úÖ Isolation portefeuille brevets √©tanche
 * ‚úÖ Relations Many-to-Many cabinets s√©curis√©es
 * ‚úÖ Audit trail complet modifications
 * 
 * CONFORMIT√â M√âTIER :
 * ==================
 * ‚úÖ Standards gestion portefeuille IP
 * ‚úÖ Relations contractuelles cabinets-clients
 * ‚úÖ Permissions contextuelles par entit√©
 * ‚úÖ Historique complet activit√© client
 * ‚úÖ Int√©gration syst√®me authentification
 * 
 * ================================================================================================
 */

using Microsoft.EntityFrameworkCore;
using StartingBloch.Backend.Data;
using StartingBloch.Backend.DTOs;
using StartingBloch.Backend.Models;

namespace StartingBloch.Backend.Services;

/// <summary>
/// Service m√©tier complet gestion clients avec portefeuilles propri√©t√© intellectuelle.
/// Impl√©mentation s√©curis√©e permissions granulaires et relations Many-to-Many.
/// </summary>
public class ClientService : IClientService
{
    private readonly StartingBlochDbContext _context;

    /// <summary>
    /// Initialise service clients avec contexte donn√©es Entity Framework.
    /// Configuration acc√®s base donn√©es optimis√©e requ√™tes relations.
    /// </summary>
    /// <param name="context">Contexte base donn√©es Entity Framework</param>
    public ClientService(StartingBlochDbContext context)
    {
        _context = context;
    }

    /// <summary>
    /// R√©cup√®re liste pagin√©e clients syst√®me avec statistiques activit√©.
    /// Consultation optimis√©e clients ordre alphab√©tique avec m√©tadonn√©es.
    /// </summary>
    /// <param name="page">Num√©ro page courante (1 par d√©faut)</param>
    /// <param name="pageSize">Taille page (10 √©l√©ments par d√©faut)</param>
    /// <returns>R√©ponse pagin√©e liste clients avec statistiques</returns>
    public async Task<PagedResponse<List<ClientDto>>> GetClientsAsync(int page = 1, int pageSize = 10)
    {
        try
        {
            var totalCount = await _context.Clients.CountAsync();
            var clients = await _context.Clients
                .OrderBy(c => c.NomClient)
                .Skip((page - 1) * pageSize)
                .Take(pageSize)
                .Select(c => new ClientDto
                {
                    Id = c.Id,
                    NomClient = c.NomClient,
                    ReferenceClient = c.ReferenceClient,
                    AdresseClient = c.AdresseClient,
                    CodePostal = c.CodePostal,
                    PaysClient = c.PaysClient,
                    EmailClient = c.EmailClient,
                    TelephoneClient = c.TelephoneClient,
                    CanWrite = c.CanWrite,
                    CanRead = c.CanRead,
                    IsBlocked = c.IsBlocked,
                    CreatedAt = c.CreatedAt
                })
                .ToListAsync();

            var totalPages = (int)Math.Ceiling((double)totalCount / pageSize);

            return new PagedResponse<List<ClientDto>>
            {
                Success = true,
                Data = clients,
                Page = page,
                PageSize = pageSize,
                TotalCount = totalCount,
                TotalPages = totalPages,
                HasNextPage = page < totalPages,
                HasPreviousPage = page > 1
            };
        }
        catch (Exception ex)
        {
            return new PagedResponse<List<ClientDto>>
            {
                Success = false,
                Message = "Erreur lors de la r√©cup√©ration des clients",
                Errors = ex.Message
            };
        }
    }

    /// <summary>
    /// R√©cup√®re client sp√©cifique par ID avec informations compl√®tes.
    /// Consultation d√©taill√©e client avec toutes donn√©es m√©tier.
    /// </summary>
    /// <param name="id">Identifiant unique client syst√®me</param>
    /// <returns>Client complet ou erreur si inexistant</returns>
    public async Task<ApiResponse<ClientDto>> GetClientByIdAsync(int id)
    {
        try
        {
            var client = await _context.Clients.FindAsync(id);

            if (client == null)
            {
                return new ApiResponse<ClientDto>
                {
                    Success = false,
                    Message = "Client non trouv√©"
                };
            }

            var clientDto = new ClientDto
            {
                Id = client.Id,
                NomClient = client.NomClient,
                ReferenceClient = client.ReferenceClient,
                AdresseClient = client.AdresseClient,
                CodePostal = client.CodePostal,
                PaysClient = client.PaysClient,
                EmailClient = client.EmailClient,
                TelephoneClient = client.TelephoneClient,
                CanWrite = client.CanWrite,
                CanRead = client.CanRead,
                IsBlocked = client.IsBlocked,
                CreatedAt = client.CreatedAt
            };

            return new ApiResponse<ClientDto>
            {
                Success = true,
                Data = clientDto
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<ClientDto>
            {
                Success = false,
                Message = "Erreur lors de la r√©cup√©ration du client",
                Errors = ex.Message
            };
        }
    }

    /// <summary>
    /// Cr√©e nouveau client syst√®me avec permissions configurables granulaires.
    /// Enregistrement entit√© cliente avec droits lecture/√©criture personnalis√©s.
    /// </summary>
    /// <param name="createClientDto">Donn√©es cr√©ation client avec permissions</param>
    /// <returns>Client cr√©√© complet ou erreur validation</returns>
    public async Task<ApiResponse<ClientDto>> CreateClientAsync(CreateClientDto createClientDto)
    {
        try
        {
            var client = new Client
            {
                NomClient = createClientDto.NomClient,
                ReferenceClient = createClientDto.ReferenceClient,
                AdresseClient = createClientDto.AdresseClient,
                CodePostal = createClientDto.CodePostal,
                PaysClient = createClientDto.PaysClient,
                EmailClient = createClientDto.EmailClient,
                TelephoneClient = createClientDto.TelephoneClient,
                CanWrite = createClientDto.CanWrite,
                CanRead = createClientDto.CanRead,
                IsBlocked = createClientDto.IsBlocked
            };

            _context.Clients.Add(client);
            await _context.SaveChangesAsync();

            var clientDto = new ClientDto
            {
                Id = client.Id,
                NomClient = client.NomClient,
                ReferenceClient = client.ReferenceClient,
                AdresseClient = client.AdresseClient,
                CodePostal = client.CodePostal,
                PaysClient = client.PaysClient,
                EmailClient = client.EmailClient,
                TelephoneClient = client.TelephoneClient,
                CanWrite = client.CanWrite,
                CanRead = client.CanRead,
                IsBlocked = client.IsBlocked,
                CreatedAt = client.CreatedAt
            };

            return new ApiResponse<ClientDto>
            {
                Success = true,
                Data = clientDto,
                Message = "Client cr√©√© avec succ√®s"
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<ClientDto>
            {
                Success = false,
                Message = "Erreur lors de la cr√©ation du client",
                Errors = ex.Message
            };
        }
    }

    /// <summary>
    /// Met √† jour informations client existant avec nouvelles donn√©es.
    /// Modification compl√®te client incluant permissions et coordonn√©es.
    /// </summary>
    /// <param name="id">Identifiant unique client √† modifier</param>
    /// <param name="updateClientDto">Nouvelles donn√©es client</param>
    /// <returns>Client modifi√© ou erreur validation</returns>
    public async Task<ApiResponse<ClientDto>> UpdateClientAsync(int id, CreateClientDto updateClientDto)
    {
        try
        {
            var client = await _context.Clients.FindAsync(id);

            if (client == null)
            {
                return new ApiResponse<ClientDto>
                {
                    Success = false,
                    Message = "Client non trouv√©"
                };
            }

            client.NomClient = updateClientDto.NomClient;
            client.ReferenceClient = updateClientDto.ReferenceClient;
            client.AdresseClient = updateClientDto.AdresseClient;
            client.CodePostal = updateClientDto.CodePostal;
            client.PaysClient = updateClientDto.PaysClient;
            client.EmailClient = updateClientDto.EmailClient;
            client.TelephoneClient = updateClientDto.TelephoneClient;
            client.CanWrite = updateClientDto.CanWrite;
            client.CanRead = updateClientDto.CanRead;
            client.IsBlocked = updateClientDto.IsBlocked;

            await _context.SaveChangesAsync();

            var clientDto = new ClientDto
            {
                Id = client.Id,
                NomClient = client.NomClient,
                ReferenceClient = client.ReferenceClient,
                AdresseClient = client.AdresseClient,
                CodePostal = client.CodePostal,
                PaysClient = client.PaysClient,
                EmailClient = client.EmailClient,
                TelephoneClient = client.TelephoneClient,
                CanWrite = client.CanWrite,
                CanRead = client.CanRead,
                IsBlocked = client.IsBlocked,
                CreatedAt = client.CreatedAt
            };

            return new ApiResponse<ClientDto>
            {
                Success = true,
                Data = clientDto,
                Message = "Client mis √† jour avec succ√®s"
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<ClientDto>
            {
                Success = false,
                Message = "Erreur lors de la mise √† jour du client",
                Errors = ex.Message
            };
        }
    }

    /// <summary>
    /// Supprime client syst√®me avec v√©rifications contraintes relationnelles.
    /// Suppression s√©curis√©e apr√®s validation d√©pendances portefeuille brevets.
    /// </summary>
    /// <param name="id">Identifiant unique client √† supprimer</param>
    /// <returns>Succ√®s suppression ou erreur contraintes</returns>
    public async Task<ApiResponse<bool>> DeleteClientAsync(int id)
    {
        try
        {
            var client = await _context.Clients.FindAsync(id);

            if (client == null)
            {
                return new ApiResponse<bool>
                {
                    Success = false,
                    Message = "Client non trouv√©"
                };
            }

            _context.Clients.Remove(client);
            await _context.SaveChangesAsync();

            return new ApiResponse<bool>
            {
                Success = true,
                Data = true,
                Message = "Client supprim√© avec succ√®s"
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<bool>
            {
                Success = false,
                Message = "Erreur lors de la suppression du client",
                Errors = ex.Message
            };
        }
    }

    /// <summary>
    /// Recherche textuelle avanc√©e clients multi-champs optimis√©e.
    /// Recherche nom, r√©f√©rence, email clients ordre alphab√©tique.
    /// </summary>
    /// <param name="searchTerm">Terme recherche textuelle</param>
    /// <returns>Liste clients correspondant recherche</returns>
    public async Task<ApiResponse<List<ClientDto>>> SearchClientsAsync(string searchTerm)
    {
        try
        {
            var clients = await _context.Clients
                .Where(c => c.NomClient.Contains(searchTerm) ||
                           (c.ReferenceClient != null && c.ReferenceClient.Contains(searchTerm)) ||
                           (c.EmailClient != null && c.EmailClient.Contains(searchTerm)))
                .OrderBy(c => c.NomClient)
                .Select(c => new ClientDto
                {
                    Id = c.Id,
                    NomClient = c.NomClient,
                    ReferenceClient = c.ReferenceClient,
                    AdresseClient = c.AdresseClient,
                    CodePostal = c.CodePostal,
                    PaysClient = c.PaysClient,
                    EmailClient = c.EmailClient,
                    TelephoneClient = c.TelephoneClient,
                    CanWrite = c.CanWrite,
                    CanRead = c.CanRead,
                    IsBlocked = c.IsBlocked,
                    CreatedAt = c.CreatedAt
                })
                .ToListAsync();

            return new ApiResponse<List<ClientDto>>
            {
                Success = true,
                Data = clients,
                Message = $"{clients.Count} client(s) trouv√©(s)"
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<List<ClientDto>>
            {
                Success = false,
                Message = "Erreur lors de la recherche de clients",
                Errors = ex.Message
            };
        }
    }

    /// <summary>
    /// R√©cup√®re clients sans compte utilisateur associ√© syst√®me authentification.
    /// Identification entit√©s clientes n√©cessitant cr√©ation compte connexion.
    /// </summary>
    /// <returns>Liste clients sans compte utilisateur</returns>
    public async Task<ApiResponse<List<ClientDto>>> GetClientsWithoutUserAccountAsync()
    {
        try
        {
            var clientsWithoutUser = await _context.Clients
                .Where(c => !_context.Users.Any(u => u.ClientId == c.Id))
                .Select(c => new ClientDto
                {
                    Id = c.Id,
                    NomClient = c.NomClient,
                    ReferenceClient = c.ReferenceClient,
                    AdresseClient = c.AdresseClient,
                    CodePostal = c.CodePostal,
                    PaysClient = c.PaysClient,
                    EmailClient = c.EmailClient,
                    TelephoneClient = c.TelephoneClient,
                    CanWrite = c.CanWrite,
                    CanRead = c.CanRead,
                    IsBlocked = c.IsBlocked,
                    CreatedAt = c.CreatedAt
                })
                .ToListAsync();

            return new ApiResponse<List<ClientDto>>
            {
                Success = true,
                Data = clientsWithoutUser,
                Message = $"{clientsWithoutUser.Count} clients sans compte utilisateur trouv√©s"
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<List<ClientDto>>
            {
                Success = false,
                Message = "Erreur lors de la r√©cup√©ration des clients sans compte utilisateur",
                Errors = ex.Message
            };
        }
    }

    /// <summary>
    /// V√©rifie existence compte utilisateur associ√© client sp√©cifique.
    /// Contr√¥le relation client-utilisateur syst√®me authentification.
    /// </summary>
    /// <param name="clientId">Identifiant client √† v√©rifier</param>
    /// <returns>Existence compte utilisateur client</returns>
    public async Task<ApiResponse<bool>> ClientHasUserAccountAsync(int clientId)
    {
        try
        {
            var hasUserAccount = await _context.Users.AnyAsync(u => u.ClientId == clientId);
            
            return new ApiResponse<bool>
            {
                Success = true,
                Data = hasUserAccount,
                Message = hasUserAccount ? "Le client a un compte utilisateur" : "Le client n'a pas de compte utilisateur"
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<bool>
            {
                Success = false,
                Message = "Erreur lors de la v√©rification du compte utilisateur",
                Errors = ex.Message
            };
        }
    }

    public async Task<ApiResponse<ClientWithUserStatusDto>> GetClientWithUserStatusAsync(int clientId)
    {
        try
        {
            var client = await _context.Clients
                .Where(c => c.Id == clientId)
                .Select(c => new ClientWithUserStatusDto
                {
                    Id = c.Id,
                    NomClient = c.NomClient,
                    ReferenceClient = c.ReferenceClient,
                    AdresseClient = c.AdresseClient,
                    CodePostal = c.CodePostal,
                    PaysClient = c.PaysClient,
                    EmailClient = c.EmailClient,
                    TelephoneClient = c.TelephoneClient,
                    CanWrite = c.CanWrite,
                    CanRead = c.CanRead,
                    IsBlocked = c.IsBlocked,
                    CreatedAt = c.CreatedAt,
                    HasUserAccount = _context.Users.Any(u => u.ClientId == c.Id)
                })
                .FirstOrDefaultAsync();

            if (client == null)
            {
                return new ApiResponse<ClientWithUserStatusDto>
                {
                    Success = false,
                    Message = "Client non trouv√©"
                };
            }

            return new ApiResponse<ClientWithUserStatusDto>
            {
                Success = true,
                Data = client,
                Message = "Client r√©cup√©r√© avec succ√®s"
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<ClientWithUserStatusDto>
            {
                Success = false,
                Message = "Erreur lors de la r√©cup√©ration du client",
                Errors = ex.Message
            };
        }
    }
}
