/*
 * ================================================================================================
 * INTERFACE SERVICE RELATIONS CLIENT-CABINET - CONTRAT GESTION ASSOCIATIONS PI
 * ================================================================================================
 * 
 * OBJECTIF M√âTIER :
 * Interface contrat service relations Client-Cabinet StartingBloch.
 * Sp√©cification m√©thodes gestion associations clients-conseils propri√©t√© intellectuelle.
 * 
 * FONCTIONNALIT√âS CONTRACTUELLES :
 * ================================
 * üìã CONSULTATION ‚Üí R√©cup√©ration relations avec pagination
 * üîç D√âTAIL ‚Üí Acc√®s relation sp√©cifique avec informations
 * ‚ûï CR√âATION ‚Üí Nouvelle relation client-cabinet typ√©e
 * ‚úèÔ∏è MODIFICATION ‚Üí Mise √† jour relation existante
 * üóëÔ∏è SUPPRESSION ‚Üí Suppression relation avec audit
 * üîó LIAISONS ‚Üí Gestion liens bidirectionnels clients-cabinets
 * üè¢ NAVIGATION ‚Üí Navigation relations Many-to-Many optimis√©e
 * 
 * GESTION RELATIONS BIDIRECTIONNELLES :
 * ====================================
 * üë• CLIENT‚ÜíCABINETS ‚Üí R√©cup√©ration cabinets assign√©s client
 * üè¢ CABINET‚ÜíCLIENTS ‚Üí R√©cup√©ration clients cabinet sp√©cifique
 * üîó LIAISON ‚Üí Cr√©ation relation typ√©e avec m√©tadonn√©es
 * ‚ùå D√âLIAISON ‚Üí Suppression relation avec validation
 * 
 * TYPES RELATIONS SUPPORT√âES :
 * ============================
 * ‚úÖ Relation standard client-conseil
 * ‚úÖ Relation temporaire/ponctuelle
 * ‚úÖ Relation exclusive/pr√©f√©rentielle
 * ‚úÖ Relation collaborative multi-cabinets
 * ‚úÖ M√©tadonn√©es personnalis√©es relations
 * 
 * RECHERCHE ET NAVIGATION :
 * ========================
 * ‚úÖ Pagination optimis√©e relations volumineuses
 * ‚úÖ Navigation bidirectionnelle efficace
 * ‚úÖ Filtrage par type relation
 * ‚úÖ Recherche relations complexes
 * 
 * CONFORMIT√â ARCHITECTURALE :
 * ==========================
 * ‚úÖ Pattern Repository avec abstraction compl√®te
 * ‚úÖ Injection d√©pendances via interface
 * ‚úÖ S√©paration responsabilit√©s m√©tier/donn√©es
 * ‚úÖ Testabilit√© maximale via contrats
 * ‚úÖ √âvolutivit√© garantie par d√©couplage
 * 
 * ================================================================================================
 */

using StartingBloch.Backend.DTOs;

namespace StartingBloch.Backend.Services;

/// <summary>
/// Interface service m√©tier gestion relations bidirectionnelles Client-Cabinet.
/// Contrat complet associations clients-conseils avec types relations multiples.
/// </summary>
public interface IClientCabinetService
{
    /// <summary>
    /// R√©cup√®re liste pagin√©e relations Client-Cabinet avec m√©tadonn√©es.
    /// Navigation optimis√©e associations avec informations compl√®tes.
    /// </summary>
    /// <param name="page">Num√©ro page pour pagination (1 par d√©faut)</param>
    /// <param name="pageSize">Taille page pour limitation r√©sultats (10 par d√©faut)</param>
    /// <returns>R√©ponse pagin√©e relations avec m√©tadonn√©es navigation</returns>
    Task<PagedResponse<List<ClientCabinetDto>>> GetClientCabinetsAsync(int page = 1, int pageSize = 10);
    
    /// <summary>
    /// R√©cup√®re relation Client-Cabinet sp√©cifique avec d√©tails complets.
    /// Chargement optimis√© relation avec informations client et cabinet.
    /// </summary>
    /// <param name="id">Identifiant unique relation recherch√©e</param>
    /// <returns>Relation d√©taill√©e avec informations compl√®tes ou erreur</returns>
    Task<ApiResponse<ClientCabinetDto>> GetClientCabinetByIdAsync(int id);
    
    /// <summary>
    /// Cr√©e nouvelle relation Client-Cabinet avec validation et audit.
    /// √âtablissement association typ√©e avec m√©tadonn√©es personnalis√©es.
    /// </summary>
    /// <param name="createDto">Donn√©es cr√©ation relation avec type</param>
    /// <returns>Relation cr√©√©e avec identifiant syst√®me g√©n√©r√©</returns>
    Task<ApiResponse<ClientCabinetDto>> CreateClientCabinetAsync(CreateClientCabinetDto createDto);
    
    /// <summary>
    /// Met √† jour relation Client-Cabinet existante avec validation.
    /// Modification type relation et m√©tadonn√©es avec audit trail.
    /// </summary>
    /// <param name="id">Identifiant relation √† modifier</param>
    /// <param name="updateDto">Nouvelles donn√©es relation partielles</param>
    /// <returns>Relation modifi√©e avec informations mises √† jour</returns>
    Task<ApiResponse<ClientCabinetDto>> UpdateClientCabinetAsync(int id, UpdateClientCabinetDto updateDto);
    
    /// <summary>
    /// Supprime relation Client-Cabinet avec validation d√©pendances.
    /// V√©rification contraintes avant suppression d√©finitive relation.
    /// </summary>
    /// <param name="id">Identifiant relation √† supprimer</param>
    /// <returns>Confirmation succ√®s suppression avec audit</returns>
    Task<ApiResponse<bool>> DeleteClientCabinetAsync(int id);
    
    /// <summary>
    /// R√©cup√®re liste cabinets assign√©s √† client sp√©cifique.
    /// Navigation optimis√©e relations client vers conseils multiples.
    /// </summary>
    /// <param name="clientId">Identifiant client pour recherche cabinets</param>
    /// <returns>Liste cabinets assign√©s avec d√©tails relations</returns>
    Task<ApiResponse<List<CabinetDto>>> GetCabinetsByClientAsync(int clientId);
    
    /// <summary>
    /// R√©cup√®re liste clients assign√©s √† cabinet sp√©cifique.
    /// Navigation optimis√©e relations cabinet vers clients multiples.
    /// </summary>
    /// <param name="cabinetId">Identifiant cabinet pour recherche clients</param>
    /// <returns>Liste clients assign√©s avec d√©tails relations</returns>
    Task<ApiResponse<List<ClientDto>>> GetClientsByCabinetAsync(int cabinetId);
    
    /// <summary>
    /// √âtablit liaison directe Client-Cabinet avec type relation optionnel.
    /// Cr√©ation relation bidirectionnelle avec m√©tadonn√©es personnalis√©es.
    /// </summary>
    /// <param name="clientId">Identifiant client pour liaison</param>
    /// <param name="cabinetId">Identifiant cabinet pour liaison</param>
    /// <param name="type">Type relation optionnel pour cat√©gorisation</param>
    /// <returns>Confirmation succ√®s liaison avec d√©tails</returns>
    Task<ApiResponse<bool>> LinkClientToCabinetAsync(int clientId, int cabinetId, string? type = null);
    
    /// <summary>
    /// Supprime liaison Client-Cabinet avec validation existence.
    /// D√©liaison bidirectionnelle avec pr√©servation historique.
    /// </summary>
    /// <param name="clientId">Identifiant client pour d√©liaison</param>
    /// <param name="cabinetId">Identifiant cabinet pour d√©liaison</param>
    /// <returns>Confirmation succ√®s d√©liaison avec audit</returns>
    Task<ApiResponse<bool>> UnlinkClientFromCabinetAsync(int clientId, int cabinetId);
}
