/*
 * ================================================================================================
 * INTERFACE SERVICE CABINETS - CONTRAT GESTION CONSEILS PROPRI√âT√â INTELLECTUELLE
 * ================================================================================================
 * 
 * OBJECTIF M√âTIER :
 * Interface contrat service cabinets StartingBloch d√©finissant gestion conseils PI.
 * Sp√©cification m√©thodes administration cabinets avec relations clients multiples.
 * 
 * FONCTIONNALIT√âS CONTRACTUELLES :
 * ================================
 * üìã CONSULTATION ‚Üí R√©cup√©ration cabinets avec pagination et recherche
 * üîç D√âTAIL ‚Üí Acc√®s cabinet sp√©cifique avec informations compl√®tes
 * ‚ûï CR√âATION ‚Üí Nouveau cabinet avec validation donn√©es
 * ‚úèÔ∏è MODIFICATION ‚Üí Mise √† jour cabinet existant
 * üóëÔ∏è SUPPRESSION ‚Üí Suppression cabinet avec gestion d√©pendances
 * üë• CLIENTS ‚Üí Gestion relations cabinet-clients Many-to-Many
 * üåç G√âOLOCALISATION ‚Üí Filtrage cabinets par pays d'exercice
 * 
 * GESTION RELATIONS CLIENTS :
 * ==========================
 * üîó ASSIGNATION ‚Üí Attribution clients √† cabinets conseil
 * üìã PORTFOLIO ‚Üí R√©cup√©ration clients cabinet sp√©cifique
 * ‚ùå RETRAIT ‚Üí Suppression relation cabinet-client
 * üîÑ TRANSFERT ‚Üí R√©assignation clients entre cabinets
 * 
 * RECHERCHE ET FILTRAGE :
 * ======================
 * ‚úÖ Pagination optimis√©e pour navigation efficace
 * ‚úÖ Recherche textuelle multi-champs (nom, pays, sp√©cialit√©)
 * ‚úÖ Filtrage g√©ographique par pays d'exercice
 * ‚úÖ Tri alphab√©tique par d√©faut
 * 
 * CONFORMIT√â ARCHITECTURALE :
 * ==========================
 * ‚úÖ Pattern Repository avec abstraction compl√®te
 * ‚úÖ Injection d√©pendances via interface
 * ‚úÖ S√©paration responsabilit√©s m√©tier/donn√©es
 * ‚úÖ Testabilit√© maximale via contrats
 * ‚úÖ √âvolutivit√© garantie par d√©couplage
 * 
 * ================================================================================================
 */

using StartingBloch.Backend.DTOs;

namespace StartingBloch.Backend.Services;

/// <summary>
/// Interface service m√©tier gestion cabinets conseil propri√©t√© intellectuelle.
/// Contrat complet op√©rations CRUD avec gestion relations clients multiples.
/// </summary>
public interface ICabinetService
{
    /// <summary>
    /// R√©cup√®re liste pagin√©e cabinets avec recherche textuelle multi-champs.
    /// Support pagination optimis√©e et filtrage par nom, pays, sp√©cialit√©s.
    /// </summary>
    /// <param name="page">Num√©ro page pour pagination (1 par d√©faut)</param>
    /// <param name="pageSize">Taille page pour limitation r√©sultats (10 par d√©faut)</param>
    /// <param name="search">Terme recherche optionnel multi-champs</param>
    /// <returns>R√©ponse pagin√©e cabinets avec m√©tadonn√©es navigation</returns>
    Task<PagedResponse<List<CabinetDto>>> GetCabinetsAsync(int page = 1, int pageSize = 10, string? search = null);
    
    /// <summary>
    /// R√©cup√®re cabinet sp√©cifique avec informations d√©taill√©es compl√®tes.
    /// Chargement optimis√© donn√©es cabinet avec relations clients.
    /// </summary>
    /// <param name="id">Identifiant unique cabinet recherch√©</param>
    /// <returns>Cabinet d√©taill√© avec informations compl√®tes ou erreur</returns>
    Task<ApiResponse<CabinetDto>> GetCabinetByIdAsync(int id);
    
    /// <summary>
    /// Cr√©e nouveau cabinet avec validation donn√©es et audit trail.
    /// Initialisation cabinet avec informations de base et m√©tadonn√©es.
    /// </summary>
    /// <param name="createCabinetDto">Donn√©es cr√©ation cabinet compl√®tes</param>
    /// <returns>Cabinet cr√©√© avec identifiant syst√®me g√©n√©r√©</returns>
    Task<ApiResponse<CabinetDto>> CreateCabinetAsync(CreateCabinetDto createCabinetDto);
    
    /// <summary>
    /// Met √† jour cabinet existant avec validation et pr√©servation historique.
    /// Modification informations cabinet avec audit trail automatique.
    /// </summary>
    /// <param name="id">Identifiant cabinet √† modifier</param>
    /// <param name="updateCabinetDto">Nouvelles donn√©es cabinet partielles</param>
    /// <returns>Cabinet modifi√© avec informations mises √† jour</returns>
    Task<ApiResponse<CabinetDto>> UpdateCabinetAsync(int id, UpdateCabinetDto updateCabinetDto);
    
    /// <summary>
    /// Supprime cabinet avec gestion relations clients d√©pendantes.
    /// V√©rification contraintes avant suppression d√©finitive.
    /// </summary>
    /// <param name="id">Identifiant cabinet √† supprimer</param>
    /// <returns>Confirmation succ√®s suppression avec audit</returns>
    Task<ApiResponse<bool>> DeleteCabinetAsync(int id);
    
    /// <summary>
    /// R√©cup√®re liste compl√®te clients assign√©s cabinet sp√©cifique.
    /// Chargement optimis√© portfolio clients avec relations actives.
    /// </summary>
    /// <param name="cabinetId">Identifiant cabinet pour recherche clients</param>
    /// <returns>Liste clients cabinet avec informations d√©taill√©es</returns>
    Task<ApiResponse<List<ClientDto>>> GetCabinetClientsAsync(int cabinetId);
    
    /// <summary>
    /// Assigne client √† cabinet avec validation relation unique.
    /// Cr√©ation relation Many-to-Many s√©curis√©e cabinet-client.
    /// </summary>
    /// <param name="cabinetId">Identifiant cabinet destinataire</param>
    /// <param name="clientId">Identifiant client √† assigner</param>
    /// <returns>Confirmation succ√®s assignation relation</returns>
    Task<ApiResponse<bool>> AssignClientToCabinetAsync(int cabinetId, int clientId);
    
    /// <summary>
    /// Retire client de cabinet avec validation existence relation.
    /// Suppression relation Many-to-Many avec v√©rification pr√©alable.
    /// </summary>
    /// <param name="cabinetId">Identifiant cabinet source retrait</param>
    /// <param name="clientId">Identifiant client √† retirer</param>
    /// <returns>Confirmation succ√®s retrait relation</returns>
    Task<ApiResponse<bool>> RemoveClientFromCabinetAsync(int cabinetId, int clientId);
    
    /// <summary>
    /// R√©cup√®re cabinets filtr√©s par pays d'exercice sp√©cifique.
    /// Recherche g√©ographique optimis√©e pour localisation services.
    /// </summary>
    /// <param name="country">Nom pays pour filtrage g√©ographique</param>
    /// <returns>Liste cabinets pays sp√©cifique avec d√©tails</returns>
    Task<ApiResponse<List<CabinetDto>>> GetCabinetsByCountryAsync(string country);

    /// <summary>
    /// R√©cup√®re la liste des cabinets li√©s √† un client donn√© via la table de jonction.
    /// </summary>
    /// <param name="clientId">Identifiant du client</param>
    /// <returns>Liste des cabinets du client</returns>
    Task<ApiResponse<List<CabinetDto>>> GetCabinetsByClientAsync(int clientId);

    /// <summary>
    /// Cr√©e un cabinet et le lie imm√©diatement au client sp√©cifi√©.
    /// </summary>
    /// <param name="clientId">Identifiant du client propri√©taire</param>
    /// <param name="createCabinetDto">Donn√©es de cr√©ation du cabinet</param>
    /// <returns>Cabinet cr√©√©</returns>
    Task<ApiResponse<CabinetDto>> CreateCabinetForClientAsync(int clientId, CreateCabinetDto createCabinetDto);

    /// <summary>
    /// Lie un cabinet existant au client sp√©cifi√© s'il n'est pas d√©j√† li√©.
    /// </summary>
    /// <param name="clientId">Identifiant du client</param>
    /// <param name="cabinetId">Identifiant du cabinet √† lier</param>
    /// <returns>Confirmation de liaison</returns>
    Task<ApiResponse<bool>> LinkExistingCabinetToClientAsync(int clientId, int cabinetId);
}
