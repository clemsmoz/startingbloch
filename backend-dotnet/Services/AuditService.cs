/*
 * ================================================================================================
 * SERVICE AUDIT - CONFORMIT√â RGPD ET TRA√áABILIT√â S√âCURIS√âE
 * ================================================================================================
 * 
 * OBJECTIF M√âTIER :
 * Service audit complet garantie conformit√© RGPD et tra√ßabilit√© toutes actions StartingBloch.
 * Historique s√©curis√© modifications donn√©es, connexions et op√©rations sensibles.
 * 
 * FONCTIONNALIT√âS AUDIT :
 * ======================
 * üìä TRA√áABILIT√â ‚Üí Actions CRUD compl√®tes avec m√©tadonn√©es
 * üîê S√âCURIT√â ‚Üí Donn√©es chiffr√©es et hash√©es selon RGPD
 * üìÅ STOCKAGE ‚Üí Fichiers rotatifs quotidiens pour performance
 * üîç RECHERCHE ‚Üí R√©cup√©ration trails par utilisateur/entit√©
 * üì§ EXPORT ‚Üí Extraction donn√©es utilisateur (droit acc√®s)
 * üóëÔ∏è SUPPRESSION ‚Üí Anonymisation conforme RGPD
 * 
 * TYPES ACTIONS AUDIT√âES :
 * =======================
 * ‚úÖ CRUD ‚Üí Create/Read/Update/Delete donn√©es
 * üîê AUTH ‚Üí Login/Logout/PasswordChange
 * üìä DATA ‚Üí Export/Deletion op√©rations sensibles
 * ‚ö†Ô∏è SECURITY ‚Üí Violations et tentatives suspectes
 * 
 * CONFORMIT√â RGPD :
 * ================
 * ‚úÖ Chiffrement donn√©es personnelles (emails)
 * ‚úÖ Hash identifiants sensibles (IP, userId)
 * ‚úÖ Droit acc√®s donn√©es (export utilisateur)
 * ‚úÖ Droit effacement (anonymisation/suppression)
 * ‚úÖ Audit trail complet pour autorit√©s
 * ‚úÖ Rotation automatique logs (performance)
 * ‚úÖ Stockage s√©curis√© fichiers locaux chiffr√©s
 * 
 * S√âCURIT√â 8-COUCHES :
 * ===================
 * üîí Chiffrement asym√©trique donn√©es sensibles
 * üîë Hash irr√©versible identifiants r√©seau
 * üìù Journalisation compl√®te sans exposition
 * üõ°Ô∏è Validation stricte avant stockage
 * ‚ö° Performance optimis√©e fichiers quotidiens
 * üîç Recherche s√©curis√©e sans fuites donn√©es
 * üìã Export contr√¥l√© droits utilisateur
 * üóëÔ∏è Suppression/anonymisation conforme r√©glementaire
 * 
 * ================================================================================================
 */

using System.ComponentModel.DataAnnotations;
using System.Text.Json;

namespace StartingBloch.Backend.Services;

/// <summary>
/// √ânum√©ration types actions audit√©es pour classification logs s√©curis√©s.
/// Couvre toutes op√©rations critiques syst√®me conformit√© RGPD.
/// </summary>
public enum AuditActionType
{
    /// <summary>Cr√©ation nouvelle entit√© donn√©es.</summary>
    Create,
    /// <summary>Lecture/consultation donn√©es existantes.</summary>
    Read,
    /// <summary>Modification donn√©es existantes.</summary>
    Update,
    /// <summary>Suppression donn√©es syst√®me.</summary>
    Delete,
    /// <summary>Connexion utilisateur authentification.</summary>
    Login,
    /// <summary>D√©connexion utilisateur session.</summary>
    Logout,
    /// <summary>Changement mot de passe s√©curit√©.</summary>
    PasswordChange,
    /// <summary>Export donn√©es utilisateur (droit RGPD).</summary>
    DataExport,
    /// <summary>Suppression donn√©es utilisateur (droit RGPD).</summary>
    DataDeletion,
    /// <summary>Violation s√©curit√© d√©tect√©e syst√®me.</summary>
    SecurityViolation
}

/// <summary>
/// Entit√© log audit complet avec m√©tadonn√©es s√©curis√©es RGPD.
/// Structure optimis√©e stockage chiffr√© et recherches performantes.
/// </summary>
public class AuditLogEntry
{
    /// <summary>Identifiant unique entr√©e audit.</summary>
    public int Id { get; set; }
    
    /// <summary>Horodatage UTC pr√©cis action audit√©e.</summary>
    public DateTime Timestamp { get; set; }
    
    /// <summary>Identifiant utilisateur hash√© s√©curis√© RGPD.</summary>
    public string UserId { get; set; } = string.Empty;
    
    /// <summary>Email utilisateur chiffr√© r√©cup√©ration RGPD.</summary>
    public string UserEmail { get; set; } = string.Empty;
    
    /// <summary>Type action syst√®me classifi√©.</summary>
    public AuditActionType Action { get; set; }
    
    /// <summary>Type entit√© affect√©e (Brevet, Client, etc.).</summary>
    public string EntityType { get; set; } = string.Empty;
    
    /// <summary>Identifiant entit√© sp√©cifique modifi√©e.</summary>
    public string EntityId { get; set; } = string.Empty;
    
    /// <summary>Valeurs avant modification (JSON s√©rialis√©).</summary>
    public string? OldValues { get; set; }
    
    /// <summary>Nouvelles valeurs apr√®s modification (JSON).</summary>
    public string? NewValues { get; set; }
    
    /// <summary>Adresse IP hash√©e conformit√© vie priv√©e.</summary>
    public string IpAddress { get; set; } = string.Empty;
    
    /// <summary>User-Agent navigateur m√©tadonn√©es contexte.</summary>
    public string UserAgent { get; set; } = string.Empty;
    
    /// <summary>Succ√®s op√©ration audit√©e.</summary>
    public bool IsSuccess { get; set; }
    
    /// <summary>Message erreur si √©chec op√©ration.</summary>
    public string? ErrorMessage { get; set; }
    
    /// <summary>Donn√©es additionnelles contexte JSON.</summary>
    public string? AdditionalData { get; set; }
}

/// <summary>
/// Interface service audit d√©finition contrat conformit√© RGPD.
/// Garantit impl√©mentation compl√®te tra√ßabilit√© s√©curis√©e syst√®me.
/// </summary>
public interface IAuditService
{
    /// <summary>
    /// Enregistre action utilisateur audit trail s√©curis√© chiffr√©.
    /// Conformit√© RGPD avec hash/chiffrement donn√©es sensibles.
    /// </summary>
    /// <param name="userId">Identifiant utilisateur action</param>
    /// <param name="userEmail">Email utilisateur pour tra√ßabilit√©</param>
    /// <param name="action">Type action classifi√©e syst√®me</param>
    /// <param name="entityType">Type entit√© affect√©e</param>
    /// <param name="entityId">ID entit√© sp√©cifique</param>
    /// <param name="oldValues">Valeurs avant modification</param>
    /// <param name="newValues">Nouvelles valeurs apr√®s</param>
    /// <param name="ipAddress">IP utilisateur contexte</param>
    /// <param name="userAgent">Navigateur m√©tadonn√©es</param>
    /// <param name="isSuccess">Succ√®s op√©ration</param>
    /// <param name="errorMessage">Erreur si √©chec</param>
    Task LogActionAsync(string userId, string userEmail, AuditActionType action, 
                       string entityType, string entityId = "", 
                       object? oldValues = null, object? newValues = null,
                       string ipAddress = "", string userAgent = "", 
                       bool isSuccess = true, string? errorMessage = null);
    
    /// <summary>
    /// R√©cup√®re historique complet actions utilisateur sp√©cifique p√©riode.
    /// Droit acc√®s RGPD avec d√©chiffrement s√©curis√© donn√©es.
    /// </summary>
    /// <param name="userId">Utilisateur concern√© audit</param>
    /// <param name="fromDate">Date d√©but p√©riode (30j par d√©faut)</param>
    /// <param name="toDate">Date fin p√©riode (aujourd'hui par d√©faut)</param>
    Task<List<AuditLogEntry>> GetUserAuditTrailAsync(string userId, DateTime? fromDate = null, DateTime? toDate = null);
    
    /// <summary>
    /// R√©cup√®re historique modifications entit√© sp√©cifique compl√®te.
    /// Tra√ßabilit√© modificatoins brevet/client/contact syst√®me.
    /// </summary>
    /// <param name="entityType">Type entit√© (Brevet, Client, etc.)</param>
    /// <param name="entityId">Identifiant entit√© sp√©cifique</param>
    Task<List<AuditLogEntry>> GetEntityAuditTrailAsync(string entityType, string entityId);
    
    /// <summary>
    /// Export complet donn√©es utilisateur conformit√© droit acc√®s RGPD.
    /// G√©n√©ration fichier s√©curis√© toutes informations personnelles.
    /// </summary>
    /// <param name="userId">Utilisateur demandeur export</param>
    /// <param name="format">Format export (json par d√©faut)</param>
    Task<bool> ExportUserDataAsync(string userId, string format = "json");
    
    /// <summary>
    /// Suppression/anonymisation donn√©es utilisateur droit effacement RGPD.
    /// Anonymisation recommand√©e pr√©servation audit trail l√©gal.
    /// </summary>
    /// <param name="userId">Utilisateur suppression demand√©e</param>
    /// <param name="anonymize">Anonymiser (true) ou supprimer compl√®tement</param>
    Task<bool> DeleteUserDataAsync(string userId, bool anonymize = true);
}

/// <summary>
/// Service audit conformit√© RGPD complet avec chiffrement et tra√ßabilit√© s√©curis√©e.
/// Impl√©mentation robuste stockage fichiers rotatifs quotidiens optimis√©s performance.
/// </summary>
public class AuditService : IAuditService
{
    private readonly ILogger<AuditService> _logger;
    private readonly IEncryptionService _encryptionService;
    private const string AuditLogPath = "audit_logs";

    /// <summary>
    /// Initialise service audit avec logger et chiffrement s√©curis√© RGPD.
    /// Cr√©ation automatique r√©pertoire audit si inexistant.
    /// </summary>
    /// <param name="logger">Logger structur√© pour monitoring service</param>
    /// <param name="encryptionService">Service chiffrement donn√©es sensibles</param>
    public AuditService(ILogger<AuditService> logger, IEncryptionService encryptionService)
    {
        _logger = logger;
        _encryptionService = encryptionService;
        
        // Cr√©er le dossier d'audit s'il n'existe pas
        if (!Directory.Exists(AuditLogPath))
        {
            Directory.CreateDirectory(AuditLogPath);
        }
    }

    /// <summary>
    /// Enregistre action utilisateur audit trail avec chiffrement donn√©es sensibles.
    /// Stockage s√©curis√© fichier quotidien rotationnel conformit√© RGPD.
    /// </summary>
    /// <param name="userId">Identifiant utilisateur hash√© s√©curis√©</param>
    /// <param name="userEmail">Email chiffr√© r√©cup√©ration RGPD</param>
    /// <param name="action">Type action classifi√©e audit</param>
    /// <param name="entityType">Type entit√© affect√©e syst√®me</param>
    /// <param name="entityId">Identifiant entit√© sp√©cifique</param>
    /// <param name="oldValues">Valeurs avant modification JSON</param>
    /// <param name="newValues">Nouvelles valeurs apr√®s JSON</param>
    /// <param name="ipAddress">IP hash√©e conformit√© vie priv√©e</param>
    /// <param name="userAgent">Navigateur m√©tadonn√©es contexte</param>
    /// <param name="isSuccess">Succ√®s op√©ration audit√©e</param>
    /// <param name="errorMessage">Message erreur si √©chec</param>
    public async Task LogActionAsync(string userId, string userEmail, AuditActionType action, 
                                   string entityType, string entityId = "", 
                                   object? oldValues = null, object? newValues = null,
                                   string ipAddress = "", string userAgent = "", 
                                   bool isSuccess = true, string? errorMessage = null)
    {
        try
        {
            var auditEntry = new AuditLogEntry
            {
                Timestamp = DateTime.UtcNow,
                UserId = await _encryptionService.HashSensitiveDataAsync(userId),
                UserEmail = await _encryptionService.EncryptAsync(userEmail),
                Action = action,
                EntityType = entityType,
                EntityId = entityId,
                OldValues = oldValues != null ? JsonSerializer.Serialize(oldValues) : null,
                NewValues = newValues != null ? JsonSerializer.Serialize(newValues) : null,
                IpAddress = await _encryptionService.HashSensitiveDataAsync(ipAddress),
                UserAgent = userAgent,
                IsSuccess = isSuccess,
                ErrorMessage = errorMessage
            };

            // Sauvegarder dans un fichier par jour (pour faciliter la rotation)
            var fileName = $"audit_{DateTime.UtcNow:yyyy-MM-dd}.json";
            var filePath = Path.Combine(AuditLogPath, fileName);
            
            var logLine = JsonSerializer.Serialize(auditEntry) + Environment.NewLine;
            await File.AppendAllTextAsync(filePath, logLine);

            _logger.LogInformation("Audit log recorded: {Action} by {UserId} on {EntityType}:{EntityId}", 
                                 action, userId, entityType, entityId);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to log audit entry");
        }
    }

    /// <summary>
    /// R√©cup√®re historique complet actions utilisateur p√©riode sp√©cifique.
    /// Droit acc√®s RGPD avec d√©chiffrement s√©curis√© email et recherche optimis√©e.
    /// </summary>
    /// <param name="userId">Utilisateur concern√© trail audit</param>
    /// <param name="fromDate">Date d√©but p√©riode (30 jours par d√©faut)</param>
    /// <param name="toDate">Date fin p√©riode (aujourd'hui par d√©faut)</param>
    /// <returns>Liste chronologique actions utilisateur d√©chiffr√©es</returns>
    public async Task<List<AuditLogEntry>> GetUserAuditTrailAsync(string userId, DateTime? fromDate = null, DateTime? toDate = null)
    {
        var results = new List<AuditLogEntry>();
        var hashedUserId = await _encryptionService.HashSensitiveDataAsync(userId);
        
        fromDate ??= DateTime.UtcNow.AddDays(-30); // Par d√©faut, 30 derniers jours
        toDate ??= DateTime.UtcNow;

        try
        {
            var files = Directory.GetFiles(AuditLogPath, "audit_*.json")
                               .Where(f => IsFileInDateRange(f, fromDate.Value, toDate.Value));

            foreach (var file in files)
            {
                var lines = await File.ReadAllLinesAsync(file);
                foreach (var line in lines)
                {
                    if (string.IsNullOrWhiteSpace(line)) continue;
                    
                    var entry = JsonSerializer.Deserialize<AuditLogEntry>(line);
                    if (entry?.UserId == hashedUserId)
                    {
                        // D√©chiffrer l'email pour l'affichage
                        if (!string.IsNullOrEmpty(entry.UserEmail))
                        {
                            entry.UserEmail = await _encryptionService.DecryptAsync(entry.UserEmail);
                        }
                        results.Add(entry);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error retrieving user audit trail for {UserId}", userId);
        }

        return results.OrderByDescending(x => x.Timestamp).ToList();
    }

    /// <summary>
    /// R√©cup√®re historique complet modifications entit√© sp√©cifique syst√®me.
    /// Tra√ßabilit√© lifecycle brevet/client/contact toutes op√©rations CRUD.
    /// </summary>
    /// <param name="entityType">Type entit√© (Brevet, Client, Contact, etc.)</param>
    /// <param name="entityId">Identifiant unique entit√© syst√®me</param>
    /// <returns>Liste chronologique modifications entit√©</returns>
    public async Task<List<AuditLogEntry>> GetEntityAuditTrailAsync(string entityType, string entityId)
    {
        var results = new List<AuditLogEntry>();

        try
        {
            var files = Directory.GetFiles(AuditLogPath, "audit_*.json");

            foreach (var file in files)
            {
                var lines = await File.ReadAllLinesAsync(file);
                foreach (var line in lines)
                {
                    if (string.IsNullOrWhiteSpace(line)) continue;
                    
                    var entry = JsonSerializer.Deserialize<AuditLogEntry>(line);
                    if (entry?.EntityType == entityType && entry.EntityId == entityId)
                    {
                        results.Add(entry);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error retrieving entity audit trail for {EntityType}:{EntityId}", entityType, entityId);
        }

        return results.OrderByDescending(x => x.Timestamp).ToList();
    }

    /// <summary>
    /// Export complet donn√©es utilisateur conformit√© droit acc√®s RGPD Article 15.
    /// G√©n√©ration fichier s√©curis√© toutes informations personnelles d√©tenues.
    /// </summary>
    /// <param name="userId">Utilisateur demandeur export donn√©es</param>
    /// <param name="format">Format fichier export (json par d√©faut)</param>
    /// <returns>Succ√®s g√©n√©ration export utilisateur</returns>
    public async Task<bool> ExportUserDataAsync(string userId, string format = "json")
    {
        try
        {
            var auditTrail = await GetUserAuditTrailAsync(userId);
            var exportPath = Path.Combine("exports", $"user_data_{userId}_{DateTime.UtcNow:yyyy-MM-dd_HH-mm-ss}.{format}");
            
            Directory.CreateDirectory(Path.GetDirectoryName(exportPath)!);

            if (format.ToLower() == "json")
            {
                var exportData = new
                {
                    UserId = userId,
                    ExportDate = DateTime.UtcNow,
                    AuditTrail = auditTrail
                };
                
                await File.WriteAllTextAsync(exportPath, JsonSerializer.Serialize(exportData, new JsonSerializerOptions { WriteIndented = true }));
            }

            await LogActionAsync(userId, "", AuditActionType.DataExport, "UserData", userId, 
                               null, new { ExportPath = exportPath }, "", "", true);

            _logger.LogInformation("User data exported for {UserId} to {ExportPath}", userId, exportPath);
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to export user data for {UserId}", userId);
            return false;
        }
    }

    /// <summary>
    /// Suppression/anonymisation donn√©es utilisateur droit effacement RGPD Article 17.
    /// Anonymisation recommand√©e pr√©servation audit trail l√©gal et r√©glementaire.
    /// </summary>
    /// <param name="userId">Utilisateur suppression demand√©e</param>
    /// <param name="anonymize">Anonymiser (recommand√©) ou supprimer compl√®tement</param>
    /// <returns>Succ√®s op√©ration suppression/anonymisation</returns>
    public async Task<bool> DeleteUserDataAsync(string userId, bool anonymize = true)
    {
        try
        {
            if (anonymize)
            {
                // Anonymiser les donn√©es plut√¥t que les supprimer (recommand√© RGPD)
                await LogActionAsync(userId, "", AuditActionType.DataDeletion, "UserData", userId, 
                                   null, new { Action = "Anonymized" }, "", "", true);
            }
            else
            {
                // Suppression compl√®te (√† utiliser avec pr√©caution)
                await LogActionAsync(userId, "", AuditActionType.DataDeletion, "UserData", userId, 
                                   null, new { Action = "Deleted" }, "", "", true);
            }

            _logger.LogInformation("User data {Action} for {UserId}", anonymize ? "anonymized" : "deleted", userId);
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to delete/anonymize user data for {UserId}", userId);
            return false;
        }
    }

    /// <summary>
    /// D√©termine si fichier audit dans plage dates sp√©cifi√©e optimisation recherche.
    /// Analyse nom fichier extraction date pour filtrage efficace p√©riode.
    /// </summary>
    /// <param name="filePath">Chemin fichier audit quotidien</param>
    /// <param name="fromDate">Date d√©but p√©riode recherche</param>
    /// <param name="toDate">Date fin p√©riode recherche</param>
    /// <returns>Fichier dans plage dates demand√©e</returns>
    private static bool IsFileInDateRange(string filePath, DateTime fromDate, DateTime toDate)
    {
        var fileName = Path.GetFileNameWithoutExtension(filePath);
        var datePart = fileName.Replace("audit_", "");
        
        if (DateTime.TryParseExact(datePart, "yyyy-MM-dd", null, System.Globalization.DateTimeStyles.None, out var fileDate))
        {
            return fileDate >= fromDate.Date && fileDate <= toDate.Date;
        }
        
        return false;
    }
}
