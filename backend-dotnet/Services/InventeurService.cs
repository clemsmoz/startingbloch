/*
 * ================================================================================================
 * SERVICE INVENTEURS - GESTION CR√âATEURS ET INNOVATEURS PROPRI√âT√â INTELLECTUELLE
 * ================================================================================================
 * 
 * OBJECTIF M√âTIER :
 * Service m√©tier complet gestion inventeurs StartingBloch.
 * Administration cr√©ateurs, innovateurs et porteurs innovations propri√©t√© intellectuelle.
 * 
 * FONCTIONNALIT√âS INVENTEURS :
 * ============================
 * üìã CONSULTATION ‚Üí Liste pagin√©e avec recherche multi-champs
 * üîç D√âTAIL ‚Üí Inventeur complet avec nationalit√©s multiples
 * ‚ûï CR√âATION ‚Üí Nouvel inventeur avec gestion pays
 * ‚úèÔ∏è MODIFICATION ‚Üí Mise √† jour informations inventeur
 * üóëÔ∏è SUPPRESSION ‚Üí Suppression logique inventeur
 * üåç NATIONALIT√âS ‚Üí Gestion pays multiples inventeur
 * 
 * DONN√âES INVENTEURS :
 * ===================
 * üë§ IDENTIT√â ‚Üí Nom, pr√©nom, coordonn√©es personnelles
 * üìß COMMUNICATION ‚Üí Email contact principal
 * üåç G√âOLOCALISATION ‚Üí Pays nationalit√©s multiples
 * üîó RELATIONS ‚Üí Liens avec brevets cr√©√©s
 * üïê AUDIT ‚Üí Dates cr√©ation, modification, historique
 * 
 * RECHERCHE ET FILTRAGE :
 * ======================
 * ‚úÖ Recherche textuelle multi-champs (nom, pr√©nom, email)
 * ‚úÖ Filtrage par pays ou nationalit√©
 * ‚úÖ Pagination optimis√©e grandes collections
 * ‚úÖ Tri alphab√©tique par d√©faut
 * 
 * CONFORMIT√â INNOVATION :
 * ======================
 * ‚úÖ Gestion nationalit√©s multiples selon standards internationaux
 * ‚úÖ Relations Many-to-Many avec pays via table liaison
 * ‚úÖ Validation existence pays r√©f√©rentiels
 * ‚úÖ Audit trail complet modifications
 * ‚úÖ Conformit√© OMPI (Organisation Mondiale Propri√©t√© Intellectuelle)
 * 
 * ================================================================================================
 */

using Microsoft.EntityFrameworkCore;
using StartingBloch.Backend.Data;
using StartingBloch.Backend.DTOs;
using StartingBloch.Backend.Models;

namespace StartingBloch.Backend.Services;

/// <summary>
/// Service m√©tier complet gestion inventeurs et cr√©ateurs propri√©t√© intellectuelle.
/// Impl√©mentation s√©curis√©e nationalit√©s multiples avec recherche optimis√©e.
/// </summary>
public class InventeurService : IInventeurService
{
    private readonly StartingBlochDbContext _context;

    /// <summary>
    /// Initialise service inventeurs avec contexte donn√©es Entity Framework.
    /// Configuration acc√®s base donn√©es optimis√©e requ√™tes relations pays.
    /// </summary>
    /// <param name="context">Contexte base donn√©es Entity Framework</param>
    public InventeurService(StartingBlochDbContext context)
    {
        _context = context;
    }

    /// <summary>
    /// R√©cup√®re liste pagin√©e inventeurs avec recherche textuelle multi-champs.
    /// Recherche optimis√©e nom, pr√©nom, email avec nationalit√©s compl√®tes.
    /// </summary>
    /// <param name="page">Num√©ro page courante (1 par d√©faut)</param>
    /// <param name="pageSize">Taille page (10 √©l√©ments par d√©faut)</param>
    /// <param name="search">Terme recherche optionnel multi-champs</param>
    /// <returns>R√©ponse pagin√©e liste inventeurs avec pays</returns>
    public async Task<PagedResponse<List<InventeurDto>>> GetInventeursAsync(int page = 1, int pageSize = 10, string? search = null)
    {
        try
        {
            var query = _context.Inventeurs.AsQueryable();

            if (!string.IsNullOrEmpty(search))
            {
                query = query.Where(i => (i.Nom != null && i.Nom.Contains(search)) || 
                                        (i.Prenom != null && i.Prenom.Contains(search)) ||
                                        (i.Email != null && i.Email.Contains(search)));
            }

            var totalItems = await query.CountAsync();

            var inventeurs = await query
                .Include(i => i.InventeurPays)
                    .ThenInclude(ip => ip.Pays)
                .Skip((page - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync();

            var inventeurDtos = inventeurs.Select(i => new InventeurDto
            {
                Id = i.Id,
                Nom = i.Nom ?? "",
                Prenom = i.Prenom,
                Email = i.Email,
                Pays = i.InventeurPays?.Select(ip => new PaysDto
                {
                    Id = ip.Pays.Id,
                    NomPays = ip.Pays.NomFrFr,
                    CodePays = ip.Pays.CodeIso ?? "",
                    CreatedAt = ip.Pays.CreatedAt
                }).ToList() ?? new List<PaysDto>()
            }).ToList();

            return new PagedResponse<List<InventeurDto>>
            {
                Success = true,
                Data = inventeurDtos,
                Page = page,
                PageSize = pageSize,
                TotalCount = totalItems,
                TotalPages = (int)Math.Ceiling((double)totalItems / pageSize),
                Message = $"{inventeurDtos.Count} inventeurs trouv√©s"
            };
        }
        catch (Exception ex)
        {
            return new PagedResponse<List<InventeurDto>>
            {
                Success = false,
                Message = "Erreur lors de la r√©cup√©ration des inventeurs",
                Errors = ex.Message
            };
        }
    }

    /// <summary>
    /// R√©cup√®re inventeur sp√©cifique par identifiant avec nationalit√©s compl√®tes.
    /// Chargement optimis√© pays multiples pour contexte g√©ographique complet.
    /// </summary>
    /// <param name="id">Identifiant unique inventeur recherch√©</param>
    /// <returns>Inventeur d√©taill√© avec liste pays nationalit√©s</returns>
    public async Task<ApiResponse<InventeurDto>> GetInventeurByIdAsync(int id)
    {
        try
        {
            var inventeur = await _context.Inventeurs
                .Include(i => i.InventeurPays)
                    .ThenInclude(ip => ip.Pays)
                .FirstOrDefaultAsync(i => i.Id == id);

            if (inventeur == null)
            {
                return new ApiResponse<InventeurDto>
                {
                    Success = false,
                    Message = "Inventeur non trouv√©"
                };
            }

            var inventeurDto = new InventeurDto
            {
                Id = inventeur.Id,
                Nom = inventeur.Nom ?? "",
                Prenom = inventeur.Prenom,
                Email = inventeur.Email,
                Pays = inventeur.InventeurPays?.Select(ip => new PaysDto
                {
                    Id = ip.Pays.Id,
                    NomPays = ip.Pays.NomFrFr,
                    CodePays = ip.Pays.CodeIso ?? "",
                    CreatedAt = ip.Pays.CreatedAt
                }).ToList() ?? new List<PaysDto>()
            };

            return new ApiResponse<InventeurDto>
            {
                Success = true,
                Data = inventeurDto
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<InventeurDto>
            {
                Success = false,
                Message = "Erreur lors de la r√©cup√©ration de l'inventeur",
                Errors = ex.Message
            };
        }
    }

    /// <summary>
    /// Cr√©e nouvel inventeur avec informations de base et audit trail.
    /// Initialisation inventeur sans pays, assignation ult√©rieure via m√©thodes d√©di√©es.
    /// </summary>
    /// <param name="createInventeurDto">Donn√©es cr√©ation inventeur de base</param>
    /// <returns>Inventeur cr√©√© avec identifiant syst√®me g√©n√©r√©</returns>
    public async Task<ApiResponse<InventeurDto>> CreateInventeurAsync(CreateInventeurDto createInventeurDto)
    {
        try
        {
            var inventeur = new Inventeur
            {
                Nom = createInventeurDto.Nom,
                Prenom = createInventeurDto.Prenom,
                Email = createInventeurDto.Email
            };

            _context.Inventeurs.Add(inventeur);
            await _context.SaveChangesAsync();

            var inventeurDto = new InventeurDto
            {
                Id = inventeur.Id,
                Nom = inventeur.Nom,
                Prenom = inventeur.Prenom,
                Email = inventeur.Email,
                Pays = new List<PaysDto>()
            };

            return new ApiResponse<InventeurDto>
            {
                Success = true,
                Data = inventeurDto,
                Message = "Inventeur cr√©√© avec succ√®s"
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<InventeurDto>
            {
                Success = false,
                Message = "Erreur lors de la cr√©ation de l'inventeur",
                Errors = ex.Message
            };
        }
    }

    /// <summary>
    /// Met √† jour inventeur existant avec nouvelles informations personnelles.
    /// Modification informations de base, gestion pays via m√©thodes sp√©cialis√©es.
    /// </summary>
    /// <param name="id">Identifiant inventeur √† modifier</param>
    /// <param name="updateInventeurDto">Nouvelles donn√©es personnelles inventeur</param>
    /// <returns>Inventeur modifi√© avec informations mises √† jour</returns>
    public async Task<ApiResponse<InventeurDto>> UpdateInventeurAsync(int id, UpdateInventeurDto updateInventeurDto)
    {
        try
        {
            var inventeur = await _context.Inventeurs.FindAsync(id);
            if (inventeur == null)
            {
                return new ApiResponse<InventeurDto>
                {
                    Success = false,
                    Message = "Inventeur non trouv√©"
                };
            }

            inventeur.Nom = updateInventeurDto.Nom;
            inventeur.Prenom = updateInventeurDto.Prenom;
            inventeur.Email = updateInventeurDto.Email;

            await _context.SaveChangesAsync();

            var inventeurDto = new InventeurDto
            {
                Id = inventeur.Id,
                Nom = inventeur.Nom,
                Prenom = inventeur.Prenom,
                Email = inventeur.Email,
                Pays = new List<PaysDto>()
            };

            return new ApiResponse<InventeurDto>
            {
                Success = true,
                Data = inventeurDto,
                Message = "Inventeur mis √† jour avec succ√®s"
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<InventeurDto>
            {
                Success = false,
                Message = "Erreur lors de la mise √† jour de l'inventeur",
                Errors = ex.Message
            };
        }
    }

    /// <summary>
    /// Supprime inventeur de mani√®re permanente avec relations associ√©es.
    /// V√©rification existence avant suppression avec gestion erreurs robuste.
    /// </summary>
    /// <param name="id">Identifiant inventeur √† supprimer</param>
    /// <returns>Confirmation succ√®s suppression inventeur</returns>
    public async Task<ApiResponse<bool>> DeleteInventeurAsync(int id)
    {
        try
        {
            var inventeur = await _context.Inventeurs.FindAsync(id);
            if (inventeur == null)
            {
                return new ApiResponse<bool>
                {
                    Success = false,
                    Message = "Inventeur non trouv√©"
                };
            }

            _context.Inventeurs.Remove(inventeur);
            await _context.SaveChangesAsync();

            return new ApiResponse<bool>
            {
                Success = true,
                Data = true,
                Message = "Inventeur supprim√© avec succ√®s"
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<bool>
            {
                Success = false,
                Message = "Erreur lors de la suppression de l'inventeur",
                Errors = ex.Message
            };
        }
    }

    /// <summary>
    /// R√©cup√®re liste compl√®te pays associ√©s √† inventeur sp√©cifique.
    /// Chargement optimis√© nationalit√©s multiples avec d√©tails pays complets.
    /// </summary>
    /// <param name="inventeurId">Identifiant inventeur pour recherche pays</param>
    /// <returns>Liste pays nationalit√©s inventeur avec codes ISO</returns>
    public async Task<ApiResponse<List<PaysDto>>> GetInventeurPaysAsync(int inventeurId)
    {
        try
        {
            var inventeurPays = await _context.InventeurPays
                .Include(ip => ip.Pays)
                .Where(ip => ip.IdInventeur == inventeurId)
                .ToListAsync();

            var paysDtos = inventeurPays.Select(ip => new PaysDto
            {
                Id = ip.Pays.Id,
                NomPays = ip.Pays.NomFrFr,
                CodePays = ip.Pays.CodeIso ?? "",
                CreatedAt = ip.Pays.CreatedAt
            }).ToList();

            return new ApiResponse<List<PaysDto>>
            {
                Success = true,
                Data = paysDtos,
                Message = $"{paysDtos.Count} pays trouv√©s pour cet inventeur"
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<List<PaysDto>>
            {
                Success = false,
                Message = "Erreur lors de la r√©cup√©ration des pays de l'inventeur",
                Errors = ex.Message
            };
        }
    }

    /// <summary>
    /// Assigne nouveau pays nationalit√© √† inventeur avec validation unicit√©.
    /// Cr√©ation relation Many-to-Many s√©curis√©e avec v√©rification existence pr√©alable.
    /// </summary>
    /// <param name="inventeurId">Identifiant inventeur cible assignation</param>
    /// <param name="paysId">Identifiant pays √† assigner comme nationalit√©</param>
    /// <returns>Confirmation succ√®s assignation pays inventeur</returns>
    public async Task<ApiResponse<bool>> AssignPaysToInventeurAsync(int inventeurId, int paysId)
    {
        try
        {
            var existingRelation = await _context.InventeurPays
                .FirstOrDefaultAsync(ip => ip.IdInventeur == inventeurId && ip.IdPays == paysId);

            if (existingRelation != null)
            {
                return new ApiResponse<bool>
                {
                    Success = false,
                    Message = "Ce pays est d√©j√† assign√© √† cet inventeur"
                };
            }

            var inventeurPays = new InventeurPays
            {
                IdInventeur = inventeurId,
                IdPays = paysId
            };

            _context.InventeurPays.Add(inventeurPays);
            await _context.SaveChangesAsync();

            return new ApiResponse<bool>
            {
                Success = true,
                Data = true,
                Message = "Pays assign√© √† l'inventeur avec succ√®s"
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<bool>
            {
                Success = false,
                Message = "Erreur lors de l'assignation du pays",
                Errors = ex.Message
            };
        }
    }

    /// <summary>
    /// Retire pays nationalit√© inventeur avec validation existence relation.
    /// Suppression relation Many-to-Many s√©curis√©e avec v√©rification pr√©alable.
    /// </summary>
    /// <param name="inventeurId">Identifiant inventeur cible retrait</param>
    /// <param name="paysId">Identifiant pays √† retirer des nationalit√©s</param>
    /// <returns>Confirmation succ√®s retrait pays inventeur</returns>
    public async Task<ApiResponse<bool>> RemovePaysFromInventeurAsync(int inventeurId, int paysId)
    {
        try
        {
            var inventeurPays = await _context.InventeurPays
                .FirstOrDefaultAsync(ip => ip.IdInventeur == inventeurId && ip.IdPays == paysId);

            if (inventeurPays == null)
            {
                return new ApiResponse<bool>
                {
                    Success = false,
                    Message = "Relation inventeur-pays non trouv√©e"
                };
            }

            _context.InventeurPays.Remove(inventeurPays);
            await _context.SaveChangesAsync();

            return new ApiResponse<bool>
            {
                Success = true,
                Data = true,
                Message = "Pays retir√© de l'inventeur avec succ√®s"
            };
        }
        catch (Exception ex)
        {
            return new ApiResponse<bool>
            {
                Success = false,
                Message = "Erreur lors du retrait du pays",
                Errors = ex.Message
            };
        }
    }
}
