/*
 * ================================================================================================
 * INTERFACE SERVICE CLIENTS - CONTRAT GESTION PORTFOLIO CLIENTS PROPRI√âT√â INTELLECTUELLE
 * ================================================================================================
 * 
 * OBJECTIF M√âTIER :
 * Interface contrat service clients StartingBloch d√©finissant gestion portfolio clients.
 * Sp√©cification m√©thodes administration clients avec comptes utilisateurs associ√©s.
 * 
 * FONCTIONNALIT√âS CONTRACTUELLES :
 * ================================
 * üìã CONSULTATION ‚Üí R√©cup√©ration clients avec pagination et recherche
 * üîç D√âTAIL ‚Üí Acc√®s client sp√©cifique avec informations compl√®tes
 * ‚ûï CR√âATION ‚Üí Nouveau client avec validation donn√©es
 * ‚úèÔ∏è MODIFICATION ‚Üí Mise √† jour client existant
 * üóëÔ∏è SUPPRESSION ‚Üí Suppression client avec gestion d√©pendances
 * üîç RECHERCHE ‚Üí Recherche textuelle avanc√©e multi-crit√®res
 * üë§ COMPTES ‚Üí Gestion comptes utilisateurs clients
 * 
 * GESTION COMPTES UTILISATEURS :
 * =============================
 * üîó ASSOCIATION ‚Üí Liaison clients avec comptes utilisateurs
 * üìä STATUT ‚Üí V√©rification √©tat compte utilisateur client
 * üìã ORPHELINS ‚Üí Identification clients sans compte utilisateur
 * üîç D√âTAIL ‚Üí Information compl√®te client avec statut compte
 * 
 * RECHERCHE ET FILTRAGE :
 * ======================
 * ‚úÖ Pagination optimis√©e pour navigation efficace
 * ‚úÖ Recherche textuelle multi-champs (nom, email, secteur)
 * ‚úÖ Filtrage par statut compte utilisateur
 * ‚úÖ Tri alphab√©tique par d√©faut
 * 
 * S√âCURIT√â ET PERMISSIONS :
 * ========================
 * ‚úÖ Isolation donn√©es clients selon permissions
 * ‚úÖ Validation existence avant op√©rations
 * ‚úÖ Audit trail complet modifications
 * ‚úÖ Protection donn√©es personnelles RGPD
 * 
 * CONFORMIT√â ARCHITECTURALE :
 * ==========================
 * ‚úÖ Pattern Repository avec abstraction compl√®te
 * ‚úÖ Injection d√©pendances via interface
 * ‚úÖ S√©paration responsabilit√©s m√©tier/donn√©es
 * ‚úÖ Testabilit√© maximale via contrats
 * ‚úÖ √âvolutivit√© garantie par d√©couplage
 * 
 * ================================================================================================
 */

using StartingBloch.Backend.DTOs;
using StartingBloch.Backend.Models;

namespace StartingBloch.Backend.Services;

/// <summary>
/// Interface service m√©tier gestion portfolio clients propri√©t√© intellectuelle.
/// Contrat complet op√©rations CRUD avec gestion comptes utilisateurs associ√©s.
/// </summary>
public interface IClientService
{
    /// <summary>
    /// R√©cup√®re liste pagin√©e clients avec navigation optimis√©e.
    /// Support pagination pour gestion efficace portfolios volumineux.
    /// </summary>
    /// <param name="page">Num√©ro page pour pagination (1 par d√©faut)</param>
    /// <param name="pageSize">Taille page pour limitation r√©sultats (10 par d√©faut)</param>
    /// <returns>R√©ponse pagin√©e clients avec m√©tadonn√©es navigation</returns>
    Task<PagedResponse<List<ClientDto>>> GetClientsAsync(int page = 1, int pageSize = 10);
    
    /// <summary>
    /// R√©cup√®re client sp√©cifique avec informations d√©taill√©es compl√®tes.
    /// Chargement optimis√© donn√©es client avec relations associ√©es.
    /// </summary>
    /// <param name="id">Identifiant unique client recherch√©</param>
    /// <returns>Client d√©taill√© avec informations compl√®tes ou erreur</returns>
    Task<ApiResponse<ClientDto>> GetClientByIdAsync(int id);
    
    /// <summary>
    /// Cr√©e nouveau client avec validation donn√©es et audit trail.
    /// Initialisation client avec informations de base et m√©tadonn√©es.
    /// </summary>
    /// <param name="createClientDto">Donn√©es cr√©ation client compl√®tes</param>
    /// <returns>Client cr√©√© avec identifiant syst√®me g√©n√©r√©</returns>
    Task<ApiResponse<ClientDto>> CreateClientAsync(CreateClientDto createClientDto);
    
    /// <summary>
    /// Met √† jour client existant avec validation et pr√©servation historique.
    /// Modification informations client avec audit trail automatique.
    /// </summary>
    /// <param name="id">Identifiant client √† modifier</param>
    /// <param name="updateClientDto">Nouvelles donn√©es client partielles</param>
    /// <returns>Client modifi√© avec informations mises √† jour</returns>
    Task<ApiResponse<ClientDto>> UpdateClientAsync(int id, CreateClientDto updateClientDto);
    
    /// <summary>
    /// Supprime client avec gestion relations d√©pendantes et audit.
    /// V√©rification contraintes avant suppression d√©finitive.
    /// </summary>
    /// <param name="id">Identifiant client √† supprimer</param>
    /// <returns>Confirmation succ√®s suppression avec audit</returns>
    Task<ApiResponse<bool>> DeleteClientAsync(int id);
    
    /// <summary>
    /// Recherche textuelle avanc√©e clients avec matching multi-champs.
    /// Recherche optimis√©e nom, email, secteur activit√© avec pertinence.
    /// </summary>
    /// <param name="searchTerm">Terme recherche pour matching multi-champs</param>
    /// <returns>Liste clients correspondants avec score pertinence</returns>
    Task<ApiResponse<List<ClientDto>>> SearchClientsAsync(string searchTerm);
    
    /// <summary>
    /// R√©cup√®re clients sans compte utilisateur associ√© pour identification.
    /// Recherche clients orphelins n√©cessitant cr√©ation compte utilisateur.
    /// </summary>
    /// <returns>Liste clients sans compte utilisateur avec d√©tails</returns>
    Task<ApiResponse<List<ClientDto>>> GetClientsWithoutUserAccountAsync();
    
    /// <summary>
    /// V√©rifie existence compte utilisateur pour client sp√©cifique.
    /// Contr√¥le association client-utilisateur pour gestion acc√®s.
    /// </summary>
    /// <param name="clientId">Identifiant client pour v√©rification compte</param>
    /// <returns>Statut bool√©en existence compte utilisateur client</returns>
    Task<ApiResponse<bool>> ClientHasUserAccountAsync(int clientId);
    
    /// <summary>
    /// R√©cup√®re client avec statut d√©taill√© compte utilisateur associ√©.
    /// Information compl√®te client enrichie statut compte et permissions.
    /// </summary>
    /// <param name="clientId">Identifiant client pour information compl√®te</param>
    /// <returns>Client avec statut compte utilisateur d√©taill√©</returns>
    Task<ApiResponse<ClientWithUserStatusDto>> GetClientWithUserStatusAsync(int clientId);
}
