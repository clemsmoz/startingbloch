/*
 * ================================================================================================
 * STAR// *** √âTAPE 8: ROUTAGE ET ENDPOINTS ***
// Mappage des contr√¥leurs - Activation des routes API
app.MapControllers();

// *** ENDPOINT DE SANT√â SYST√àME ***
// Point de contr√¥le pour monitoring et load balancers
// Accessible sans authentification pour les checks automatiques
app.MapGet("/api/health", () => new { 
    status = "healthy", 
    timestamp = DateTime.UtcNow,
    version = "1.0.0",
    database = "SQLite",
    framework = ".NET 8"
}).AllowAnonymous();

// ================================================================================================
// INITIALISATION DE LA BASE DE DONN√âES
// ================================================================================================

// *** MIGRATION ET CR√âATION DE LA BASE AUTOMATIQUE ***
// Assure que la base de donn√©es SQLite existe et est √† jour au d√©marrage
// Utilisation d'un scope pour √©viter les fuites m√©moire
using (var scope = app.Services.CreateScope())
{
    var context = scope.ServiceProvider.GetRequiredService<StartingBlochDbContext>();
    await context.Database.EnsureCreatedAsync();
}

// ================================================================================================
// D√âMARRAGE DE L'APPLICATION
// ================================================================================================

// Lancement du serveur web avec tous les middlewares configur√©s
app.Run();I - POINT D'ENTR√âE PRINCIPAL
 * ================================================================================================
 * 
 * Description: Configuration et d√©marrage de l'API REST pour la gestion des brevets d'entreprise.
 * 
 * Fonctionnalit√©s principales:
 * - Gestion des brevets et de leur cycle de vie
 * - Syst√®me d'authentification JWT s√©curis√©
 * - Interface multi-clients avec isolation des donn√©es
 * - Audit trail complet pour conformit√© RGPD
 * - Protection contre les attaques (Rate limiting, XSS, CSRF, etc.)
 * 
 * Architecture:
 * - .NET 8 avec Entity Framework Core
 * - Base de donn√©es SQLite pour d√©veloppement
 * - Logging avanc√© avec Serilog
 * - Validation avec FluentValidation
 * - S√©curit√© multi-couches (8 niveaux de protection)
 * 
 * Auteur: StartingBloch Team
 * Derni√®re mise √† jour: 2025-07-28
 * ================================================================================================
 */

using Microsoft.EntityFrameworkCore;
using StartingBloch.Backend.Data;
using StartingBloch.Backend.Extensions;
using StartingBloch.Backend.Middleware;
using StartingBloch.Backend.Configuration;
using System.Text.Json.Serialization;
using AspNetCoreRateLimit;
using Serilog;
using DotNetEnv;

// ================================================================================================
// CONFIGURATION DE L'APPLICATION
// ================================================================================================

var builder = WebApplication.CreateBuilder(args);

// *** CHARGEMENT DES VARIABLES D'ENVIRONNEMENT ***
// Chargement du fichier .env pour les variables de configuration
Env.Load();

// *** CONFIGURATION PERSONNALIS√âE AVEC VARIABLES D'ENVIRONNEMENT ***
// Remplacement des placeholders ${VAR} dans appsettings.json
builder.Configuration.AddInMemoryCollection(new Dictionary<string, string?>
{
    ["Jwt:Secret"] = Environment.GetEnvironmentVariable("JWT_SECRET"),
    ["Jwt:Issuer"] = Environment.GetEnvironmentVariable("JWT_ISSUER"),
    ["Jwt:Audience"] = Environment.GetEnvironmentVariable("JWT_AUDIENCE"),
    ["Jwt:ExpireMinutes"] = Environment.GetEnvironmentVariable("JWT_EXPIRE_MINUTES"),
    ["Security:EnableRateLimiting"] = Environment.GetEnvironmentVariable("ENABLE_RATE_LIMITING"),
    ["Security:MaxRequestsPerMinute"] = Environment.GetEnvironmentVariable("MAX_REQUESTS_PER_MINUTE"),
    ["Security:EnableHttpsRedirect"] = Environment.GetEnvironmentVariable("ENABLE_HTTPS_REDIRECT")
});

// *** √âTAPE 1: CONFIGURATION SERILOG (LOGGING S√âCURIS√â) ***
// Configuration du syst√®me de logging avanc√© avant tout autre service
// Permet de capturer tous les √©v√©nements de s√©curit√© et erreurs d√®s le d√©marrage
SerilogConfiguration.ConfigureSerilog(builder);
builder.Host.UseSerilog();

// *** √âTAPE 2: CONFIGURATION DES SERVICES CORE ***
// Configuration des contr√¥leurs avec options JSON optimis√©es
builder.Services.AddControllers()
    .AddJsonOptions(options =>
    {
        // √âvite les r√©f√©rences circulaires dans la s√©rialisation JSON
        options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;
        // Conserve les noms de propri√©t√©s originaux (pas de camelCase automatique)
        options.JsonSerializerOptions.PropertyNamingPolicy = null;
    });

// *** √âTAPE 3: CONFIGURATION DES SERVICES M√âTIER ***
// Ajout de tous les services business, s√©curit√©, base de donn√©es via extension
// Voir ServiceCollectionExtensions.cs pour le d√©tail de la configuration
builder.Services.AddApplicationServices(builder.Configuration);

// ================================================================================================
// PIPELINE DE TRAITEMENT DES REQU√äTES (MIDDLEWARE)
// ================================================================================================

var app = builder.Build();

// *** √âTAPE 4: CONFIGURATION ENVIRONNEMENT DE D√âVELOPPEMENT ***
// Pipeline des middlewares - ORDRE CRITIQUE pour la s√©curit√©
if (app.Environment.IsDevelopment())
{
    // Documentation API Swagger uniquement en d√©veloppement
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "StartingBloch API v1");
        c.RoutePrefix = "swagger";
    });
}
else
{
    // *** PRODUCTION: REDIRECTION HTTPS OBLIGATOIRE ***
    // Force toutes les connexions en HTTPS pour s√©curiser les √©changes
    app.UseHttpsRedirection();
}

// *** √âTAPE 5: MIDDLEWARES DE S√âCURIT√â (ORDRE CRITIQUE!) ***
// 1. Headers de s√©curit√© (XSS, CSRF, Clickjacking protection)
app.UseMiddleware<SecurityHeadersMiddleware>();

// 2. Monitoring de s√©curit√© (d√©tection d'intrusion en temps r√©el)
app.UseMiddleware<SecurityMonitoringMiddleware>();

// 3. Logging des requ√™tes (audit trail pour conformit√©)
app.UseMiddleware<RequestLoggingMiddleware>();

// *** √âTAPE 6: CONTR√îLES D'ACC√àS ET LIMITATION ***
// 4. Rate Limiting - Protection anti-DDoS (AVANT CORS et Authentication)
app.UseIpRateLimiting();

// 5. CORS - Politique de partage inter-domaines (APR√àS Rate Limiting)
app.UseCors("AllowReactApp");

// *** √âTAPE 7: AUTHENTIFICATION ET AUTORISATION ***
// 6. Authentification JWT (validation des tokens)
app.UseAuthentication();

// 7. Autorisation (v√©rification des permissions)
app.UseAuthorization();

// Mappage des contr√¥leurs
app.MapControllers();

// Endpoint de sant√© s√©curis√©
app.MapGet("/api/health", () => new { 
    status = "healthy", 
    timestamp = DateTime.UtcNow,
    version = "1.0.0",
    database = "SQLite",
    framework = ".NET 8"
}).AllowAnonymous();

// Initialisation de la base de donn√©es
using (var scope = app.Services.CreateScope())
{
    var context = scope.ServiceProvider.GetRequiredService<StartingBlochDbContext>();
    await context.Database.EnsureCreatedAsync();
    
    // Seed des donn√©es de test massives uniquement si argument --seed-massive
    if (args.Contains("--seed-massive"))
    {
        Console.WriteLine("üå± Initialisation des donn√©es de test...");
        await SeedMassiveData.SeedAsync(context);
        Console.WriteLine("‚úÖ Seed des donn√©es de test termin√© !");
        return; // Arr√™ter l'application apr√®s le seed
    }
}

await app.RunAsync();

// Classe Program publique pour tests d'int√©gration
public partial class Program { }
