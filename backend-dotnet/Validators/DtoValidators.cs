/*
 * ================================================================================================
 * VALIDATORS DTO - VALIDATION DONN√âES PROPRI√âT√â INTELLECTUELLE
 * ================================================================================================
 * 
 * OBJECTIF :
 * Valide les donn√©es d'entr√©e des DTOs pour l'API de gestion de propri√©t√© intellectuelle
 * avec protection contre injection SQL, XSS et donn√©es malform√©es selon standards OWASP.
 * 
 * ARCHITECTURE VALIDATION :
 * ========================
 * 
 * üõ°Ô∏è PROTECTION MULTI-COUCHES :
 *    - FluentValidation pour r√®gles m√©tier complexes
 *    - Expressions r√©guli√®res pour formats sp√©cifiques
 *    - Validation conditionnelle selon contexte
 *    - Messages d'erreur localis√©s fran√ßais
 * 
 * üè¢ ENTIT√âS VALID√âES :
 *    - CreateClientDto : Donn√©es clients propri√©t√© intellectuelle
 *    - CreateContactDto : Contacts professionnels PI
 *    [Extensible pour autres DTOs : brevets, inventeurs, etc.]
 * 
 * üîç CONTR√îLES IMPL√âMENT√âS :
 *    - Champs obligatoires (NotEmpty)
 *    - Longueurs maximales (s√©curit√© buffer overflow)
 *    - Formats email valides (anti-injection)
 *    - Num√©ros t√©l√©phone internationaux (regex stricte)
 *    - IDs positifs (coh√©rence r√©f√©rentielle)
 * 
 * S√âCURIT√â ET CONFORMIT√â :
 * =======================
 * ‚úÖ OWASP Input Validation (protection injection)
 * ‚úÖ RGPD donn√©es personnelles (formats valid√©s)
 * ‚úÖ Standards propri√©t√© intellectuelle
 * ‚úÖ Validation c√¥t√© serveur (s√©curit√© critique)
 * 
 * PATTERNS UTILIS√âS :
 * ==================
 * - FluentValidation avec r√®gles cha√Æn√©es
 * - Validation conditionnelle (When clauses)
 * - Messages d'erreur centralis√©s
 * - R√®gles r√©utilisables et extensibles
 * 
 * ================================================================================================
 */

using FluentValidation;
using StartingBloch.Backend.DTOs;

namespace StartingBloch.Backend.Validators;

// ================================================================================================
// VALIDATORS ENTIT√âS CLIENTS PROPRI√âT√â INTELLECTUELLE
// ================================================================================================

/// <summary>
/// Validator pour la cr√©ation d'un nouveau client dans le syst√®me de propri√©t√© intellectuelle.
/// Valide donn√©es essentielles : nom, email, t√©l√©phone selon standards m√©tier et s√©curit√©.
/// 
/// R√àGLES M√âTIER :
/// - Nom obligatoire et limit√© (√©vite d√©bordement)
/// - Email optionnel mais format strict si fourni
/// - T√©l√©phone optionnel avec validation internationale
/// </summary>
public class CreateClientDtoValidator : AbstractValidator<CreateClientDto>
{
    /// <summary>
    /// Configure les r√®gles de validation pour cr√©ation client.
    /// Applique contr√¥les s√©curit√© et coh√©rence m√©tier propri√©t√© intellectuelle.
    /// </summary>
    public CreateClientDtoValidator()
    {
        // Validation nom client (obligatoire pour identification)
        RuleFor(x => x.NomClient)
            .NotEmpty()
            .WithMessage("Le nom du client est obligatoire")
            .MaximumLength(100)
            .WithMessage("Le nom du client ne peut pas d√©passer 100 caract√®res");

        // Validation email (optionnel mais format strict)
        RuleFor(x => x.EmailClient)
            .EmailAddress()
            .When(x => !string.IsNullOrEmpty(x.EmailClient))
            .WithMessage("L'email doit √™tre valide");

        // Validation t√©l√©phone (format international avec caract√®res autoris√©s)
        RuleFor(x => x.TelephoneClient)
            .Matches(@"^[\d\s\-\+\(\)\.]{8,20}$")
            .When(x => !string.IsNullOrEmpty(x.TelephoneClient))
            .WithMessage("Le num√©ro de t√©l√©phone n'est pas valide");
    }
}

// ================================================================================================
// VALIDATORS CONTACTS PROFESSIONNELS PROPRI√âT√â INTELLECTUELLE
// ================================================================================================

/// <summary>
/// Validator pour la cr√©ation d'un contact professionnel li√© √† un client.
/// Valide identit√© compl√®te et liaison client pour coh√©rence relationnelle.
/// 
/// R√àGLES M√âTIER :
/// - Nom et pr√©nom obligatoires (identification compl√®te)
/// - Longueurs limit√©es (s√©curit√© et performance)
/// - ID client valide (coh√©rence r√©f√©rentielle)
/// </summary>
public class CreateContactDtoValidator : AbstractValidator<CreateContactDto>
{
    /// <summary>
    /// Configure les r√®gles de validation pour cr√©ation contact.
    /// Assure identit√© compl√®te et liaison client valide.
    /// </summary>
    public CreateContactDtoValidator()
    {
        // Validation nom contact (obligatoire pour identification)
        RuleFor(x => x.Nom)
            .NotEmpty()
            .WithMessage("Le nom est obligatoire")
            .MaximumLength(50)
            .WithMessage("Le nom ne peut pas d√©passer 50 caract√®res");

        // Validation pr√©nom contact (obligatoire pour identification compl√®te)
        RuleFor(x => x.Prenom)
            .NotEmpty()
            .WithMessage("Le pr√©nom est obligatoire")
            .MaximumLength(50)
            .WithMessage("Le pr√©nom ne peut pas d√©passer 50 caract√®res");

        // Validation liaison client (coh√©rence r√©f√©rentielle)
        RuleFor(x => x.IdClient)
            .GreaterThan(0)
            .WithMessage("L'ID du client doit √™tre valide");
    }
}
