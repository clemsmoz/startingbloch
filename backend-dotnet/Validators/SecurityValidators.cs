/*
 * ================================================================================================
 * VALIDATORS S√âCURIT√â - PROTECTION AUTHENTIFICATION ET AUTORISATION
 * ================================================================================================
 * 
 * OBJECTIF :
 * Valide les donn√©es critiques d'authentification et gestion utilisateurs pour l'API
 * de propri√©t√© intellectuelle avec conformit√© standards s√©curit√© et r√©glementations.
 * 
 * ARCHITECTURE S√âCURIT√â :
 * =======================
 * 
 * üîê AUTHENTIFICATION RENFORC√âE :
 *    - Validation credentials avec longueurs s√©curis√©es
 *    - Protection brute force par limitation tentatives
 *    - Formats stricts pour √©viter injection
 * 
 * üõ°Ô∏è MOTS DE PASSE S√âCURIS√âS :
 *    - Longueur minimum 8 caract√®res (ANSSI/NIST)
 *    - Complexit√© obligatoire : majuscules, minuscules, chiffres, symboles
 *    - Validation changement avec ancien mot de passe
 *    - Patterns regex pour v√©rification robuste
 * 
 * üë§ GESTION UTILISATEURS :
 *    - Emails valides format RFC 5322
 *    - Usernames longueur contr√¥l√©e
 *    - R√¥les m√©tier stricts (admin/user)
 *    - Validation compl√®te cr√©ation comptes
 * 
 * CONFORMIT√â R√âGLEMENTAIRE :
 * ==========================
 * ‚úÖ ANSSI (Agence Nationale S√©curit√© Syst√®mes Information)
 * ‚úÖ NIST Cybersecurity Framework
 * ‚úÖ RGPD protection donn√©es authentification
 * ‚úÖ ISO 27001 gestion acc√®s et identit√©s
 * ‚úÖ Standards propri√©t√© intellectuelle (confidentialit√©)
 * 
 * PROTECTION CONTRE ATTAQUES :
 * ============================
 * üö´ Injection SQL (validation stricte entr√©es)
 * üö´ Brute Force (complexit√© mots de passe)
 * üö´ Dictionary Attacks (caract√®res sp√©ciaux obligatoires)
 * üö´ Rainbow Tables (longueur et complexit√©)
 * üö´ Social Engineering (validation formats stricts)
 * 
 * ================================================================================================
 */

using FluentValidation;
using StartingBloch.Backend.DTOs;

namespace StartingBloch.Backend.Validators;

// ================================================================================================
// VALIDATORS AUTHENTIFICATION S√âCURIS√âE
// ================================================================================================

/// <summary>
/// Validator pour les requ√™tes de connexion au syst√®me de propri√©t√© intellectuelle.
/// Valide credentials avec protection contre brute force et injection.
/// 
/// S√âCURIT√â :
/// - Username limit√© (anti-buffer overflow)
/// - Password obligatoire (anti-bypass)
/// - Validation c√¥t√© serveur critique
/// </summary>
public class LoginRequestValidator : AbstractValidator<LoginDto>
{
    /// <summary>
    /// Configure validation credentials pour authentification s√©curis√©e.
    /// Applique limites s√©curit√© sans r√©v√©ler politique mots de passe.
    /// </summary>
    public LoginRequestValidator()
    {
        // Validation username (anti-injection, longueur s√©curis√©e)
        RuleFor(x => x.Username)
            .NotEmpty().WithMessage("Le nom d'utilisateur est requis.")
            .MaximumLength(255).WithMessage("Le nom d'utilisateur ne peut pas d√©passer 255 caract√®res.");

        // Validation password (obligatoire, longueur minimum s√©curit√©)
        RuleFor(x => x.Password)
            .NotEmpty().WithMessage("Le mot de passe est requis.")
            .MinimumLength(1).WithMessage("Le mot de passe est requis.");
    }
}

// ================================================================================================
// VALIDATORS CHANGEMENT MOTS DE PASSE S√âCURIS√âS
// ================================================================================================

/// <summary>
/// Validator pour changement de mot de passe avec politique de s√©curit√© renforc√©e.
/// Impl√©mente standards ANSSI/NIST pour mots de passe robustes propri√©t√© intellectuelle.
/// 
/// POLITIQUE S√âCURIT√â :
/// - Ancien mot de passe requis (authentification)
/// - Nouveau mot de passe complexit√© maximale
/// - 4 types caract√®res obligatoires (s√©curit√© optimale)
/// </summary>
public class ChangePasswordValidator : AbstractValidator<ChangePasswordDto>
{
    /// <summary>
    /// Configure validation changement mot de passe selon standards s√©curit√©.
    /// Applique politique complexit√© ANSSI pour protection secrets industriels.
    /// </summary>
    public ChangePasswordValidator()
    {
        // Validation ancien mot de passe (authentification requise)
        RuleFor(x => x.OldPassword)
            .NotEmpty().WithMessage("Le mot de passe actuel est requis.");

        // Validation nouveau mot de passe (politique s√©curit√© renforc√©e)
        RuleFor(x => x.NewPassword)
            .NotEmpty().WithMessage("Le nouveau mot de passe est requis.")
            .MinimumLength(8).WithMessage("Le nouveau mot de passe doit contenir au moins 8 caract√®res.")
            .Matches(@"[A-Z]").WithMessage("Le nouveau mot de passe doit contenir au moins une majuscule.")
            .Matches(@"[a-z]").WithMessage("Le nouveau mot de passe doit contenir au moins une minuscule.")
            .Matches(@"[0-9]").WithMessage("Le nouveau mot de passe doit contenir au moins un chiffre.")
            .Matches(@"[!@#$%^&*()_+\-=\[\]{};':""\\|,.<>\/?]").WithMessage("Le nouveau mot de passe doit contenir au moins un caract√®re sp√©cial.");
    }
}

// ================================================================================================
// VALIDATORS CR√âATION UTILISATEURS S√âCURIS√âE
// ================================================================================================

/// <summary>
/// Validator pour cr√©ation nouveaux utilisateurs avec validation compl√®te identit√©.
/// Assure coh√©rence donn√©es et s√©curit√© acc√®s selon r√¥les m√©tier propri√©t√© intellectuelle.
/// 
/// CONTR√îLES M√âTIER :
/// - Email format RFC 5322 strict
/// - Username limit√© et unique
/// - Password politique s√©curit√© maximale
/// - R√¥les m√©tier contr√¥l√©s (admin/user)
/// </summary>
public class CreateUserValidator : AbstractValidator<CreateUserDto>
{
    /// <summary>
    /// Configure validation cr√©ation utilisateur avec s√©curit√© renforc√©e.
    /// Applique contr√¥les identit√© et politique mots de passe selon standards.
    /// </summary>
    public CreateUserValidator()
    {
        // Validation email (format strict RFC 5322)
        RuleFor(x => x.Email)
            .NotEmpty().WithMessage("L'email est requis.")
            .EmailAddress().WithMessage("L'email doit √™tre valide.")
            .MaximumLength(255).WithMessage("L'email ne peut pas d√©passer 255 caract√®res.");

        // Validation username (identification unique, longueur contr√¥l√©e)
        RuleFor(x => x.Username)
            .NotEmpty().WithMessage("Le nom d'utilisateur est requis.")
            .MaximumLength(100).WithMessage("Le nom d'utilisateur ne peut pas d√©passer 100 caract√®res.");

        // Validation password (politique s√©curit√© compl√®te)
        RuleFor(x => x.Password)
            .NotEmpty().WithMessage("Le mot de passe est requis.")
            .MinimumLength(8).WithMessage("Le mot de passe doit contenir au moins 8 caract√®res.")
            .Matches(@"[A-Z]").WithMessage("Le mot de passe doit contenir au moins une majuscule.")
            .Matches(@"[a-z]").WithMessage("Le mot de passe doit contenir au moins une minuscule.")
            .Matches(@"[0-9]").WithMessage("Le mot de passe doit contenir au moins un chiffre.")
            .Matches(@"[!@#$%^&*()_+\-=\[\]{};':""\\|,.<>\/?]").WithMessage("Le mot de passe doit contenir au moins un caract√®re sp√©cial.");

        // Validation r√¥le m√©tier (contr√¥le autorisation stricte)
        RuleFor(x => x.Role)
            .NotEmpty().WithMessage("Le r√¥le est requis.")
            .Must(x => x == "admin" || x == "user").WithMessage("Le r√¥le doit √™tre 'admin' ou 'user'.");
    }
}
