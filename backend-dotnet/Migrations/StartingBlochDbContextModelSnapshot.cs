// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StartingBloch.Backend.Data;

#nullable disable

namespace StartingBloch.Backend.Migrations
{
    [DbContext(typeof(StartingBlochDbContext))]
    partial class StartingBlochDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("StartingBloch.Backend.Models.Brevet", b =>
                {
                    b.Property<int>("IdBrevet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_brevet");

                    b.Property<string>("Commentaire")
                        .HasColumnType("TEXT")
                        .HasColumnName("commentaire");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt");

                    b.Property<string>("ReferenceFamille")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("reference_famille");

                    b.Property<string>("Titre")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("titre");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updatedAt");

                    b.HasKey("IdBrevet");

                    b.HasIndex("ReferenceFamille")
                        .HasDatabaseName("IX_Brevets_ReferenceFamille");

                    b.ToTable("Brevets");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.BrevetCabinet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt");

                    b.Property<int>("IdBrevet")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_brevet");

                    b.Property<int>("IdCabinet")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_cabinet");

                    b.HasKey("Id");

                    b.HasIndex("IdBrevet");

                    b.HasIndex("IdCabinet");

                    b.ToTable("BrevetCabinets");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.BrevetClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt");

                    b.Property<int>("IdBrevet")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_brevet");

                    b.Property<int>("IdClient")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_client");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdBrevet", "IdClient")
                        .IsUnique()
                        .HasDatabaseName("IX_BrevetClients_Unique");

                    b.ToTable("BrevetClients");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.BrevetDeposant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt");

                    b.Property<int>("IdBrevet")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_brevet");

                    b.Property<int>("IdDeposant")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_deposant");

                    b.HasKey("Id");

                    b.HasIndex("IdDeposant");

                    b.HasIndex("IdBrevet", "IdDeposant")
                        .IsUnique()
                        .HasDatabaseName("IX_BrevetDeposants_Unique");

                    b.ToTable("BrevetDeposants");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.BrevetInventeur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt");

                    b.Property<int>("IdBrevet")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_brevet");

                    b.Property<int>("IdInventeur")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_inventeur");

                    b.HasKey("Id");

                    b.HasIndex("IdInventeur");

                    b.HasIndex("IdBrevet", "IdInventeur")
                        .IsUnique()
                        .HasDatabaseName("IX_BrevetInventeurs_Unique");

                    b.ToTable("BrevetInventeurs");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.BrevetTitulaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt");

                    b.Property<int>("IdBrevet")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_brevet");

                    b.Property<int>("IdTitulaire")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_titulaire");

                    b.HasKey("Id");

                    b.HasIndex("IdTitulaire");

                    b.HasIndex("IdBrevet", "IdTitulaire")
                        .IsUnique()
                        .HasDatabaseName("IX_BrevetTitulaires_Unique");

                    b.ToTable("BrevetTitulaires");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Cabinet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("AdresseCabinet")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("adresse_cabinet");

                    b.Property<string>("CodePostal")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("code_postal");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt");

                    b.Property<string>("EmailCabinet")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("email_cabinet");

                    b.Property<string>("NomCabinet")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("nom_cabinet");

                    b.Property<string>("PaysCabinet")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("pays_cabinet");

                    b.Property<string>("TelephoneCabinet")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("telephone_cabinet");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.ToTable("Cabinets");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("AdresseClient")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("adresse_client");

                    b.Property<bool>("CanRead")
                        .HasColumnType("INTEGER")
                        .HasColumnName("can_read");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("INTEGER")
                        .HasColumnName("can_write");

                    b.Property<string>("CodePostal")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("code_postal");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt");

                    b.Property<string>("EmailClient")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("email_client");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_blocked");

                    b.Property<string>("NomClient")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("nom_client");

                    b.Property<string>("PaysClient")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("pays_client");

                    b.Property<string>("ReferenceClient")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("reference_client");

                    b.Property<string>("TelephoneClient")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("telephone_client");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.HasIndex("NomClient")
                        .HasDatabaseName("IX_Clients_NomClient");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.ClientCabinet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CabinetId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CabinetId");

                    b.HasIndex("ClientId", "CabinetId")
                        .IsUnique()
                        .HasDatabaseName("IX_ClientCabinets_Unique");

                    b.ToTable("ClientCabinets");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("EmailsJson")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("emails_json");

                    b.Property<int?>("IdCabinet")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_cabinet");

                    b.Property<int?>("IdClient")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_client");

                    b.Property<string>("Nom")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("nom");

                    b.Property<string>("PhonesJson")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("phones_json");

                    b.Property<string>("Prenom")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("prenom");

                    b.Property<string>("Role")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("role");

                    b.Property<string>("RolesJson")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("roles_json");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("telephone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.HasIndex("IdCabinet");

                    b.HasIndex("IdClient");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Deposant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Adresse")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("adresse");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Nom")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("nom");

                    b.Property<string>("Prenom")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("prenom");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("telephone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.ToTable("Deposants");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.DeposantPays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt");

                    b.Property<int>("IdDeposant")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_deposant");

                    b.Property<int>("IdPays")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_pays");

                    b.HasKey("Id");

                    b.HasIndex("IdDeposant");

                    b.HasIndex("IdPays");

                    b.ToTable("DeposantPays");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.InformationDepot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Commentaire")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("commentaire");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt");

                    b.Property<DateTime?>("DateDelivrance")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_delivrance");

                    b.Property<DateTime?>("DateDepot")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_depot");

                    b.Property<DateTime?>("DatePublication")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_publication");

                    b.Property<int>("IdBrevet")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_brevet");

                    b.Property<int?>("IdPays")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_pays");

                    b.Property<int?>("IdStatuts")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_statuts");

                    b.Property<bool>("Licence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("licence");

                    b.Property<string>("NumeroDelivrance")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("numero_delivrance");

                    b.Property<string>("NumeroDepot")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("numero_depot");

                    b.Property<string>("NumeroPublication")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("numero_publication");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.HasIndex("IdBrevet");

                    b.HasIndex("IdPays");

                    b.HasIndex("IdStatuts");

                    b.ToTable("InformationsDepot");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Inventeur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Adresse")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("adresse");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Nom")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("nom");

                    b.Property<string>("Prenom")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("prenom");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("telephone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.ToTable("Inventeurs");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.InventeurPays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt");

                    b.Property<int>("IdInventeur")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_inventeur");

                    b.Property<int>("IdPays")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_pays");

                    b.HasKey("Id");

                    b.HasIndex("IdInventeur");

                    b.HasIndex("IdPays");

                    b.ToTable("InventeurPays");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("action");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT")
                        .HasColumnName("details");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnName("ip_address");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("level");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("message");

                    b.Property<string>("NewValues")
                        .HasColumnType("TEXT")
                        .HasColumnName("new_values");

                    b.Property<string>("OldValues")
                        .HasColumnType("TEXT")
                        .HasColumnName("old_values");

                    b.Property<int?>("RecordId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("record_id");

                    b.Property<string>("TableName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("table_name");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT")
                        .HasColumnName("timestamp");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_agent");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.NumeroPays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_active");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("numero");

                    b.Property<string>("PaysCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("pays_code");

                    b.Property<int?>("PaysId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PaysId");

                    b.ToTable("NumeroPays");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Pays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("CodeIso")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("code_iso");

                    b.Property<string>("CodeIso3")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("code_iso3");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt");

                    b.Property<string>("NomFrFr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("nom_fr_fr");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.ToTable("Pays");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_Name");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 4, 16, 25, 58, 465, DateTimeKind.Utc).AddTicks(4015),
                            Description = "Employé StartingBloch - Administrateur avec accès complet et gestion des utilisateurs",
                            Name = "admin",
                            UpdatedAt = new DateTime(2025, 8, 4, 16, 25, 58, 465, DateTimeKind.Utc).AddTicks(4017)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 4, 16, 25, 58, 465, DateTimeKind.Utc).AddTicks(4020),
                            Description = "Employé StartingBloch - Utilisateur standard avec droits configurables",
                            Name = "user",
                            UpdatedAt = new DateTime(2025, 8, 4, 16, 25, 58, 465, DateTimeKind.Utc).AddTicks(4020)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 4, 16, 25, 58, 465, DateTimeKind.Utc).AddTicks(4021),
                            Description = "Client StartingBloch - Accès restreint à ses propres brevets uniquement",
                            Name = "client",
                            UpdatedAt = new DateTime(2025, 8, 4, 16, 25, 58, 465, DateTimeKind.Utc).AddTicks(4021)
                        });
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Statuts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.ToTable("Statuts");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Titulaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Adresse")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("adresse");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Nom")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("nom");

                    b.Property<string>("Prenom")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("prenom");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("telephone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.ToTable("Titulaires");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.TitulairePays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt");

                    b.Property<int>("IdPays")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_pays");

                    b.Property<int>("IdTitulaire")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_titulaire");

                    b.HasKey("Id");

                    b.HasIndex("IdPays");

                    b.HasIndex("IdTitulaire");

                    b.ToTable("TitulairePays");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("CanRead")
                        .HasColumnType("INTEGER")
                        .HasColumnName("canRead");

                    b.Property<bool>("CanWrite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("canWrite");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("clientId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("createdAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasColumnName("isActive");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("INTEGER")
                        .HasColumnName("isBlocked");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("TEXT")
                        .HasColumnName("lastLogin");

                    b.Property<string>("Nom")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("nom");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<string>("Prenom")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("prenom");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("user")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updatedAt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("IX_Users_ClientId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId", "ClientId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserRoles_Unique");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.BrevetCabinet", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Brevet", "Brevet")
                        .WithMany("BrevetCabinets")
                        .HasForeignKey("IdBrevet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartingBloch.Backend.Models.Cabinet", "Cabinet")
                        .WithMany("BrevetCabinets")
                        .HasForeignKey("IdCabinet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brevet");

                    b.Navigation("Cabinet");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.BrevetClient", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Brevet", "Brevet")
                        .WithMany("BrevetClients")
                        .HasForeignKey("IdBrevet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartingBloch.Backend.Models.Client", "Client")
                        .WithMany("BrevetClients")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brevet");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.BrevetDeposant", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Brevet", "Brevet")
                        .WithMany("BrevetDeposants")
                        .HasForeignKey("IdBrevet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartingBloch.Backend.Models.Deposant", "Deposant")
                        .WithMany("BrevetDeposants")
                        .HasForeignKey("IdDeposant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brevet");

                    b.Navigation("Deposant");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.BrevetInventeur", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Brevet", "Brevet")
                        .WithMany("BrevetInventeurs")
                        .HasForeignKey("IdBrevet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartingBloch.Backend.Models.Inventeur", "Inventeur")
                        .WithMany("BrevetInventeurs")
                        .HasForeignKey("IdInventeur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brevet");

                    b.Navigation("Inventeur");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.BrevetTitulaire", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Brevet", "Brevet")
                        .WithMany("BrevetTitulaires")
                        .HasForeignKey("IdBrevet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartingBloch.Backend.Models.Titulaire", "Titulaire")
                        .WithMany("BrevetTitulaires")
                        .HasForeignKey("IdTitulaire")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brevet");

                    b.Navigation("Titulaire");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.ClientCabinet", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Cabinet", "Cabinet")
                        .WithMany("ClientCabinets")
                        .HasForeignKey("CabinetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartingBloch.Backend.Models.Client", "Client")
                        .WithMany("ClientCabinets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cabinet");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Contact", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Cabinet", "Cabinet")
                        .WithMany("Contacts")
                        .HasForeignKey("IdCabinet")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StartingBloch.Backend.Models.Client", "Client")
                        .WithMany("Contacts")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Cabinet");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.DeposantPays", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Deposant", "Deposant")
                        .WithMany("DeposantPays")
                        .HasForeignKey("IdDeposant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartingBloch.Backend.Models.Pays", "Pays")
                        .WithMany("DeposantPays")
                        .HasForeignKey("IdPays")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deposant");

                    b.Navigation("Pays");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.InformationDepot", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Brevet", "Brevet")
                        .WithMany("InformationsDepot")
                        .HasForeignKey("IdBrevet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartingBloch.Backend.Models.Pays", "Pays")
                        .WithMany("InformationsDepot")
                        .HasForeignKey("IdPays");

                    b.HasOne("StartingBloch.Backend.Models.Statuts", "Statuts")
                        .WithMany("InformationsDepot")
                        .HasForeignKey("IdStatuts");

                    b.Navigation("Brevet");

                    b.Navigation("Pays");

                    b.Navigation("Statuts");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.InventeurPays", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Inventeur", "Inventeur")
                        .WithMany("InventeurPays")
                        .HasForeignKey("IdInventeur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartingBloch.Backend.Models.Pays", "Pays")
                        .WithMany("InventeurPays")
                        .HasForeignKey("IdPays")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventeur");

                    b.Navigation("Pays");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.NumeroPays", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("PaysId");

                    b.Navigation("Pays");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.TitulairePays", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Pays", "Pays")
                        .WithMany("TitulairePays")
                        .HasForeignKey("IdPays")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartingBloch.Backend.Models.Titulaire", "Titulaire")
                        .WithMany("TitulairePays")
                        .HasForeignKey("IdTitulaire")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pays");

                    b.Navigation("Titulaire");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.User", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Client", "Client")
                        .WithMany("Users")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.UserRole", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StartingBloch.Backend.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartingBloch.Backend.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Brevet", b =>
                {
                    b.Navigation("BrevetCabinets");

                    b.Navigation("BrevetClients");

                    b.Navigation("BrevetDeposants");

                    b.Navigation("BrevetInventeurs");

                    b.Navigation("BrevetTitulaires");

                    b.Navigation("InformationsDepot");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Cabinet", b =>
                {
                    b.Navigation("BrevetCabinets");

                    b.Navigation("ClientCabinets");

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Client", b =>
                {
                    b.Navigation("BrevetClients");

                    b.Navigation("ClientCabinets");

                    b.Navigation("Contacts");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Deposant", b =>
                {
                    b.Navigation("BrevetDeposants");

                    b.Navigation("DeposantPays");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Inventeur", b =>
                {
                    b.Navigation("BrevetInventeurs");

                    b.Navigation("InventeurPays");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Pays", b =>
                {
                    b.Navigation("DeposantPays");

                    b.Navigation("InformationsDepot");

                    b.Navigation("InventeurPays");

                    b.Navigation("TitulairePays");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Statuts", b =>
                {
                    b.Navigation("InformationsDepot");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Titulaire", b =>
                {
                    b.Navigation("BrevetTitulaires");

                    b.Navigation("TitulairePays");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
