// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StartingBloch.Backend.Data;

#nullable disable

namespace StartingBloch.Backend.Migrations
{
    [DbContext(typeof(StartingBlochDbContext))]
    [Migration("20250824143949_AddInformationDepotCabinetSets")]
    partial class AddInformationDepotCabinetSets
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StartingBloch.Backend.Models.Brevet", b =>
                {
                    b.Property<int>("IdBrevet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_brevet");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdBrevet"));

                    b.Property<string>("Commentaire")
                        .HasColumnType("text")
                        .HasColumnName("commentaire");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<string>("ReferenceFamille")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reference_famille");

                    b.Property<string>("Titre")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("titre");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updatedat");

                    b.HasKey("IdBrevet")
                        .HasName("pk_brevets");

                    b.HasIndex("ReferenceFamille")
                        .HasDatabaseName("IX_Brevets_ReferenceFamille");

                    b.ToTable("brevets", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.BrevetCabinet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<int>("IdBrevet")
                        .HasColumnType("integer")
                        .HasColumnName("id_brevet");

                    b.Property<int>("IdCabinet")
                        .HasColumnType("integer")
                        .HasColumnName("id_cabinet");

                    b.HasKey("Id")
                        .HasName("pk_brevetcabinets");

                    b.HasIndex("IdBrevet")
                        .HasDatabaseName("ix_brevetcabinets_id_brevet");

                    b.HasIndex("IdCabinet")
                        .HasDatabaseName("ix_brevetcabinets_id_cabinet");

                    b.ToTable("brevetcabinets", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.BrevetClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<int>("IdBrevet")
                        .HasColumnType("integer")
                        .HasColumnName("id_brevet");

                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("id_client");

                    b.HasKey("Id")
                        .HasName("pk_brevetclients");

                    b.HasIndex("IdClient")
                        .HasDatabaseName("ix_brevetclients_id_client");

                    b.HasIndex("IdBrevet", "IdClient")
                        .IsUnique()
                        .HasDatabaseName("IX_BrevetClients_Unique");

                    b.ToTable("brevetclients", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.BrevetDeposant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<int>("IdBrevet")
                        .HasColumnType("integer")
                        .HasColumnName("id_brevet");

                    b.Property<int>("IdDeposant")
                        .HasColumnType("integer")
                        .HasColumnName("id_deposant");

                    b.HasKey("Id")
                        .HasName("pk_brevetdeposants");

                    b.HasIndex("IdDeposant")
                        .HasDatabaseName("ix_brevetdeposants_id_deposant");

                    b.HasIndex("IdBrevet", "IdDeposant")
                        .IsUnique()
                        .HasDatabaseName("IX_BrevetDeposants_Unique");

                    b.ToTable("brevetdeposants", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.BrevetInventeur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<int>("IdBrevet")
                        .HasColumnType("integer")
                        .HasColumnName("id_brevet");

                    b.Property<int>("IdInventeur")
                        .HasColumnType("integer")
                        .HasColumnName("id_inventeur");

                    b.HasKey("Id")
                        .HasName("pk_brevetinventeurs");

                    b.HasIndex("IdInventeur")
                        .HasDatabaseName("ix_brevetinventeurs_id_inventeur");

                    b.HasIndex("IdBrevet", "IdInventeur")
                        .IsUnique()
                        .HasDatabaseName("IX_BrevetInventeurs_Unique");

                    b.ToTable("brevetinventeurs", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.BrevetTitulaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<int>("IdBrevet")
                        .HasColumnType("integer")
                        .HasColumnName("id_brevet");

                    b.Property<int>("IdTitulaire")
                        .HasColumnType("integer")
                        .HasColumnName("id_titulaire");

                    b.HasKey("Id")
                        .HasName("pk_brevettitulaires");

                    b.HasIndex("IdTitulaire")
                        .HasDatabaseName("ix_brevettitulaires_id_titulaire");

                    b.HasIndex("IdBrevet", "IdTitulaire")
                        .IsUnique()
                        .HasDatabaseName("IX_BrevetTitulaires_Unique");

                    b.ToTable("brevettitulaires", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Cabinet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdresseCabinet")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("adresse_cabinet");

                    b.Property<string>("CodePostal")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code_postal");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<string>("EmailCabinet")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email_cabinet");

                    b.Property<string>("NomCabinet")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nom_cabinet");

                    b.Property<string>("PaysCabinet")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("pays_cabinet");

                    b.Property<string>("TelephoneCabinet")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telephone_cabinet");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updatedat");

                    b.HasKey("Id")
                        .HasName("pk_cabinets");

                    b.ToTable("cabinets", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdresseClient")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("adresse_client");

                    b.Property<int>("CanRead")
                        .HasColumnType("integer")
                        .HasColumnName("can_read");

                    b.Property<int>("CanWrite")
                        .HasColumnType("integer")
                        .HasColumnName("can_write");

                    b.Property<string>("CodePostal")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code_postal");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<string>("EmailClient")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email_client");

                    b.Property<int>("IsBlocked")
                        .HasColumnType("integer")
                        .HasColumnName("is_blocked");

                    b.Property<string>("NomClient")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nom_client");

                    b.Property<string>("PaysClient")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("pays_client");

                    b.Property<string>("ReferenceClient")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reference_client");

                    b.Property<string>("TelephoneClient")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telephone_client");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updatedat");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.HasIndex("NomClient")
                        .HasDatabaseName("IX_Clients_NomClient");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.ClientCabinet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CabinetId")
                        .HasColumnType("integer")
                        .HasColumnName("cabinetid");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("clientid");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer")
                        .HasColumnName("isactive");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updatedat");

                    b.HasKey("Id")
                        .HasName("pk_clientcabinets");

                    b.HasIndex("CabinetId")
                        .HasDatabaseName("ix_clientcabinets_cabinetid");

                    b.HasIndex("ClientId", "CabinetId")
                        .IsUnique()
                        .HasDatabaseName("IX_ClientCabinets_Unique");

                    b.ToTable("clientcabinets", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("EmailsJson")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("emails_json");

                    b.Property<int?>("IdCabinet")
                        .HasColumnType("integer")
                        .HasColumnName("id_cabinet");

                    b.Property<int?>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("id_client");

                    b.Property<string>("Nom")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nom");

                    b.Property<string>("PhonesJson")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("phones_json");

                    b.Property<string>("Prenom")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("prenom");

                    b.Property<string>("Role")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("role");

                    b.Property<string>("RolesJson")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("roles_json");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telephone");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updatedat");

                    b.HasKey("Id")
                        .HasName("pk_contacts");

                    b.HasIndex("IdCabinet")
                        .HasDatabaseName("ix_contacts_id_cabinet");

                    b.HasIndex("IdClient")
                        .HasDatabaseName("ix_contacts_id_client");

                    b.ToTable("contacts", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Deposant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("adresse");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Nom")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nom");

                    b.Property<string>("Prenom")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("prenom");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telephone");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updatedat");

                    b.HasKey("Id")
                        .HasName("pk_deposants");

                    b.ToTable("deposants", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.DeposantPays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<int?>("IdBrevet")
                        .HasColumnType("integer")
                        .HasColumnName("id_brevet");

                    b.Property<int>("IdDeposant")
                        .HasColumnType("integer")
                        .HasColumnName("id_deposant");

                    b.Property<int>("IdPays")
                        .HasColumnType("integer")
                        .HasColumnName("id_pays");

                    b.HasKey("Id")
                        .HasName("pk_deposantpays");

                    b.HasIndex("IdBrevet")
                        .HasDatabaseName("ix_deposantpays_id_brevet");

                    b.HasIndex("IdDeposant")
                        .HasDatabaseName("ix_deposantpays_id_deposant");

                    b.HasIndex("IdPays")
                        .HasDatabaseName("ix_deposantpays_id_pays");

                    b.ToTable("deposantpays", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.InformationDepot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Commentaire")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("commentaire");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<string>("DateDelivrance")
                        .HasColumnType("text")
                        .HasColumnName("date_delivrance");

                    b.Property<string>("DateDepot")
                        .HasColumnType("text")
                        .HasColumnName("date_depot");

                    b.Property<string>("DatePublication")
                        .HasColumnType("text")
                        .HasColumnName("date_publication");

                    b.Property<int>("IdBrevet")
                        .HasColumnType("integer")
                        .HasColumnName("id_brevet");

                    b.Property<int?>("IdPays")
                        .HasColumnType("integer")
                        .HasColumnName("id_pays");

                    b.Property<int?>("IdStatuts")
                        .HasColumnType("integer")
                        .HasColumnName("id_statuts");

                    b.Property<int>("Licence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("licence");

                    b.Property<string>("NumeroDelivrance")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("numero_delivrance");

                    b.Property<string>("NumeroDepot")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("numero_depot");

                    b.Property<string>("NumeroPublication")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("numero_publication");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updatedat");

                    b.HasKey("Id")
                        .HasName("pk_informationsdepot");

                    b.HasIndex("IdBrevet")
                        .HasDatabaseName("ix_informationsdepot_id_brevet");

                    b.HasIndex("IdPays")
                        .HasDatabaseName("ix_informationsdepot_id_pays");

                    b.HasIndex("IdStatuts")
                        .HasDatabaseName("ix_informationsdepot_id_statuts");

                    b.ToTable("informationsdepot", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.InformationDepotCabinet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CabinetId")
                        .HasColumnType("integer")
                        .HasColumnName("cabinet_id");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<int>("InformationDepotId")
                        .HasColumnType("integer")
                        .HasColumnName("information_depot_id");

                    b.HasKey("Id")
                        .HasName("pk_informationdepotcabinets");

                    b.HasIndex("CabinetId")
                        .HasDatabaseName("ix_informationdepotcabinets_cabinet_id");

                    b.HasIndex("InformationDepotId", "CabinetId", "Category")
                        .IsUnique()
                        .HasDatabaseName("IX_InfoDepotCab_Unique");

                    b.ToTable("informationdepotcabinets", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.InformationDepotCabinetContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_id");

                    b.Property<int>("InformationDepotCabinetId")
                        .HasColumnType("integer")
                        .HasColumnName("information_depot_cabinet_id");

                    b.HasKey("Id")
                        .HasName("pk_informationdepotcabinetcontacts");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_informationdepotcabinetcontacts_contact_id");

                    b.HasIndex("InformationDepotCabinetId", "ContactId")
                        .IsUnique()
                        .HasDatabaseName("IX_InfoDepotCabContact_Unique");

                    b.ToTable("informationdepotcabinetcontacts", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.InformationDepotCabinetRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InformationDepotCabinetId")
                        .HasColumnType("integer")
                        .HasColumnName("information_depot_cabinet_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_informationdepotcabinetroles");

                    b.HasIndex("InformationDepotCabinetId", "Role")
                        .IsUnique()
                        .HasDatabaseName("IX_InfoDepotCabRole_Unique");

                    b.ToTable("informationdepotcabinetroles", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Inventeur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("adresse");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Nom")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nom");

                    b.Property<string>("Prenom")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("prenom");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telephone");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updatedat");

                    b.HasKey("Id")
                        .HasName("pk_inventeurs");

                    b.ToTable("inventeurs", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.InventeurPays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<int?>("IdBrevet")
                        .HasColumnType("integer")
                        .HasColumnName("id_brevet");

                    b.Property<int>("IdInventeur")
                        .HasColumnType("integer")
                        .HasColumnName("id_inventeur");

                    b.Property<int>("IdPays")
                        .HasColumnType("integer")
                        .HasColumnName("id_pays");

                    b.HasKey("Id")
                        .HasName("pk_inventeurpays");

                    b.HasIndex("IdBrevet")
                        .HasDatabaseName("ix_inventeurpays_id_brevet");

                    b.HasIndex("IdInventeur")
                        .HasDatabaseName("ix_inventeurpays_id_inventeur");

                    b.HasIndex("IdPays")
                        .HasDatabaseName("ix_inventeurpays_id_pays");

                    b.ToTable("inventeurpays", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("action");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_at");

                    b.Property<string>("Details")
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("ip_address");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("level");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("NewValues")
                        .HasColumnType("text")
                        .HasColumnName("new_values");

                    b.Property<string>("OldValues")
                        .HasColumnType("text")
                        .HasColumnName("old_values");

                    b.Property<int?>("RecordId")
                        .HasColumnType("integer")
                        .HasColumnName("record_id");

                    b.Property<string>("TableName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("table_name");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("timestamp");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("user_agent");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_logs");

                    b.ToTable("logs", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.NumeroPays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer")
                        .HasColumnName("is_active");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("numero");

                    b.Property<string>("PaysCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("pays_code");

                    b.Property<int?>("PaysId")
                        .HasColumnType("integer")
                        .HasColumnName("paysid");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_numeropays");

                    b.HasIndex("PaysId")
                        .HasDatabaseName("ix_numeropays_paysid");

                    b.ToTable("numeropays", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Pays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CodeIso")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code_iso");

                    b.Property<string>("CodeIso3")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code_iso3");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<string>("NomFrFr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nom_fr_fr");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updatedat");

                    b.HasKey("Id")
                        .HasName("pk_pays");

                    b.ToTable("pays", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updatedat");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_Name");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Statuts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updatedat");

                    b.HasKey("Id")
                        .HasName("pk_statuts");

                    b.ToTable("statuts", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Titulaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("adresse");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Nom")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nom");

                    b.Property<string>("Prenom")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("prenom");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telephone");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updatedat");

                    b.HasKey("Id")
                        .HasName("pk_titulaires");

                    b.ToTable("titulaires", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.TitulairePays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<int?>("IdBrevet")
                        .HasColumnType("integer")
                        .HasColumnName("id_brevet");

                    b.Property<int>("IdPays")
                        .HasColumnType("integer")
                        .HasColumnName("id_pays");

                    b.Property<int>("IdTitulaire")
                        .HasColumnType("integer")
                        .HasColumnName("id_titulaire");

                    b.HasKey("Id")
                        .HasName("pk_titulairepays");

                    b.HasIndex("IdBrevet")
                        .HasDatabaseName("ix_titulairepays_id_brevet");

                    b.HasIndex("IdPays")
                        .HasDatabaseName("ix_titulairepays_id_pays");

                    b.HasIndex("IdTitulaire")
                        .HasDatabaseName("ix_titulairepays_id_titulaire");

                    b.ToTable("titulairepays", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CanRead")
                        .HasColumnType("integer")
                        .HasColumnName("canread");

                    b.Property<int>("CanWrite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("canwrite");

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("clientid");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<int>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("isactive");

                    b.Property<int>("IsBlocked")
                        .HasColumnType("integer")
                        .HasColumnName("isblocked");

                    b.Property<string>("LastLogin")
                        .HasColumnType("text")
                        .HasColumnName("lastlogin");

                    b.Property<string>("Nom")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nom");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Prenom")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("prenom");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("user")
                        .HasColumnName("role");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updatedat");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("IX_Users_ClientId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Username");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("clientid");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdat");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updatedat");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_userroles");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_userroles_clientid");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_userroles_roleid");

                    b.HasIndex("UserId", "RoleId", "ClientId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserRoles_Unique");

                    b.ToTable("userroles", (string)null);
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.BrevetCabinet", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Brevet", "Brevet")
                        .WithMany("BrevetCabinets")
                        .HasForeignKey("IdBrevet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_brevetcabinets_brevets_id_brevet");

                    b.HasOne("StartingBloch.Backend.Models.Cabinet", "Cabinet")
                        .WithMany("BrevetCabinets")
                        .HasForeignKey("IdCabinet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_brevetcabinets_cabinets_id_cabinet");

                    b.Navigation("Brevet");

                    b.Navigation("Cabinet");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.BrevetClient", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Brevet", "Brevet")
                        .WithMany("BrevetClients")
                        .HasForeignKey("IdBrevet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_brevetclients_brevets_id_brevet");

                    b.HasOne("StartingBloch.Backend.Models.Client", "Client")
                        .WithMany("BrevetClients")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_brevetclients_clients_id_client");

                    b.Navigation("Brevet");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.BrevetDeposant", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Brevet", "Brevet")
                        .WithMany("BrevetDeposants")
                        .HasForeignKey("IdBrevet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_brevetdeposants_brevets_id_brevet");

                    b.HasOne("StartingBloch.Backend.Models.Deposant", "Deposant")
                        .WithMany("BrevetDeposants")
                        .HasForeignKey("IdDeposant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_brevetdeposants_deposants_id_deposant");

                    b.Navigation("Brevet");

                    b.Navigation("Deposant");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.BrevetInventeur", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Brevet", "Brevet")
                        .WithMany("BrevetInventeurs")
                        .HasForeignKey("IdBrevet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_brevetinventeurs_brevets_id_brevet");

                    b.HasOne("StartingBloch.Backend.Models.Inventeur", "Inventeur")
                        .WithMany("BrevetInventeurs")
                        .HasForeignKey("IdInventeur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_brevetinventeurs_inventeurs_id_inventeur");

                    b.Navigation("Brevet");

                    b.Navigation("Inventeur");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.BrevetTitulaire", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Brevet", "Brevet")
                        .WithMany("BrevetTitulaires")
                        .HasForeignKey("IdBrevet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_brevettitulaires_brevets_id_brevet");

                    b.HasOne("StartingBloch.Backend.Models.Titulaire", "Titulaire")
                        .WithMany("BrevetTitulaires")
                        .HasForeignKey("IdTitulaire")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_brevettitulaires_titulaires_id_titulaire");

                    b.Navigation("Brevet");

                    b.Navigation("Titulaire");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.ClientCabinet", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Cabinet", "Cabinet")
                        .WithMany("ClientCabinets")
                        .HasForeignKey("CabinetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clientcabinets_cabinets_cabinetid");

                    b.HasOne("StartingBloch.Backend.Models.Client", "Client")
                        .WithMany("ClientCabinets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clientcabinets_clients_clientid");

                    b.Navigation("Cabinet");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Contact", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Cabinet", "Cabinet")
                        .WithMany("Contacts")
                        .HasForeignKey("IdCabinet")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_contacts_cabinets_id_cabinet");

                    b.HasOne("StartingBloch.Backend.Models.Client", "Client")
                        .WithMany("Contacts")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_contacts_clients_id_client");

                    b.Navigation("Cabinet");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.DeposantPays", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Brevet", "Brevet")
                        .WithMany()
                        .HasForeignKey("IdBrevet")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_deposantpays_brevets_id_brevet");

                    b.HasOne("StartingBloch.Backend.Models.Deposant", "Deposant")
                        .WithMany("DeposantPays")
                        .HasForeignKey("IdDeposant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deposantpays_deposants_id_deposant");

                    b.HasOne("StartingBloch.Backend.Models.Pays", "Pays")
                        .WithMany("DeposantPays")
                        .HasForeignKey("IdPays")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deposantpays_pays_id_pays");

                    b.Navigation("Brevet");

                    b.Navigation("Deposant");

                    b.Navigation("Pays");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.InformationDepot", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Brevet", "Brevet")
                        .WithMany("InformationsDepot")
                        .HasForeignKey("IdBrevet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_informationsdepot_brevets_id_brevet");

                    b.HasOne("StartingBloch.Backend.Models.Pays", "Pays")
                        .WithMany("InformationsDepot")
                        .HasForeignKey("IdPays")
                        .HasConstraintName("fk_informationsdepot_pays_id_pays");

                    b.HasOne("StartingBloch.Backend.Models.Statuts", "Statuts")
                        .WithMany("InformationsDepot")
                        .HasForeignKey("IdStatuts")
                        .HasConstraintName("fk_informationsdepot_statuts_id_statuts");

                    b.Navigation("Brevet");

                    b.Navigation("Pays");

                    b.Navigation("Statuts");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.InformationDepotCabinet", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Cabinet", "Cabinet")
                        .WithMany()
                        .HasForeignKey("CabinetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_informationdepotcabinets_cabinets_cabinet_id");

                    b.HasOne("StartingBloch.Backend.Models.InformationDepot", "InformationDepot")
                        .WithMany("InformationDepotCabinets")
                        .HasForeignKey("InformationDepotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_informationdepotcabinets_informationsdepot_information_depo~");

                    b.Navigation("Cabinet");

                    b.Navigation("InformationDepot");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.InformationDepotCabinetContact", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_informationdepotcabinetcontacts_contacts_contact_id");

                    b.HasOne("StartingBloch.Backend.Models.InformationDepotCabinet", "InformationDepotCabinet")
                        .WithMany("Contacts")
                        .HasForeignKey("InformationDepotCabinetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_informationdepotcabinetcontacts_informationdepotcabinets_in~");

                    b.Navigation("Contact");

                    b.Navigation("InformationDepotCabinet");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.InformationDepotCabinetRole", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.InformationDepotCabinet", "InformationDepotCabinet")
                        .WithMany("Roles")
                        .HasForeignKey("InformationDepotCabinetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_informationdepotcabinetroles_informationdepotcabinets_infor~");

                    b.Navigation("InformationDepotCabinet");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.InventeurPays", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Brevet", "Brevet")
                        .WithMany()
                        .HasForeignKey("IdBrevet")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_inventeurpays_brevets_id_brevet");

                    b.HasOne("StartingBloch.Backend.Models.Inventeur", "Inventeur")
                        .WithMany("InventeurPays")
                        .HasForeignKey("IdInventeur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventeurpays_inventeurs_id_inventeur");

                    b.HasOne("StartingBloch.Backend.Models.Pays", "Pays")
                        .WithMany("InventeurPays")
                        .HasForeignKey("IdPays")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventeurpays_pays_id_pays");

                    b.Navigation("Brevet");

                    b.Navigation("Inventeur");

                    b.Navigation("Pays");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.NumeroPays", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("PaysId")
                        .HasConstraintName("fk_numeropays_pays_paysid");

                    b.Navigation("Pays");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.TitulairePays", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Brevet", "Brevet")
                        .WithMany()
                        .HasForeignKey("IdBrevet")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_titulairepays_brevets_id_brevet");

                    b.HasOne("StartingBloch.Backend.Models.Pays", "Pays")
                        .WithMany("TitulairePays")
                        .HasForeignKey("IdPays")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_titulairepays_pays_id_pays");

                    b.HasOne("StartingBloch.Backend.Models.Titulaire", "Titulaire")
                        .WithMany("TitulairePays")
                        .HasForeignKey("IdTitulaire")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_titulairepays_titulaires_id_titulaire");

                    b.Navigation("Brevet");

                    b.Navigation("Pays");

                    b.Navigation("Titulaire");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.User", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Client", "Client")
                        .WithMany("Users")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_users_clients_clientid");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.UserRole", b =>
                {
                    b.HasOne("StartingBloch.Backend.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_userroles_clients_clientid");

                    b.HasOne("StartingBloch.Backend.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userroles_roles_roleid");

                    b.HasOne("StartingBloch.Backend.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userroles_users_userid");

                    b.Navigation("Client");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Brevet", b =>
                {
                    b.Navigation("BrevetCabinets");

                    b.Navigation("BrevetClients");

                    b.Navigation("BrevetDeposants");

                    b.Navigation("BrevetInventeurs");

                    b.Navigation("BrevetTitulaires");

                    b.Navigation("InformationsDepot");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Cabinet", b =>
                {
                    b.Navigation("BrevetCabinets");

                    b.Navigation("ClientCabinets");

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Client", b =>
                {
                    b.Navigation("BrevetClients");

                    b.Navigation("ClientCabinets");

                    b.Navigation("Contacts");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Deposant", b =>
                {
                    b.Navigation("BrevetDeposants");

                    b.Navigation("DeposantPays");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.InformationDepot", b =>
                {
                    b.Navigation("InformationDepotCabinets");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.InformationDepotCabinet", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Inventeur", b =>
                {
                    b.Navigation("BrevetInventeurs");

                    b.Navigation("InventeurPays");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Pays", b =>
                {
                    b.Navigation("DeposantPays");

                    b.Navigation("InformationsDepot");

                    b.Navigation("InventeurPays");

                    b.Navigation("TitulairePays");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Statuts", b =>
                {
                    b.Navigation("InformationsDepot");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.Titulaire", b =>
                {
                    b.Navigation("BrevetTitulaires");

                    b.Navigation("TitulairePays");
                });

            modelBuilder.Entity("StartingBloch.Backend.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
