/*
 * ================================================================================================
 * ATTRIBUTS AUTORISATION PROPRI√âT√â INTELLECTUELLE - CONTR√îLE ACC√àS GRANULAIRE
 * ================================================================================================
 * 
 * OBJECTIF :
 * Fournit un syst√®me d'autorisation sp√©cialis√© pour la gestion de propri√©t√© intellectuelle
 * avec contr√¥le d'acc√®s granulaire selon r√¥les m√©tier et propri√©t√© des donn√©es.
 * 
 * ARCHITECTURE R√îLES M√âTIER :
 * ===========================
 * 
 * üëë ADMIN : Acc√®s complet (super-utilisateur)
 *    - Gestion tous brevets, clients, inventeurs
 *    - Administration syst√®me et utilisateurs
 *    - Acc√®s donn√©es confidentielles toutes entit√©s
 * 
 * üë®‚Äçüíº USER (Employ√© StartingBloch) : Acc√®s op√©rationnel
 *    - Consultation/modification brevets assign√©s
 *    - Gestion relations clients selon portefeuille
 *    - Acc√®s donn√©es selon permissions granulaires
 * 
 * üè¢ CLIENT : Acc√®s propri√©taire strictement limit√©
 *    - Consultation uniquement SES brevets/inventions
 *    - Pas d'acc√®s donn√©es autres clients
 *    - Protection stricte confidentialit√© industrielle
 * 
 * POLITIQUES AUTORISATION AVANC√âES :
 * ==================================
 * 
 * üîê AdminOrOwner : Admin OU propri√©taire ressource
 *    - Cas usage : Acc√®s dossiers brevets confidentiels
 *    - Validation : Role=admin OU clientId match ressource
 * 
 * ‚úçÔ∏è WritePermission : Droits modification granulaires
 *    - Cas usage : Modification donn√©es sensibles brevets
 *    - Validation : Role=admin OU claim canWrite=true
 * 
 * S√âCURIT√â ET CONFORMIT√â :
 * ========================
 * ‚úÖ Isolation stricte donn√©es clients (confidentialit√© industrielle)
 * ‚úÖ Tra√ßabilit√© acc√®s selon r√¥les (audit RGPD)
 * ‚úÖ Protection secrets industriels et innovations
 * ‚úÖ Conformit√© r√©glementations propri√©t√© intellectuelle
 * 
 * PATTERNS IMPL√âMENT√âS :
 * =====================
 * - Authorization Attributes (d√©claratif sur contr√¥leurs/actions)
 * - Policy-based Authorization (logique m√©tier complexe)
 * - Claims-based Security (permissions granulaires)
 * - Resource-based Authorization (propri√©t√© donn√©es)
 * 
 * ================================================================================================
 */

using Microsoft.AspNetCore.Authorization;

namespace StartingBloch.Backend.Middleware;

// ================================================================================================
// ATTRIBUTS AUTORISATION R√îLES M√âTIER
// ================================================================================================

/// <summary>
/// Attribut d'autorisation pour acc√®s administrateur uniquement.
/// Utilis√© pour op√©rations critiques : gestion utilisateurs, configuration syst√®me,
/// acc√®s donn√©es confidentielles toutes entit√©s.
/// </summary>
public class AdminOnlyAttribute : AuthorizeAttribute
{
    /// <summary>
    /// Initialise l'attribut avec restriction r√¥le administrateur.
    /// </summary>
    public AdminOnlyAttribute()
    {
        Roles = "Admin";
    }
}

/// <summary>
/// Attribut d'autorisation pour employ√©s StartingBloch (admin + user).
/// Utilis√© pour op√©rations internes : gestion brevets, relations clients,
/// consultations donn√©es selon permissions.
/// </summary>
public class EmployeeOnlyAttribute : AuthorizeAttribute
{
    /// <summary>
    /// Initialise l'attribut avec acc√®s employ√©s internes.
    /// </summary>
    public EmployeeOnlyAttribute()
    {
        Roles = "Admin,User";
    }
}

/// <summary>
/// Attribut d'autorisation pour clients externes uniquement.
/// Utilis√© pour portails clients : consultation brevets propri√©taires,
/// acc√®s limit√© donn√©es personnelles.
/// </summary>
public class ClientOnlyAttribute : AuthorizeAttribute
{
    /// <summary>
    /// Initialise l'attribut avec restriction clients externes.
    /// </summary>
    public ClientOnlyAttribute()
    {
        Roles = "client";
    }
}

// ================================================================================================
// ATTRIBUTS AUTORISATION POLITIQUES AVANC√âES
// ================================================================================================

/// <summary>
/// Attribut d'autorisation pour admin OU propri√©taire de la ressource.
/// Utilis√© pour donn√©es sensibles : dossiers brevets confidentiels,
/// informations strat√©giques clients.
/// </summary>
public class AdminOrOwnerAttribute : AuthorizeAttribute
{
    /// <summary>
    /// Initialise l'attribut avec politique propri√©t√© ressource.
    /// </summary>
    public AdminOrOwnerAttribute()
    {
        Policy = "AdminOrOwner";
    }
}

/// <summary>
/// Attribut d'autorisation pour droits d'√©criture granulaires.
/// Utilis√© pour modifications critiques : donn√©es brevets,
/// informations confidentielles, statuts juridiques.
/// </summary>
public class WritePermissionAttribute : AuthorizeAttribute
{
    /// <summary>
    /// Initialise l'attribut avec politique permissions √©criture.
    /// </summary>
    public WritePermissionAttribute()
    {
        Policy = "WritePermission";
    }
}

// ================================================================================================
// EXIGENCES POLITIQUES PERSONNALIS√âES
// ================================================================================================

/// <summary>
/// Exigence pour validation admin OU propri√©taire ressource.
/// Permet contr√¥le acc√®s granulaire selon propri√©t√© donn√©es et r√¥le utilisateur.
/// </summary>
public class AdminOrOwnerRequirement : IAuthorizationRequirement
{
    /// <summary>
    /// ID du client propri√©taire de la ressource demand√©e.
    /// Null = pas de v√©rification propri√©t√© (admin seul autoris√©).
    /// </summary>
    public int? ResourceClientId { get; set; }
}

/// <summary>
/// Exigence pour validation droits d'√©criture granulaires.
/// Permet contr√¥le modifications selon permissions utilisateur et criticit√© donn√©es.
/// </summary>
public class WritePermissionRequirement : IAuthorizationRequirement
{
}

// ================================================================================================
// GESTIONNAIRES AUTORISATION M√âTIER
// ================================================================================================

/// <summary>
/// Gestionnaire autorisation pour politique AdminOrOwner.
/// Valide l'acc√®s selon r√¥le admin OU propri√©t√© de la ressource par le client.
/// 
/// LOGIQUE M√âTIER :
/// - Admin : Acc√®s total (gestion portefeuille complet)
/// - Client : Acc√®s limit√© √† SES donn√©es uniquement
/// - Isolation stricte donn√©es clients (confidentialit√© industrielle)
/// </summary>
public class AdminOrOwnerHandler : AuthorizationHandler<AdminOrOwnerRequirement>
{
    /// <summary>
    /// √âvalue l'autorisation selon r√¥le et propri√©t√© ressource.
    /// </summary>
    /// <param name="context">Contexte autorisation avec claims utilisateur</param>
    /// <param name="requirement">Exigence avec ID client propri√©taire</param>
    /// <returns>Task pour traitement asynchrone</returns>
    protected override Task HandleRequirementAsync(
        AuthorizationHandlerContext context,
        AdminOrOwnerRequirement requirement)
    {
        var userRole = context.User.FindFirst("role")?.Value;
        var userClientId = context.User.FindFirst("clientId")?.Value;

        // Admin : Acc√®s complet toutes ressources
        if (userRole == "admin")
        {
            context.Succeed(requirement);
            return Task.CompletedTask;
        }

        // Client : Acc√®s strictement limit√© √† ses donn√©es
        if (userRole == "client" && 
            requirement.ResourceClientId.HasValue &&
            int.TryParse(userClientId, out var clientId) &&
            clientId == requirement.ResourceClientId.Value)
        {
            context.Succeed(requirement);
            return Task.CompletedTask;
        }

        // √âchec autorisation : r√¥le insuffisant ou ressource non propri√©taire
        context.Fail();
        return Task.CompletedTask;
    }
}

/// <summary>
/// Gestionnaire autorisation pour politique WritePermission.
/// Valide les droits d'√©criture selon r√¥le et permissions granulaires.
/// 
/// LOGIQUE M√âTIER :
/// - Admin : Droits √©criture complets par d√©faut
/// - Autres : Validation claim canWrite selon permissions assign√©es
/// - Protection modifications donn√©es critiques brevets
/// </summary>
public class WritePermissionHandler : AuthorizationHandler<WritePermissionRequirement>
{
    /// <summary>
    /// √âvalue l'autorisation d'√©criture selon r√¥le et permissions.
    /// </summary>
    /// <param name="context">Contexte autorisation avec claims utilisateur</param>
    /// <param name="requirement">Exigence permissions √©criture</param>
    /// <returns>Task pour traitement asynchrone</returns>
    protected override Task HandleRequirementAsync(
        AuthorizationHandlerContext context,
        WritePermissionRequirement requirement)
    {
        var canWrite = context.User.FindFirst("canWrite")?.Value;
        var userRole = context.User.FindFirst("role")?.Value;

        // Admin : Droits √©criture automatiques
        if (userRole == "admin")
        {
            context.Succeed(requirement);
            return Task.CompletedTask;
        }

        // Autres r√¥les : Validation claim permissions
        if (bool.TryParse(canWrite, out var hasWritePermission) && hasWritePermission)
        {
            context.Succeed(requirement);
            return Task.CompletedTask;
        }

        // √âchec autorisation : permissions insuffisantes
        context.Fail();
        return Task.CompletedTask;
    }
}
