/*
 * ================================================================================================
 * MIDDLEWARE S√âCURIT√â HTTP - HEADERS PROTECTEURS OWASP
 * ================================================================================================
 * 
 * OBJECTIF :
 * Applique automatiquement tous les en-t√™tes de s√©curit√© HTTP recommand√©s par l'OWASP
 * pour prot√©ger l'application contre les attaques web courantes.
 * 
 * PROTECTIONS IMPL√âMENT√âES :
 * ==========================
 * 
 * üõ°Ô∏è CLICKJACKING ‚Üí X-Frame-Options: DENY
 * üõ°Ô∏è MIME SNIFFING ‚Üí X-Content-Type-Options: nosniff  
 * üõ°Ô∏è XSS LEGACY ‚Üí X-XSS-Protection: 1; mode=block
 * üõ°Ô∏è TRANSPORT FORC√â ‚Üí HSTS avec includeSubDomains
 * üõ°Ô∏è XSS AVANC√â ‚Üí Content Security Policy restrictive
 * üõ°Ô∏è PRIVACY ‚Üí Referrer-Policy stricte
 * üõ°Ô∏è PERMISSIONS ‚Üí D√©sactivation fonctionnalit√©s sensibles
 * üõ°Ô∏è FINGERPRINTING ‚Üí Suppression headers serveur
 * 
 * ARCHITECTURE PIPELINE :
 * ======================
 * Position: Premier middleware s√©curit√© (avant authentification)
 * Ex√©cution: Sur chaque r√©ponse HTTP sortante
 * Performance: Impact minimal, headers statiques
 * 
 * CONFORMIT√â S√âCURIT√â :
 * ====================
 * ‚úÖ OWASP Security Headers
 * ‚úÖ Mozilla Security Guidelines  
 * ‚úÖ NIST Cybersecurity Framework
 * ‚úÖ Standards industrie propri√©t√© intellectuelle
 * 
 * ================================================================================================
 */

using Microsoft.Extensions.Primitives;

namespace StartingBloch.Backend.Middleware;

/// <summary>
/// Middleware pour l'injection automatique des en-t√™tes de s√©curit√© HTTP selon standards OWASP.
/// Premier bouclier de protection contre attaques web courantes (XSS, Clickjacking, MITM).
/// Applique 8 couches de protection sur chaque r√©ponse HTTP sortante.
/// </summary>
public class SecurityHeadersMiddleware
{
    private readonly RequestDelegate _next;
    private readonly ILogger<SecurityHeadersMiddleware> _logger;

    /// <summary>
    /// Initialise le middleware avec injection des d√©pendances pipeline.
    /// </summary>
    /// <param name="next">D√©l√©gu√© vers middleware suivant dans pipeline ASP.NET</param>
    /// <param name="logger">Service logging pour audit s√©curit√© et tra√ßabilit√©</param>
    public SecurityHeadersMiddleware(RequestDelegate next, ILogger<SecurityHeadersMiddleware> logger)
    {
        _next = next;
        _logger = logger;
    }

    /// <summary>
    /// Point d'entr√©e principal du middleware - Ex√©cution sur chaque requ√™te HTTP.
    /// Applique les headers de s√©curit√© avant transmission de la r√©ponse au client.
    /// </summary>
    /// <param name="context">Contexte HTTP complet (Request/Response/User/etc.)</param>
    /// <returns>Task pour ex√©cution asynchrone dans pipeline</returns>
    public async Task InvokeAsync(HttpContext context)
    {
        // Application des protections avant r√©ponse
        AddSecurityHeaders(context.Response);
        
        // Continuation pipeline vers middleware suivant
        await _next(context);
    }

    /// <summary>
    /// Configure l'ensemble des en-t√™tes de s√©curit√© selon recommandations OWASP.
    /// Headers statiques appliqu√©s uniform√©ment sur toutes les r√©ponses.
    /// </summary>
    /// <param name="response">Objet Response HTTP √† s√©curiser</param>
    private static void AddSecurityHeaders(HttpResponse response)
    {
        // Protection Clickjacking
        response.Headers["X-Frame-Options"] = "DENY";
        
        // Protection MIME Sniffing  
        response.Headers["X-Content-Type-Options"] = "nosniff";
        
        // Protection XSS Legacy
        response.Headers["X-XSS-Protection"] = "1; mode=block";
        
        // For√ßage HTTPS (1 an + sous-domaines)
        response.Headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains";
        
        // CSP restrictive anti-XSS
        response.Headers["Content-Security-Policy"] = 
            "default-src 'self'; " +
            "script-src 'self' 'unsafe-inline' 'unsafe-eval'; " + 
            "style-src 'self' 'unsafe-inline'; " +
            "img-src 'self' data: https:; " +
            "font-src 'self' data:; " +
            "connect-src 'self'; " +
            "frame-ancestors 'none'";
            
        // Politique Referrer stricte
        response.Headers["Referrer-Policy"] = "strict-origin-when-cross-origin";
        
        // D√©sactivation fonctionnalit√©s sensibles
        response.Headers["Permissions-Policy"] = 
            "camera=(), microphone=(), geolocation=(), payment=()";
            
        // Suppression informations serveur
        response.Headers.Remove("Server");
        response.Headers.Remove("X-Powered-By");
    }
}
