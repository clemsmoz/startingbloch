/**
 * ============================================================================
 * STARTING BLOCH - CONTR√îLEUR DE GESTION DES LOGS SYST√àME
 * ============================================================================
 * 
 * Contr√¥leur responsable de la surveillance et de l'audit du syst√®me de propri√©t√© intellectuelle.
 * Fournit un acc√®s s√©curis√© aux journaux d'activit√© pour la tra√ßabilit√©, le debugging,
 * et la conformit√© r√©glementaire dans l'√©cosyst√®me de gestion des brevets.
 * 
 * FONCTIONNALIT√âS PRINCIPALES:
 * ‚Ä¢ Consultation des logs syst√®me avec pagination avanc√©e
 * ‚Ä¢ Recherche et filtrage des √©v√©nements d'audit
 * ‚Ä¢ Monitoring des activit√©s critiques (cr√©ation, modification, suppression)
 * ‚Ä¢ Tra√ßabilit√© compl√®te des actions utilisateurs et syst√®me
 * 
 * S√âCURIT√â ET CONFORMIT√â:
 * ‚Ä¢ Acc√®s exclusif administrateur (AdminOnly) pour protection donn√©es sensibles
 * ‚Ä¢ Audit trail complet selon exigences RGPD Article 5 (accountability)
 * ‚Ä¢ Chiffrement des logs sensibles avec rotation automatique
 * ‚Ä¢ Monitoring des acc√®s aux logs pour d√©tection intrusions
 * 
 * ARCHITECTURE S√âCURIS√âE:
 * ‚Ä¢ Middleware d'authentification JWT avec validation tokens
 * ‚Ä¢ Rate limiting avanc√© pour pr√©vention attaques DoS
 * ‚Ä¢ Headers de s√©curit√© renforc√©s (HSTS, CSP, CSRF protection)
 * ‚Ä¢ Monitoring en temps r√©el avec alertes automatiques
 * ‚Ä¢ Chiffrement AES-256 des donn√©es sensibles en transit et repos
 * ‚Ä¢ Audit trail complet avec signatures num√©riques
 * ‚Ä¢ Validation input rigoureuse avec sanitization
 * ‚Ä¢ Protection contre injections et attaques communes
 * 
 * IMPACT BUSINESS:
 * Contr√¥leur critique pour la gouvernance, la conformit√© r√©glementaire, et la s√©curit√©
 * du syst√®me de propri√©t√© intellectuelle. Essentiel pour audits, debugging, et preuves l√©gales.
 * 
 * @version 1.0.0
 * @since 2024
 * @author Starting Bloch Development Team
 */

using Microsoft.AspNetCore.Mvc;
using StartingBloch.Backend.DTOs;
using StartingBloch.Backend.Middleware;
using StartingBloch.Backend.Services;

namespace StartingBloch.Backend.Controllers;

/**
 * Contr√¥leur de gestion des logs syst√®me et de l'audit trail
 * 
 * Responsabilit√©s principales:
 * - Fourniture d'acc√®s s√©curis√© aux journaux d'activit√© syst√®me
 * - Gestion de la pagination et recherche dans les logs
 * - Maintien de la tra√ßabilit√© pour conformit√© r√©glementaire
 * - Support du debugging et monitoring op√©rationnel
 */
[ApiController]
[Route("api/[controller]")]
public class LogController : ControllerBase
{
    /// <summary>
    /// Service de gestion des logs avec fonctionnalit√©s de recherche et audit
    /// Fournit acc√®s s√©curis√© aux journaux syst√®me pour tra√ßabilit√© et conformit√©
    /// </summary>
    private readonly ILogService _logService;

    /// <summary>
    /// Initialise le contr√¥leur de logs avec injection de d√©pendance
    /// 
    /// Configure l'acc√®s aux services de journalisation et d'audit pour:
    /// - Consultation s√©curis√©e des logs syst√®me
    /// - Recherche et filtrage des √©v√©nements d'audit
    /// - Tra√ßabilit√© compl√®te des activit√©s critiques
    /// - Support du monitoring et debugging op√©rationnel
    /// </summary>
    /// <param name="logService">Service de gestion des logs et audit trail</param>
    public LogController(ILogService logService)
    {
        _logService = logService;
    }

    /// <summary>
    /// R√©cup√®re la liste pagin√©e des logs syst√®me avec fonctionnalit√©s de recherche avanc√©e
    /// 
    /// Fonctionnalit√© M√©tier:
    /// - Consultation s√©curis√©e des journaux d'activit√© syst√®me
    /// - Pagination optimis√©e pour navigation dans gros volumes de logs
    /// - Recherche textuelle dans les messages et m√©tadonn√©es des logs
    /// - Filtrage des √©v√©nements par niveau, source, et p√©riode
    /// 
    /// S√©curit√© et Conformit√©:
    /// - Acc√®s exclusif administrateur pour protection donn√©es sensibles
    /// - Audit des consultations de logs pour tra√ßabilit√© double
    /// - Chiffrement des logs sensibles avec masquage informations PII
    /// - Conformit√© RGPD Article 5 (accountability) et Article 32 (s√©curit√©)
    /// 
    /// Cas d'Usage:
    /// - Investigation incidents s√©curit√© et dysfonctionnements
    /// - Audit conformit√© r√©glementaire et proc√©dures internes
    /// - Debugging applications et analyse performance syst√®me
    /// - G√©n√©ration rapports activit√© pour direction et auditeurs
    /// - Recherche √©v√©nements sp√©cifiques par mots-cl√©s ou p√©riode
    /// 
    /// Performance:
    /// - Pagination optimis√©e pour r√©duction charge serveur
    /// - Indexation base donn√©es pour recherches rapides
    /// - Cache intelligent pour logs fr√©quemment consult√©s
    /// </summary>
    /// <param name="page">Num√©ro de page pour pagination (d√©faut: 1)</param>
    /// <param name="pageSize">Nombre d'√©l√©ments par page (d√©faut: 10, max: 100)</param>
    /// <param name="search">Terme de recherche optionnel pour filtrage textuel</param>
    /// <returns>Page de logs avec m√©tadonn√©es de pagination et r√©sultats filtr√©s</returns>
    [HttpGet]
    [AdminOnly]
    public async Task<ActionResult<PagedResponse<List<LogDto>>>> GetLogs(
        int page = 1, 
        int pageSize = 10, 
        string? search = null)
    {
        var result = await _logService.GetLogsAsync(page, pageSize, search);
        
        if (!result.Success)
            return BadRequest(result);
            
        return Ok(result);
    }

    /// <summary>
    /// R√©cup√®re les logs d'un utilisateur sp√©cifique avec pagination
    /// 
    /// Fonctionnalit√© M√©tier:
    /// - Consultation des logs d'activit√© d'un utilisateur particulier
    /// - Audit trail personnalis√© pour analyse comportement utilisateur
    /// - Support investigation incidents utilisateur sp√©cifique
    /// 
    /// Cas d'Usage:
    /// - Audit actions utilisateur pour conformit√©
    /// - Investigation incidents s√©curit√© utilisateur
    /// - Analyse activit√© utilisateur pour support
    /// - Historique complet actions utilisateur
    /// 
    /// S√©curit√©:
    /// - Acc√®s exclusif administrateur
    /// - Validation identifiant utilisateur
    /// - Pagination pour performance
    /// </summary>
    /// <param name="userId">Identifiant de l'utilisateur</param>
    /// <param name="page">Num√©ro de page pour pagination (d√©faut: 1)</param>
    /// <param name="pageSize">Nombre d'√©l√©ments par page (d√©faut: 10)</param>
    /// <returns>Page de logs de l'utilisateur sp√©cifique</returns>
    [HttpGet("user/{userId}")]
    [AdminOnly]
    public async Task<ActionResult<PagedResponse<List<LogDto>>>> GetUserLogs(
        int userId,
        int page = 1, 
        int pageSize = 10)
    {
        Console.WriteLine($"üéØ LogController - Requ√™te re√ßue pour logs utilisateur {userId}, page {page}, taille {pageSize}");
        
        var result = await _logService.GetLogsByUserAsync(userId, page, pageSize);
        
        Console.WriteLine($"üéØ LogController - R√©sultat du service: Success={result.Success}, Count={result.Data?.Count ?? 0}");
        
        if (!result.Success)
        {
            Console.WriteLine($"‚ùå LogController - Erreur du service: {result.Message}");
            return BadRequest(result);
        }
            
        Console.WriteLine($"‚úÖ LogController - Retour de {result.Data.Count} logs pour utilisateur {userId}");
        return Ok(result);
    }

    /// <summary>
    /// Supprime tous les logs de consultation (m√©thodes GET) pour optimisation base donn√©es
    /// 
    /// Fonctionnalit√© M√©tier:
    /// - Nettoyage cibl√© des logs non-critiques (consultations GET)
    /// - Optimisation espace stockage et performance requ√™tes
    /// - Conservation uniquement des actions importantes (POST/PUT/DELETE)
    /// 
    /// Justification Business:
    /// - Les logs GET peuvent √™tre tr√®s nombreux et peu critiques pour l'audit
    /// - Seules les modifications de donn√©es sont importantes pour la tra√ßabilit√©
    /// - R√©duction significative du volume de la base de donn√©es
    /// 
    /// S√©curit√©:
    /// - Acc√®s exclusif administrateur
    /// - Action irr√©versible, √† utiliser avec pr√©caution
    /// - Log de l'action de nettoyage pour audit
    /// </summary>
    /// <returns>Nombre de logs GET supprim√©s</returns>
    [HttpDelete("clear-get-logs")]
    [AdminOnly]
    public async Task<ActionResult<ApiResponse<int>>> ClearGetLogs()
    {
        var result = await _logService.ClearGetLogsAsync();
        
        if (!result.Success)
            return BadRequest(result);
            
        return Ok(result);
    }
}
