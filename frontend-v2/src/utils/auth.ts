/*
 * ================================================================================================
 * UTILITAIRES AUTH - TOKEN JWT
 * ================================================================================================
 */

/**
 * R√©cup√®re le token JWT depuis le sessionStorage
 */
export const getAuthToken = (): string | null => {
  try {
    // D'abord essayer de r√©cup√©rer le token directement
    let token = sessionStorage.getItem('startingbloch_token') ?? null;
    if (token) token = token.trim();

    // Fallback: essayer depuis le store Zustand (persisted state)
    if (!token) {
      const authStore = localStorage.getItem('startingbloch-auth');
      if (authStore) {
        try {
          const parsed = JSON.parse(authStore);
          const state = parsed?.state ?? parsed ?? null;
          token = state?.token ?? null;
          if (token) token = String(token).trim();
        } catch (e) {
          console.warn('üîë Auth Utils - impossible de parser startingbloch-auth', e);
        }
      }
    }

    console.log('üîë Auth Utils - token pr√©sent:', !!token);
    return token && token.length > 0 ? token : null;
  } catch (error) {
    console.error('‚ùå Auth Utils - Erreur lors de la r√©cup√©ration du token:', error);
  }
  return null;
};

/**
 * Intercepteur Axios pour ajouter automatiquement le token JWT
 */
export const createAuthInterceptor = () => ({
  request: (config: any) => {
    const token = getAuthToken();
    
    console.log('üîê Auth Interceptor - Configuration de la requ√™te...');
    console.log('Token trouv√©:', token ? 'OUI' : 'NON');
    console.log('URL:', config.url);
    console.log('Method:', config.method);
    
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
      console.log('‚úÖ Auth Interceptor - Token ajout√© √† l\'en-t√™te Authorization');
      console.log('üîç Token (premiers 50 caract√®res):', token.substring(0, 50) + '...');
      console.log('üîç En-t√™te Authorization:', config.headers.Authorization.substring(0, 70) + '...');
    } else {
      console.warn('‚ö†Ô∏è Auth Interceptor - Aucun token disponible !');
    }
    
    return config;
  },
  error: (error: any) => {
    console.error('‚ùå Auth Interceptor - Erreur:', error);
    return Promise.reject(error instanceof Error ? error : new Error(String(error)));
  }
});
